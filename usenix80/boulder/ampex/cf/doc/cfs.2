

CONTIGUOUS FILE SYSTEM(V)     6/79      CONTIGUOUS FILE SYSTEM(V)



NAME
     cfs - format of contiguous file system volume

DESCRIPTION
             A contiguous file system (cfs) may  be  added  to  a
     normal mountable Unix file system (Ufs) to combine the capa-
     bilities for fast large-scale i/o to or  from  a  contiguous
     region of a peripheral device with the conveniences (such as
     directories, protection, and use of available software) of a
     normal  Ufs.   The standard Unix convenience that is lacking
     in a contiguous file is dynamic changability of  file  size.
     A  cfs  file has its storage allocated at creation time, and
     the amount of storage is then unchangeable until the file is
     deleted.

             Each cfs has a "parent" Ufs, and  each  Ufs  has  at
     most  one  "child"  cfs.   The format of the superblock of a
     parent Ufs is

     struct {
             ...                     /* same as normal Ufs superblock */
             int devc,
                 cfb0,               /* in 512-byte blocks */
                 cfsiz,              /* in chunks */
                 chunksize,          /* in blocks */
                 boundsize,          /* in chunks */
                 flsize,
                 infl,
                 rootlbn;
     } ;

     Everything up to _d_e_v_c is the same as on the  old  superblock
     structure.   As  stored  on disk and in core, the old super-
     block had about the last 50 words of information unused, the
     new version uses 8 of those words.

             A cfs has three types  of  internal  logical  units:
     chunks,  boundaries  and  files.  Files on a cfs have all of
     their storage allocated at creation time.  Allocation is  in
     units  of chunks of storage, each of size _c_h_u_n_k_s_i_z_e A speci-
     fied number of files, each of a specified size, may be allo-
     cated  at  once.   A single creation of nfiles, each of size
     nchunks, yields nfiles new directory entries and  inodes  on
     the  parent  Ufs,   and a contiguous region of size at least
     nfiles*nchunks*512 bytes on the  cfs.   In  addition,  boun-
     daries  exist  so  that if nchunks >= _b_o_u_n_d_s_i_z_e , the region
     allocated for each file is guaranteed to obey

             (address of start of file) mod boundsize = 0.

     For example, in an Ampex application, chunk size  =  1  disk
     cylinder  and boundsize = 2 chunks, so any file of size >= 2
     chunks is guaranteed to start at the beginning of  an  even-
     numbered  cylinder.   The "boundary" option can waste space,
     but can be disabled by setting its value to 1 chunk.


                              - 1 -




CONTIGUOUS FILE SYSTEM(V)     6/79      CONTIGUOUS FILE SYSTEM(V)


             A free list of space  available  for  allocation  is
     kept  in  a  file on the parent Ufs in the form of a B-tree.
     The i-number of this file is _i_n_f_l the logical  block  number
     inside the file of the root b-node is _r_o_o_t_l_b_n and the number
     of active bnodes is _f_l_s_i_z_e and minor device where the cfs is
     stored  are  _d_e_v_c ; the cfs spans the region from block _c_f_b_0
     to block cfb0 + ( _c_f_s_i_z_e * chunksize) on that device.

             The division between a parent Ufs and its child  cfs
     is  the obvious one:  the superblock and all directories and
     inodes reside on the Ufs, while the data region of each con-
     tiguous  file  resides on the cfs. The changes to the super-
     block have been explained.  (Formerly junk  was  written  on
     the bottom part of the superblock by mkfs(VIII).  To correct
     this, see zerosb(VIII).)  The  directory  structure  is  un-
     changed.   The  inode of a contiguous file has been modified
     so that the "flags" field indicates  character-type  special
     file (the 020000 bit is on) and the

     int addr[8];
     array has been changed to
     struct {
             int cflag,      /* contiguous file flag, == -1 */
                 cdev;       /* cfs device number */
             long base,      /* block # of start of file on cfs */
                  last;      /* ...end... */
             int pad[2];
     };

             Logical block number b in a contiguous file is  phy-
     sical  block  b  + base on device devc.  For b to be part of
     the given file,

     b >= 0   and   b + base < last

     must be satisfied.  If block b exists, then it was allocated
     at the time the file was created.

             De-allocation of a contiguous file occurrs when  the
     parent inode goes away, as in rm(I) and unlink(II).

FILES
     <Parent mountable Ufs root directory>/.flist

SEE ALSO
     c_creat(II),  stat(II),   fs(V),   df(VIII),   icheck(VIII),
     mkcfs(VIII), mount(VIII), zerosb(VIII).

AUTHOR
     Mitchell Gart, University of California, Berkeley and  Ampex
     Corporation, Redwood City







                              - 2 -




CONTIGUOUS FILE SYSTEM(V)     6/79      CONTIGUOUS FILE SYSTEM(V)


BUGS
             Since the previous version of mkfs(VIII) wrote  junk
     on  the  bottom part of the superblock, zerosb(VIII) must be
     run on all mountable file systems to remove this junk.

             Since addr[0] was previously sometimes used to store
     a device number, -1 (0177777) becomes an illegal major-minor
     device number.

             Chunk sizes not an integral multiple of  512  bytes,
     chunk  sizes  >  2**15 blocks, and file sizes > 2**15 chunks
     are not supported.

             There should be a single-user utility program to  do
     compression of a fragmented cfs.

             Unaware  or  unscrupulous  users  can  tie  up  huge
     amounts of disk space.








































                              - 3 -


