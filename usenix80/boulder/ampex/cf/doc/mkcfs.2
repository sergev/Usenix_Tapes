

MKCFS(VIII)                   6/79                    MKCFS(VIII)



NAME
     mkcfs - make a contiguous file system

SYNOPSIS
     /etc/mkcfs Ufs firstb lastb chsiz bsiz [cdev]

DESCRIPTION
             Causes a normal Unix file system "Ufs" to have asso-
     ciated  with  it a contiguous file system(cfs).  A free list
     for the cfs is created in a file with  pathname  Ufs/.flist.
     The  cfs spans blocks _f_i_r_s_t_b to _l_a_s_t_b , has chunk size _c_h_s_i_z
     512-byte blocks, boundary size _b_s_i_z chunks.  The  data  por-
     tion  of the created file system is to reside on Unix major-
     minor device _c_d_e_v if specified, or on the same device as Ufs
     by default.

             The Ufs should not be mounted at the  time  this  is
     run.  Input numbers are decimal by default, or octal if they
     have a leading '0'.

SEE ALSO
     fs(V), cfs(V), mkfs(VIII)

DIAGNOSTICS
             Many.  The program attempts everywhere to check  the
     reasonableness  of  its  arguments.  The diagnostics printed
     try to be self-explanatory.  Some of the rules that the pro-
     gram attempts to enforce are:

             Ufs must be an unmounted,  block-type  special  file
     that presently has zeroes on the critical portion of its su-
     perblock, and must be readable  and  writeable.   Ufs/.flist
     must be creatable.

             If the Ufs and cfs reside on the same physical  dev-
     ice, the cfs must start immediately after (within < 1 chunk)
     the Ufs.  If they reside on separate devices, the  cfs  must
     start at block 0 of its device.

             The first block, and last block + 1, must be  multi-
     ples of chunk size.  Both of these blocks must be physically
     present.

AUTHOR
     Mitchell Gart, University of California, Berkeley and  Ampex
     Corporation, Redwood City

BUGS
             It is possible to make the  disasterous  mistake  of
     superimposing a cfs on a device that already contains anoth-
     er file system, or other data.  This  would  probably  cause
     both systems to become trash, and might crash Unix.





                              - 1 -


