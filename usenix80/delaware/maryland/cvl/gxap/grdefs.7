.th GRDEFS VII 5-October-1979
.sh NAME
grdefs \*- Grinnell display processor GMR-27 definitions
.sh SYNOPSIS
.bd #include
/usr/lib/grdefs.c
.s3
.bd #include
/usr/lib/grdefs.f
.sh DESCRIPTION
The file
.bd grdefs
provides command mnemonic definitions
for the Grinnell display processor GMR-27
as implemented at the University of Maryland.
.s3
Mnemonics specify each GMR-27 command and bit patterns
used to evoke options within each command.
Command sequences for each peripheral summarize the available
peripheral device features.
The format of data words supplied by the readback peripheral
data (RPD) command is provided after the RPD command
of appropriate peripheral devices.
A standard header gives the needed format for raster outputting
rectangular images.
.s3
In the following summary,
A's and D's represent addresses and data, respectively.
CL is used to specify a cursor coordinate name for the
independent cursor peripheral device.
In CL, C is 0 or 1 to specify the first or second cursor
(only two out of four may be manipulated).
L is 0 or 1 to specify an element (column) or line (row)
coordinate, respectively.
.sh FILES
/usr/lib/grdefs.c       for c
.br
/usr/lib/grdefs.f       for Fortran
.sh "SEE ALSO"
Grinnell Systems,
.it "GMR-27 User's Manual."
.br
gr(IV)
.sh AUTHOR
Robert L. Kirby
.sh BUGS
Other definition files are also in use.
.bp
.in0
.ce
COMMAND SUMMARY
.if t .ta .75i 1.5i 2i
.if n .ta 10 18 24
.if t .in 3.5i
.if n .in 40
.if n .na
.s1
.ti0
Value   Mnemonic        Value           Name
.ti0
(octal)                 (bit)
.ps 9
.vs 11p
.s3
.ti0
00dddd  WID     0 000 DDD DDD DDD DDD   Write Image Data
.ti0
01mmmm  LSM     0 001 MMM MMM MMM MMM   Load Subchannel Mask
.ti0
020ddd  WGD     0 010 00x xDD DDD DDD   Write Graphic Data
.br
(left to right 8 bits)
.ti0
022ddd  WAC     0 010 01x x0D DDD DDD   Write Alphanumeric Character
(7-bit ASCII upper case only)
.ti0
0240mm  LWM     0 010 10x xBA ZVH WCC   Load Write Mode
.ti0
000200  LIGHT   0 000 000 010 000 000   Light background
.br
(reversed vs dark)
.ti0
000100  ADDITV  0 000 000 001 000 000   Additive graphics
.ti0
000040  ZEROW   0 000 000 000 100 000   Zero Write (must use)
.ti0
000020  VECTOR  0 000 000 000 010 000   Vector graphics
.ti0
000010  DHGHT   0 000 000 000 001 000   Double Height
.ti0
000004  DWDTH   0 000 000 000 000 100   Double Width
.ti0
000002  CURPOS  0 000 000 000 000 010   Sum for cursor position
.ti0
000001  VCURSOR 0 000 000 000 000 001   Visible cursor
.s1
.ti0
0260mm  LUM     0 010 11x xxx SSL LEE   Load Update Mode
.ti0
000001  EC      0 000 000 000 000 001   Ea := Ec
.ti0
000002  EBA     0 000 000 000 000 010   Ea := Ea + Eb
.ti0
000003  ECA     0 000 000 000 000 011   Ea := Ea + Ec
.ti0
000004  LC      0 000 000 000 000 100   La := Lc
.ti0
000010  LBA     0 000 000 000 001 000   La := La + Lb
.ti0
000014  LCA     0 000 000 000 001 100   La := La + Lc
.ti0
000020  SHOME   0 000 000 000 010 000   Home scroll
.ti0
000040  SDOWN   0 000 000 000 100 000   scroll down
.ti0
000060  SUP     0 000 000 000 110 000   scroll up
.s1
.ti0
030000  ERS     0 011 00x xxx xxx xxx   Erase (entire screen)
.ti0
032000  ERL     0 011 01x xxx xxx xxx   Erase Line
.ti0
034Imm  SLU     0 011 10x xxI SSL LEE   Special Location Update
.br
(see LUM for SSL LEE)
.ti0
000100  SINHBT  0 000 000 001 000 000   Inhibit scroll timing
.s1
.ti0
036000  EGW     0 011 11x xxx xxx xxx   Execute Graphic Write
.s3
.ti0
002000  GWRITE  0 000 010 000 000 000   Execute graphic bit, W
.br
write after loading
.br
register in following
.ti0
040aaa  LER     0 100 0Wx AAA AAA AAA   Load Ea Relative
.ti0
044aaa  LEA     0 100 1Wx AAA AAA AAA   Load Ea
.ti0
050aaa  LEB     0 101 0Wx AAA AAA AAA   Load Eb
.ti0
054aaa  LEC     0 101 1Wx AAA AAA AAA   Load Ec
.ti0
060aaa  LLR     0 110 0Wx AAA AAA AAA   Load La Relative
.ti0
064aaa  LLA     0 110 1Wx AAA AAA AAA   Load La
.ti0
070aaa  LLB     0 111 0Wx AAA AAA AAA   Load Lb
.ti0
074aaa  LLC     0 111 1Wx AAA AAA AAA   Load Lc
.s1
.ti0
10000c  LDC     1 000 xxx xxx xxx CCC   Load Display Channels
.ti0
000003  IMAGECH 0 000 000 000 000 011   Image display channels
.br
bits(11-8) and (7-0)
.ti0
000004  OVERLAY 0 000 000 000 000 100   Overlay display channel
.br
for white overlay
.s1
.ti0
110000  NOP     1 001 xxx xxx xxx xxx   No Operation
.ti0
12pppp  SPD     1 010 PPP PPP PPP PPP   Select Peripheral Device
.ti0
13aaaa  LPA     1 011 AAA AAA AAA AAA   Load Peripheral Address
.ti0
14dddd  LPR     1 100 DDD DDD DDD DDD   Load Peripheral Register
.ti0
15dddd  LPD     1 101 DDD DDD DDD DDD   Load Peripheral Data
.ti0
160000  RPD     1 110 xxx xxx xxx xxx   Readback Peripheral Data
.ti0
170000  NON     1 111 xxx xxx xxx xxx   No Operation
.s1
.ti0
.ce
PERIPHERAL DEVICE CONTROLS
.s3
.ti0
.ce
.bd "Camera Digitizer control"
.ti0
120002  DIGITZ  1 010 000 000 000 010   Select Peripheral Device
.ti0
1400ip  LPR     1 100 000 000 II0 PPP   II=camera selection=00
.br
(PPP<8)=shift down count
.ti0
15cddd  LPD     1 101 Cxx xDD DDD DDD   Camera digitizing mode
.ti0
004000  CNTUOUS 0 000 100 000 000 000   Continuous input with
.br
D>1 is averaging count,
.br
D=0 or C=0 single frame
.s1
.ti0
.ce
.bd "Independent Cursor control"
.ti0
120004  CURSOR  1 010 000 000 000 100   Select Peripheral Device
.ti0
14000d  LPR     1 100 000 000 000 0DD   Display cursors (D=1=on)
.br
Each bit for a cursor
.ti0
14400d  CWHITE  1 100 100 000 000 0DD   D=1 for white, D=0 black
.ti0
13000c  LPA     1 011 000 000 000 0CL   to address coordinate
.br
CL=selected cursor name
.ti0
150ddd  LPD     1 101 0xx DDD DDD DDD   Move cursor relatively
.ti0
154ddd  ABSMOV  1 101 1xx DDD DDD DDD   Move cursor absolutely
.ti0
160000  RPD     1 110 xxx xxx xxx xxx   Read cursor positions
.br
Reading line resets flag
.ti0
0fCaaa  data    0 00F 0CL AAA AAA AAA   F=1 if enter flag is on,
.br
CL=selected cursor name
.ti0
Use
.it read
count of 2 to wait for cursor flag events.
.ti0
Device /dev/gr uses an SPD(122000) and RPD(160000)
.ti0
to obtain the following data word:
.ti0
000004  data    0 000 000 000 000 100   Cursor interrupt word
.s1
.ti0
.ce
.bd "Special Video Control"
.ti0
120020  VCNTRL  1 010 000 000 010 000   Select Peripheral Device
.ti0
14000g  LPR     1 100 000 000 000 00G   G=1 greyscale (bits 11-4)
.br
G=0 color (blue 11-8,
.br
green 7-4, red 3-0)
.s1
.ti0
.ce
.bd "Video Lookup table"
.ti0
120040  LOOKUP  1 010 000 000 100 000   Select Peripheral Device
.ti0
13aaaa  LPA     1 011 AAA AAA AAA AAA   Load table address
.ti0
15dddd  LPD     1 101 DDD DDD DDD DDD   Put data in table
.ti0
14000b  LPR     1 100 000 000 000 00B   B=1 bypass lookup table
.ti0
160000  RPD     1 110 xxx xxx xxx xxx   Readback lookup table
.ti0
10dddd  data    1 000 DDD DDD DDD DDD   Lookup table value
.s1
.ti0
.ce
.bd "Memory Readback"
.ti0
120400  MEMORY  1 010 000 100 000 000   Select Peripheral Device
.ti0
160000  RPD     1 110 xxx xxx xxx xxx   Readback memory channel
.ti0
00dddd  data    0 000 DDD DDD DDD DDD   Selected memory value
.s1
.ti0
.ce
.bd "Byte Unpacking"
.ti0
121000  UNPACK  1 010 001 000 000 000   Select Peripheral Device
.ti0
001000  SWTBYT  0 000 001 000 000 000   Switch bytes of word
.ti0
Below, SWTBYT default is on (for least significant byte first).
.ti0
000400  ODDBYT  0 000 000 100 000 000   Ignore last byte of last
.br
word in following (Y bit)
.ti0
141ddd  IBYTES  1 100 0x1 YDD DDD DDD   D=pairs of image points
.ti0
145ddd  GBYTES  1 100 101 YDD DDD DDD   D=words of graphic data
.ti0
147ddd  ABYTES  1 100 111 YDD DDD DDD   D=pairs of alphanumerics
.ti0
DD DDD DDD pairs of bytes follow the above LPR commands.
.s1
.ti0
.ce
.bd "Internal Self-test"
.ti0
124000  ITESTS  1 010 100 000 000 000   Select Peripheral Device
.ti0
13000d  LPA     1 011 000 000 000 0DD   DD = test number - 1
