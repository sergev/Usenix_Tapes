.th DOODLE VI 24-October-1979
.sh NAME
doodle \*- 2-d and 3-d graphics on the Grinnell
.sh SYNOPSIS
.bd doodle
.sh DESCRIPTION
.it Doodle
is a self-contained system for creating and manipulating 2- and 3- dimensional
objects and functions on the Grinnell. Objects are created and manipulated by
a set of commands which allows the user to specify what part of the screen is
to be used, the position of the observer, the direction of view, etc.
The following commands are currently available.
.sp +1
.ul
Display control commands
.in +8
.sp 1
.ti -8
.bd status
- prints the observer's current position, direction of view, the
size and shape of the display window, and the size, shape and position of the
viewport.
.sp 1
.ti -8
.bd viewport
llx lly urx ury - establishes the size and position of the
viewport on the Grinnell screen.  The maximum size is 4.0 by 3.75 which is
the entire Grinnell screen. (llx,lly) is the lower left corner and (urx,ury)
is the upper right corner, which are initially set to (0, 0) and (4.0, 3.75).
.sp 1
.ti -8
.bd position
x y z - moves the observer to the location (x,y,z).  This is
initially set to (6.0, 8.0, 7.5).
.sp 1
.ti -8
.bd direction
i j k - sets the vector components of the direction of view.
If the observer is at point (x,y,z) and direction is set to (-x,-y,-z) then
the observer is looking at the origin.  The initial values are
(-6.0, -8.0, -7.5).
.sp 1
.ti -8
.bd size
x y - sets the size of the display window. The 3-d space is
projected onto this window, which is then projected onto the viewport.
The initial window size is 5.0 by 5.0.
.sp 1
.ti -8
.bd distance
z - sets the distance between the window and the observer.
The observer looks through the center of the window. Distance is initially 10.
.sp 1
.ti -8
.bd erase
- erases the entire screen, regardless of the viewport being used.
.sp 1
.ti -8
.bd erasevp
- erases the current viewport, but not its frame, if it has one.
.bp
.ti -8
.bd frame
- draws a frame around the current viewport.
.sp 1
.ti -8
.bd unframe
- erases the frame around the current viewport, if there is one.
.sp 1
.ti -8
.ul
Two-d commands
.sp 1
.ti -8
.bd mov
x y - moves to the point (x,y) in viewport coordinates.
.sp 1
.ti -8
.bd drw
x y - draws a line from where you are to the point (x,y)
in viewport coordinates.
.sp 1
.ti -8
.bd move
x y - moves to the point (x,y) in window coordinates.
.sp 1
.ti -8
.bd draw
x y - draws a line from where you are to the point (x,y)
in window coordinates.
.sp 1
.ti -8
.ul
Three-d commands
.sp 1
.ti -8
.bd 3d
name1 name2 - performs the required transformations on the input file
(name1) and outputs the transformed coordinates to the output file (name2).
If the output file does not already exist, then it is created.
.sp 1
.ti -8
.bd skel
name - takes the output file created by
.ul
3d
and outputs a wire frame, or skeleton plot of the file.
.sp 1
.ti -8
.bd solid
name - takes the output file created by
.ul
3d
and outputs a solid plot of the file, with all hidden lines removed.
.sp 1
.ti -8
.bd plot3
- plots three dimensional mathematical functions, and is not worth
discussing in its present state.
.sp 1
.ti -8
.ul
Miscellaneous commands
.sp 1
.ti -8
.bd prompt
string - changes the prompt string.
.sp 1
.ti -8
.bd read
name - reads input commands from a file rather than from
the terminal. When the entire file has been read, control
returns to the terminal.
.sp 1
.ti -8
.bd end
- terminates the program. The screen is left as is.
.sp 1
.ti -8
.ul
3d input file format
.sp 1
.in -8
Three dimensional objects are constructed out of planar polygons. A cube
for instance would be six polygons, each of which is a square.  A polygon is
specified by listing its vertices. An edge connects each vertex in the list
to the next vertex, with the last vertex connected to the first, forming a
closed polygon. The polygons may have any number of edges greater than or
equal to three. The separate polygons do not have to be related in any way,
and they may even penetrate each other.
.bp
The input file format is as follows.
.sp 1
<file> => <polygon> * <polygon> ... * <polygon> **
.br
<polygon> => <point> ... <point>
.br
<point> => x y z  (three numbers, separated by at least 1 space)
.sp 1
The following is an example of the file format. The list below gives the
points for two squares with endpoints (0,0,0), (1,0,0), (1,1,0), and (0,1,0),
and (0,0,1), (1,0,1), (1,1,1), and (0,1,1).
.in +8
.sp 1
0 0 0
.br
1 0 0
.br
1 1 0
.br
0 1 0
.br
*
.br
0 0 1
.br
1 0 1
.br
1 1 1
.br
0 1 1
.br
**
.sp 1
.in -8
The numbers in the file can be positive or negative and they may include a
decimal point.
.sh AUTHORS
Gyorgy Fekete, with extensions by James W. Williams.
.sh FILES
/dev/gr
.sh "SEE ALSO"
.it "Principles of Interactive Computer Graphics, 1st ed."
by Newman and Sproull.
.sh DIAGNOSTICS
.it Doodle
tells you if a command doesn't make sense, or is not implemented
yet. Error messages are also printed if
.it doodle
can not open or close the files it is using, or if one of the Grinnell
functions can not be peformed.
.sh BUGS
.it Doodle
may occasionally crash for unknown reasons.  The 3-d function plotting
feature is not easy to use. 3-d objects displayed using the
.ul
solid
command may not penetrate the plane that passes through the observer's
position and is perpendicular to the direction of view. The
.ul
skel
command handles this situation correctly.
