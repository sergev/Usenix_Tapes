		    Implementation of Extensibility
			and Other Improvements
			  in the Rand Editor

			    Walt Bilofsky
			  16 September 1976




1. Summary

             Several new features, such as substring replacement,
     and paragraph fill and justification, have been added to the
     Rand editor. The mechanism by  which  this  is  done  allows
     other  such  enhancements  to be implemented without further
     editor  modification,  both  on  a  system-wide  and  on  an
     individual  user  basis.  In addition, several other, minor,
     features have been added.  This document explains how to use
     the  new features, and then goes into full detail concerning
     the general mechanism.



2. New Features - A Quick Introduction.

             The new features are all invoked by the <EXEC> key -
     <ctrl-X>.  For example, to fill and justify the paragraph of
     text starting at the line on which the cursor  is  currently
     positioned, type

                     <ARG>just<EXEC>

     To  fill  (but  not  justify  right  margins)  the  next   6
     paragraphs, type

		     <ARG>6 fill<EXEC>

     To replace all occurrences of the  word  "Raquel"  with  the
     string "Ms. Welch" in the next 15 lines, type

		     <ARG>15l rpl Raquel "Ms. Welch"<EXEC>

     (The quotes are  necessary  since  the  string  "Ms.  Welch"
     contains a space.)

             This is probably all you need to know  in  order  to
     make  use  of  the  new  editor  features.  The next section
     describes minor changes in the  editor.  Following  sections
     give more detail concerning the features described above.



3. Minor New Features

             This section enumerates a number  of  small  changes
     which appear in this new version of the editor.

                The "suck" key now works both in  insert  and  in
             normal mode.

                When a carriage return is  typed  on  the  bottom
             line  of  the  screen,  the  editor  will  perform a
             <+LINE> before  the  return,  rather  than  wrapping
             around  as  previously.  This  will  expedite  rapid
             typing of text at the end of a file.

                The  lack  of  rapid  vertical  positioning  keys
             analogous  to  <TAB>  and <-TAB> has long been felt,
             but there  are  no  buttons  available  for  such  a
             function.   Now  <ARG>n<positioning  key>,  for  any
             integer n, will repeat the positioning key n  times.
             The  advisability  of this feature is debatable, and
             feedback would be appreciated.

                The cursor is now more likely to wind up  on  the
             precise line gone to after a <GO TO>.

                The editor now preserves the protection  mode  of
             the  terminal  upon  exiting.  Thus, if the user has
             locked out writes to her/his  terminal,  the  editor
             will no longer destroy that lockout.

                Users should also note the effect  of  the  first
             bug fix mentioned below.

             In addition, several bugs of long standing have been
     fixed in this or recent versions of the editor:

                It has been possible to mess up the state of  the
             screen  by  typing  a  character  immediately  after
             causing the screen contents to be changed. This  was
             done  in  order  to  allow  function keys to abort a
             complete  screen  writeout,  to  speed  up  multiple
             window  motion  operations.  The  editor  no  longer
             aborts writing out  the  screen  except  on  certain
             typed characters: only control characters other than
             <ARG>, <+/-SRCH> and cursor positioning  keys.  This
             should  avoid  most  situations  where the screen is
             left in an  incorrect  state  while  still  allowing
             rapid window motion without unnecessary display.

                The editor no longer crashes when  editing  files
             containing lines longer than 127 characters.

                The editor no longer removes the first  line,  if
             blank, added to an existing file.

                The editor no longer gets  locked  into  a  state
             where it crashes every time it is started, until the
             /tmp/resav file is deleted.

                The editor no longer loses the left margin bullet
             when  a  backspace  or suck is typed in insert mode.
             However, it still loses the right margin bullet.

                The editor no longer puts  incorrect  information
             on a line following multiple search operations.


4. How to Use the EXEC Function.

             The EXEC function is special in that it  takes  more
     than  one  argument.  As in UNIX commands, the arguments are
     separated by one or more spaces. The arguments are:

         1. An optional first argument,  telling  the  number  of
            lines  (negative  integer)  or  paragraphs  (positive
            integer) to be  operated  on.  If  this  argument  is
            omitted,  it  is  assumed  to  be  1 (one paragraph).
            Paragraphs are groups of non-blank lines separated by
            one  or  more  blank  lines.  The  first  line  to be
            operated on is always the line  currently  containing
            the  cursor.  If  lines  past the end of the file are
            specified, only lines up to the end of the  file  are
            used.   Lines  may  also  be  specified by an integer
            followed by the letter "l".  E.g., -15 and  15l  both
            specify a block of 15 lines.

         2. The name of the function (filter) to be performed.

         3. Arguments  to  the  function.  These  vary  with  the
            individual  function.  If an argument contains one or
            more spaces, it is necessary to enclose it in  paired
            single or double quotes ('' or "").

     The effect of the EXEC function key is to feed the lines  to
     be  operated  on to the function program specified, and then
     replace the lines by the same lines  as  processed  by  that
     program. The old lines are placed in the close-buffer.


5. The Replace Function: rpl

             The program rpl requires two arguments. It  operates
     on  the  lines indicated by replacing all occurrences of the
     character string which is its first argument by  the  string
     which  is  its  second  argument.  Remember to use quotes to
     enclose an argument containing spaces.

             Rpl recognizes  regular  expressions  in  its  first
     argument.   Thus,  to  delete all sequences of blanks at the
     beginning of the next 100 lines, type

		     <ARG>100l rpl "^  *" ""<EXEC>

     This means that the characters ^ $ @  *  [  and  ]  must  be
     preceeded  by  \  to  be recognized in the first argument of
     rpl. For the definition of regular expression, see ed(I)  in
     the  UNIX  Reference Manual (except N.B.: rpl uses @ instead
     of . to match any character).

             To delete a string using rpl, replace it by the null
     string "".


6. Justifying Text Paragraphs - just


             The program "just" passes its text lines to nroff to
     be  filled  and  justified.  Options are identical to nroff,
     except that hyphenation is normally turned off,  all  escape
     characters  are  set  to tilde, so as not to alter your text
     unexpectedly, and paging is disabled.

              Just  attempts  to  deal  correctly  with  indented
     paragraphs. It will always indent the first and second lines
     of a paragraph exactly as they are indented  in  the  source
     text,  and will line up all subsequent lines with the second
     line. It will also treat all multiple spaces and tabs within
     a  line as single spaces. This may have undesired effects in
     rare cases, but the general effect is to allow the  user  to
     correct already-justified paragraphs, and then rejustify the
     text.  (The special treatment of indented paragraphs may  be
     defeated; see below.)

              It is also possible to enter  a  paragraph  of  raw
     text,  in  free  format, starting the first two lines at the
     proper indentations, and then use just to justify the entire
     paragraph.

              As an example, this entire  file,  except  for  the
     four  header lines, can be passed through just any number of
     times, with the only alteration being the loss of the double
     blanks in two examples of string arguments (viz: "  *").

             Just may be given one  or  more  arguments.  If  the
     argument  begins  with  a  ".",  it  is taken to be an nroff
     command line and passed directly to roff. (If  the  argument
     does  not  begin  with  ".",  it  is  given  to  nroff as an
     argument; it is not clear that this is useful, however.)

             Example: to justify the next three  paragraphs  with
     hyphenation:

		     <ARG>3 just ".hy 1"<EXEC>

             Example:  to  justify  the  next  20  lines  between
     columns 10 and 70:

		    <ARG>20l just ".in 10" ".ll 70"<EXEC>

            If one  of  the  arguments  to  just  is  the  single
     character  "x",  just  will  not attempt to process indented
     paragraphs  correctly  or  remove  multiple  spaces   before
     passing  the  text  to  nroff.   Nroff will receive the text
     exactly as it appears in the source file.

            It is not possible to change the escape characters by
     an  argument  to  just. The rationale is that just should be
     capable of accepting its output as input.



7. Filling Text Paragraph - fill


             "Fill" works identically to "just" except that right
     hand  margins  are  not justified. See the preceding section
     for more information.



8. How It Works


             The <EXEC> key causes the editor  to  spawn  a  fork
     with a pipe as standard input and the editor temporary file,
     positioned at the current end of file, as  standard  output.
     The  fork then runs the named program as a filter, and dies.
     The editor examines the termination status of  the  fork.  A
     status of -1 is reserved for "File not found" when trying to
     execute.  A  status  of  -2  causes  a  "Program  terminated
     abnormally"  diagnostic.  If  the  status  is anything else,
     whatever was written on the standard output by the filter is
     inserted  in place of the input lines. The removed lines, if
     any, are placed in the close-buffer, and may be retrieved by
     <ARG><PUT>.

             The named filter is searched for in the same  manner
     as  the  shell  would: working directory, user's /bin, /bin,
     /usr/bin.  Thus users may write their  own  editor  filters,
     and may override system filters of the same name.

             Any program may be used as a filter. Thus,  to  pick
     five lines onto file phoo, type

		     <ARG>5l tee phoo<EXEC>

     This replaces the five lines with their output  from  tee  -
     i.e.,  the  five lines are not changed - but tee writes them
     on phoo as well.

             To insert file phum, type

                     <ARG>0 cat phum<EXEC>

     This inserts (replaces 0 paragraphs) file phum  (the  output
     of "cat phum") at the current line.

             To insert the current date and time at  the  current
     line, type

                     <ARG>0 date<EXEC>

	     And so on.
