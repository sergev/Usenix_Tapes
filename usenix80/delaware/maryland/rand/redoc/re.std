			    THE RAND EDITOR


Introduction:      
------------

Run the editor by typing: "re FILENAME <RET>"; FILENAME is the name of the
file to be viewed/edited initially.  For example, type "re /re.std <RET>"
to look at this file.  The first 21 lines of the file will be displayed
in a "window" 78 columns wide.  Additional information
may be found in the files /tmp/re/*.

You can scan the file by moving the window up, down, left or right; you can
edit your file by typing changes directly onto the file as it appears
in the window.	Characters appear on the screen at the spot marked with
the movable cursor.  This cursor is positions by use of the four
"cursor motion" buttons marked with arrows and by the <RETURN>, <HOME>,
<TAB>, and <-TAB> buttons.

Any character displayed within the window may be replaced by first moving
the cursor to the character and then typing the new character.
Characters may be deleted with the <GOBBLE>, <SUCK>, or space keys.

Special functions allow you to delete pieces of text,
 pick up pieces of text and put copies of them down elsewhere in the same
 or other files, open up blank lines, and enter a mode in which the characters
 you type do not "type over" the previous text but are inserted in the
 middle of it.

These special functions are performed by control codes, typed by pushing a
 special function directly or by holding down the CTRL key and at the same
 time pressing the designated letter key on the keyboard. Some of the
 the functions are performed at the point on the screen at which they are
 typed; some may be modified by numerical or text arguments given by
 pushing the ARG button (labelled BREAK), the argument, and then the function
 The ARG button leaves a marker on the screen to remind you where the
 cursor was, and then lets you type the argument in a special place
 on the bottom line of the screen.  Error messages also occasionally
 appear on this bottom line.

Handy Control Function Chart (DATAMEDIA):

-----------------------------------------------------------------------------
|PICK|PORT|GOTO|USE |+PGE|OPEN|LEFT|CLOS|   |    |-PGE|RGHT|   |-LIN|QUOT|GOB
| ff | so | si | vt | em |eot |soh |ack |DUP|XTPE|XMIT|XLIN|TPE|EEOL|EEOS| MR
-----------------------------------------------------------------------------
 \CH-T\  ! \  " \  # \  $ \  % \  & \  ' \  ( \  ) \    \  = \ ~ \ |  \  \   |
  \ esc\ 1  \ 2  \ 3  \ 4  \ 5  \ 6  \ 7  \ 8  \ 9  \ 0  \ -  \^  \ \  \_ \bs|
   --------------------------------------------------------------------------|
  \      \    \    \-SCH\    \+LIN\    \SUCK\    \    \    \  ` \ { \        |
   \  tab \ q  \ w  \ e  \ r  \ t  \ y  \ u  \ i  \ o  \ p  \ @  \ [ \ return|
  ---------------------------------------------------------------------------
  \    \ cap\    \    \    \    \PUT \    \    \    \    \  + \  *\ } \  \EXIT
   \ ctr\lock\ a  \ s  \ d  \ f  \ g  \ h  \ j  \ k  \ l  \ ; | : | ] |lf |rub
    \-------------------------------------------------------------------------
    | tty \    \    \    \CH-P\SAVE\    \    \    \    \    \    \      \ARG |
    | lock \shif\ z  \ x  \ c  \ v  \ b  \ n  \ m  \ ,  \ .  \ /  \ shift\brk|
    --------------------------------------------------------------------------

			      FUNCTION KEYS

			    ----------------
			    |  + | /\ |BACK|
			    |SRCH| || | TAB|
			    ----------------
			    |    |    |    |
			    | <- |HOME| -> |
			    ----------------
			    |INS | || | XQT|
			    |del | \/ |cncl|
			    ----------------

The handy chart above gives the current position of the function keys,
as they are implemented in the DATAMEDIA 2500 version of re.




	  Functions that may be modified by supplying an argument
	  ========= ==== === == ======== == ========= == ========

Key	  Basic function (no argument)	   Modifications (with argument)
---	  ----------------------------	   -----------------------------

<+PAGE>   Moves window down 1 page, where  <ARG>n<+PAGE> moves down n pages.
	   a page is merely the number
	   of lines in the window.

<-PAGE>   Moves window up 1 page.	   <ARG>n<-PAGE> moves up n pages.

<+LINE>   Moves window down 8 lines.	   <ARG>n<+LINE> moves down n lines.
 cntl-t                                    <ARG><+LINE> moves down so the line
					    with the cursor is the first line.

<-LINE>   Moves window up 8 lines.	   <ARG>n<-LINE> moves up n lines.
					   <ARG><-LINE> moves up so the line
					    with the cursor is the last line.

<GOTO>	  Moves window to top of file.	   <ARG>n<GOTO> moves to the nth line.

<+SCH>	  Search down into the file from   <ARG>key<+SCH> changes the search
	   the current cursor position	    key to "key" and searches down
	   looking for the next occur-	    into the file.
	   ence of the search key; the
	   key is the one last specified
	   as a parameter to a previous
	   search.

<-SCH>	  Search up into the file from	   <ARG>key<-SCH> changes the search
 cntr-e    the current cursor position      key to "key" and searches up into
	   looking for the next occur-	    the file.
	   ence of the search key; the
	   key is the one last specified
	   as a parameter to a previous
	   search.

<LEFT>	  Moves window left 8 columns	   <ARG>n<LEFT> moves the window left
	   Left and right margins	    n columns.
	   indicate if there is
	   information past the edge.

<RGHT>	  Moves window right 8 columns	   <ARG>n<RGHT> moves the window right
	   Left and right margins	    n columns.
	   indicate if there is
	   information past the edge.

<PICK>	  Pick up 1 line into the main	   <ARG>n<PICK> picks up n lines into
	   PUTbuffer (there are currently   the main PUTbuffer.
	   two PUTbuffers, the main, which
	   holds the text last picked, and
	   the alternate, which holds the
	   text last deleted.  Each can be
	   put back into the file by using
	   appropriate forms of the <PUT>
	   function.

<PUT>	  Puts back the contents of the    <ARG><PUT> puts back the contents
 cntr-g    main PUTbuffer, i.e. the         of the alternate PUTbuffer, i.e.
 <bell>    stuff last picked.  The first    the stuff last deleted.
	   line in the buffer goes where
	   the cursor is; the text at that
	   that point is moved down (lines
	   are opened up) to make room.

<OPEN>	  Opens up space for 1 line.	   <ARG>n<OPEN> opens up space for
					    n lines.

<CLOS>	  Deletes 1 line, which is saved   <ARG>n<CLOS> deletes n lines, also
	   in the alternate PUTbuffer.	    saved in the alternate PUTbuffer.

<SAVE>                                     <ARG>newname<SAVE> renames the
 cntr-v                                     the text viewed by the current
					    window to newname.	A name is
					    needed for all windows containing
					    text.

<EXIT>	  Exits the editor, writing files. <ARG><EXIT> exits too, but also
 rub       Backup files containing the old  starts program c.
	   text are created if changes
	   were made.



	  Functions that do not take arguments
	  ========= ==== == === ==== =========

Key	  Function
---	  --------

<INS>	  Puts the editor into insert mode, where are subsequent characters
	   are inserted at the cursor, i.e., characters to the right of the
	   cursor are pushed over, not overwritten.  The editor is returned
	   to normal mode when the next <INS> is typed.

<QUOT>	  Allows you to type a control character into a file.  <QUOT> echoes
	   as a bright square, and whatever button on the keyboard
	   you press next appears as some printable character.	The two
	   characters now behave as two characters on the screen, but they
	   are really the single control character in the file. Changing the
	   second letter changes the control character; changing the pre-
	   ceeding mark results in two ordinary characters.

<PORT>	  Makes another window on your screen (so now you have two, or three,
	   or whatever.  Initially the window is looking at the "nameless
	   file" that you get when you run re without a file argument.	It
	   may be set to look at a file using <USE>, and all other func-
	   tions work within this little window.
	  The line dividing the two windows goes horizontally, on the line
	   where the cursor is, unless the cursor is on the first or last line
	   of your window, in which case the division is vertical.
	  It is perfectly fine to have two windows looking at the same file.
	   In fact, it is rather neat, since changes made by editing in either
	   window are reflected (at reasonable intervals) in the other window.
	  Use <ARG><PORT> to get rid of the most recently created window.


What Means It the Funny Characters in the Margins?
---- ----- -- --- ----- ---------- -- --- --------

 |  is normal.
 ^  means this is past the end of the file.  You can still type stuff -
	there just wasn't anything there before.  Even if you type something
	on a line, these characters won't go away until the line is rewritten
	by the editor - but the stuff is still there.
 <  There is stuff out to the left (maybe blanks).
 >  There is stuff out to the right (not all blanks).


What to Do when Disaster Comes:
---- -- -- ---- -------- -----

You are protected from loss of files by the unique double-action insurance
 system of the RAND editor.  First, if you edit file foo, the old file foo
 is renamed foo.bak.  (The old foo.bak goes into the bit bin: this is not
 a triple-action insurance system.)  If you do not like the results of your
 edit, delete the new foo and put the old foo back from foo.bak.

Second, the editor writes a file /tmp/rettyN.name, where ttyN is the terminal
 you are logged in on.  (To find out which, execute the UNIX command "who".)
 This file contains everything you typed during the editing session, control
 characters and all.  It is written over every time someone edits from your
 terminal, so save it immediately (using the UNIX "mv" command) should the
 editor crash.	(If the editor does crash, it will be decent enough to remind
 you to save the file.	Faithful unto death...)

If the /tmp/rettyN.name file has been saved as file "yourtty", you may now
 rerun the whole process by putting your .bak files back as the original ones
 (if the editor got as far as writing any of them out, which is doubtful),
 and executing the command
			re -yourtty

 You will see an instant replay of the whole editing session.  This is worth
 doing once just to watch.

If the problem was due to a system crash, this should get you up to a point
 shortly before the crash, and put you back in control from the keyboard.
 If it was an editor crash, you just get the crash again, except this time
 you also get a printout of the workspace pointers and a core dump.  If for
 some reason this does not interest you, you may do the following two things:
 1) Save a copy of the /tmp/rettyN file, and of the file(s) you were editing,
 so that the management can reproduce, and maybe even fix, the problem.
 2) Use the editor to edit the last few characters from the file.  Don't let
 the ugly ARG characters scare you; they are used to represent control codes.
 Just delete the last few characters or lines.	Then run the editor on the
 file as above.  This should get you to the point just before the crash, and
 you can then save your files.


Miscellania
-----------

If you try to edit a file which you can not write on, you may look - but the
 printing character keys will not function.

If you try to edit a file that you can write on but you can not write in
 the directory of, you will wind up with a copy of the file of the same
 name in your current directory while the old file is unscathed.  If you try
 to write a file in your current directory but don't have write permission
 for that directory, the editor will complain.

