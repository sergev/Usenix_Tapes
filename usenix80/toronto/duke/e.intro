	This document describes a few features of the Duke editor e.
By no means are all of the features and commands discussed herein;
the following is intended merely as preparation for reading e(I).


	E is a considerably enhanced version of ed(I).
It is best suited for fast terminals (at least 1200 baud);
however, most users at Duke find it preferable even at 300 baud.
It does not use any special terminal functions.
Some of the best features of e are:


1).	Simplicity.

	The best features of e are provided automatically,
so anyone familiar with ed is also familiar with e.
Some features are so plausible that users discover them
without reading the documentation.
WARNING -- new users should always escape (precede with  "\")
the character "`" (octal 140), which has a special meaning to e.


2).	Output Modes.

	There are four text display modes.
The usual mode, "neighborhood" mode, will be described here;
for the other modes, consult e(I).

The "n" command displays the neighborhood of the current line.
The neighborhood of line 6, for example, is lines 1 to 11 inclusive
(about 1/2 screenful on most CRT terminals).
In neighborhood mode, "<address>" is equivalent to "<address>n";
thus entering "6" prints lines 1 through 11,
with line 6 prefixed by a ">" to indicate that it is the current line.
Entering either "n+" or a null line
advances to and displays the next neighborhood
(in this case, lines 12 through 23).
"n-" retreats to and displays the previous neighborhood.
"n---" is a lazy way to go back three neighborhoods.
Clearly, neighborhood mode is convenient for browsing through
text files.


3).	Line numbering.

	Text displayed by e is line numbered,
which is helpful since commands use line numbers.
Consider a user who wishes to change a particular
printf statement in a large program.
"g/printf/p"  displays all lines containing a printf.
Suppose the printf on line 307 looks like the right one.
"307" displays the appropriate neighborhood.

	To effect numbering and other display features,
e uses the first 8 characters on the line.
For terminals with standard tab stops,
the only limitation is a shorter line width.
New files created with e will "naturally" have shorter lines.
For old files, use "np00" to turn line numbering (and prompting) off.
"np11" turns numbering and prompting back on.

4).	Single line insert, append, and change.

	E provides an abbreviation for these operations.
For example, if a user forgets to put a #define at the
beginning of a C program, typing

	1i.#define	TSO	0

will put it there.  Also, entering "27i."
is a convenient way to insert a blank line before line 27.
"a." and "c." work similarly to "i." .
"c." may be used to change a line too
garbled to modify with the substitute command "s".


5).	Other things

The editor asks for confirmation on "e" and "q" commands if
changes have been made since the last execution of "w".

"wq" is a convenient abbreviation for "w" followed by "q".

The closing delimiter is optional in context searches,
and in substitutes if the replacement string is nonempty.

The "unite" command u concatenates a range of lines.

An interactive substitute facility allows selective substitutions.

E now supports a macro facility, which can be useful.

Commands can have range suffixes.
For example "420d2" deletes lines 420 and 421.
Warning: "d50" does not delete line 50!

The current filename is displayed after every "w",
"r", and "!" command.
(This may be confusing since "w file2" causes the current
file name rather than "file2" to be printed.)
