.DA
.TL
A Beginner's Guide
to Unix \s-2APL\s0\\\\11
.AU
John D. Bruner
A. P. Reeves
.SH Introduction
.PP
.hy 14
This manual is intended to
serve as a guide to the use
of Unix \s-2APL\s0.
It is not intended to be
a reference manual on
the \s-2APL\s0 language;
rather,
it describes the local
implementation of \s-2APL\s0.
.SH
What's a Workspace?
.PP
One of the most important
concepts pertaining to the
use of \s-2APL\s0 is the idea of
a
"workspace".
Simply stated,
a
workspace
is a collection of
information
(including both
functions and data)
to be processed by \s-2APL\s0.
Programmers accustomed
to compiler languages
such as \s-2FORTRAN\s0 may
find this concept somewhat
unusual, 
so let's explore it
a bit further.
.PP
Perhaps the best way
to start describing a
workspace is to define
another term --
"file".
A file is also a
collection of
information.
On Unix,
however,
a file
.I usually
contains only one
type of information;
e.g. a C program or
data for a \s-2FORTRAN\s0 program.
A standard program,
perhaps written in \s-2FORTRAN\s0,
may access data in the file
by "opening"
the file
and reading it.
The file may also
be "created",
written,
or removed.
.PP
\s-2APL\s0 differs from \s-2FORTRAN\s0
in that while it is running,
all of the information it
needs is internal to itself.
That is,
all of the variables \s-2APL\s0
functions will require are
already available.
As functions are written,
they are added to this internal
storehouse of information.
As the functions are run,
and data is generated,
the data is added to this
internal storehouse.
\s-2APL\s0 provides the facility
to save part or all of this
information in a special
format
("workspace" or "load" format)
in a Unix file.
This file can only be
used by \s-2APL\s0 in later runs
(it should not,
for instance,
be printed on the line-printer).
.PP
In addition,
\s-2APL\s0 is capable of working with
more conventional files,
which are in character format
and can be edited and displayed
outside of \s-2APL\s0.
These files are in
"ASCII"
format.
.SH
Getting on Unix
.PP
If you do not have a Unix
account,
you can get one either through
your EE class
or from Mrs. Murray
if you are an EE student
or are taking an EE class.
You will be given a 
"login name"
and also a 
"password".
Your
login name
is your user
identifier.
Find an unused Unix
terminal and turn it on.
Hold down the Control key
and type a D.
The terminal should erase
the screen,
print a message identifying
the Unix system,
and ask:
.sp
Login:
.sp
Type your
"login name",
followed by a carriage return.
The system will respond with:
.sp
Password:
.sp
Type your password.
Unix will not display
what you type
so someone cannot look
over your shoulder at the
terminal and steal your account.
.PP
When Unix is satisfied that you
can login,
it will print the
"message of the day",
which is comprised of any
important news about the system,
and then it will type out a
percent sign:
.sp
%
.sp
This is the standard Unix prompt,
which means that it is waiting for
you to enter a command.
.SH
How do I start \s-2APL\s0?
.PP
The answer in this case is
extremely simple --
type the command:
.sp
% apl
.sp
\s-2APL\s0 will print a title
identifying itself and the
date of the current version,
will print "clear ws",
and will then tab 8 spaces
to the right.
This is \s-2APL\s0's prompt,
which means that it is
expecting you to type something.
The "clear ws"
message means that
you do not have anything
in your workspace
(no functions or variables
have been defined).
.PP
Equally important to getting
into \s-2APL\s0 is getting out.
To exit \s-2APL\s0,
type a Control-D
(hold down the Control key
and press a D).
You will once again get the
percent-sign
as a prompt.
.SH Character Sets
.PP
Here's the point at which
running Unix \s-2APL\s0 can get
somewhat confusing.
Unix \s-2APL\s0 at Purdue was
originally designed to
run on terminals which do
not have the standard \s-2APL\s0
character set.
These terminals
will be referred to as
"ASCII terminals".
During the summer of 1978,
some of the Unix terminals
were modified so that they
would print out standard
\s-2APL\s0 symbols.
These \s-2APL\s0 terminals
can be distinguished by
a small switch on the left
side.
When this switch is in the
upward position,
the terminal is a regular
ASCII terminal.
When the switch is flipped
down,
the terminal uses the \s-2APL\s0
character set.
.PP
It is necessary for you to
tell \s-2APL\s0 when you run it
what type of terminal you
are using.
If you are running \s-2APL\s0 on
an ASCII terminal,
you must use the default
ASCII character set.
In this case,
you run \s-2APL\s0 exactly as
described previously:
.sp
% apl
.sp
Also,
if you are using a modified
terminal,
but you wish to run \s-2APL\s0 in
ASCII mode,
you may leave the switch
up
and run \s-2APL\s0 the same way you
would from an ASCII terminal.
.PP
If you wish to run \s-2APL\s0 using
a modified terminal
in \s-2APL\s0 mode
(switch set down),
you must type the command:
.sp
% apl -m
.sp
This will inform \s-2APL\s0 that you
want it to process the \s-2APL\s0 character
set rather than the ASCII
character set.
When \s-2APL\s0 starts running,
it will print a reminder on
your screen to switch the
terminal to \s-2APL\s0 mode.
.PP
Unfortunately,
there is still a problem.
On Unix,
if you want to correct a mis-typed
keystroke,
you type what is called an
"erase character".
This character is,
by default,
a Control-H
(hold Control, press H).
The problem arises
from the fact that \s-2APL\s0 uses
"overstrike"
characters --
one character,
followed by a backspace,
followed by another character.
If you are running \s-2APL\s0 at an
\s-2APL\s0 terminal,
this is no problem,
because you generate
overstrike characters by
typing the first character,
typing the backspace
character,
and then typing the second character.
(The character that results from
the overstrike will be printed on
your screen.)
However,
on an ASCII terminal,
the only way to get an
overstrike is to type
the first character,
a Control-H,
and then the second character.
(On ASCII terminals,
you will only see the second
character when you finish this sequence.)
.PP
As you probably noticed,
this means that on ASCII terminals,
\s-2APL\s0 wants the Control-H
to be a valid character,
but Unix considers it to be a special
character,
used to erase mistakes.
The solution is to tell Unix
to use another character as
an erase character.
This is done by the "stty"
command.
The underline character
is not required in Unix \s-2APL\s0,
so you may use the command:
.sp
% stty erase \(ul
.sp
to make it your erase character.
(You must type this command
in response to the percent
sign,
.I not
inside \s-2APL\s0.)
After you type this command,
you may use the Control-H
as a backspace for
overstrikes
and may erase mistakes by
typing an underline.
