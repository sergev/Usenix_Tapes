.SH
\s-2APL\s0 System Commands
.PP
There are a number of
"system commands" in \s-2APL\s0.
These commands are used
to control your current
session.
System commands to \s-2APL\s0
may be typed at any time
in \s-2APL\s0 when it is prompting
for input.
(They may not be included
in \s-2APL\s0 functions, however.)
As stated previously,
when \s-2APL\s0 is waiting for
input from the keyboard,
it will type eight spaces.
.PP
There are two types of
system commands,
those which request information
and those which specify action by \s-2APL\s0.
All system commands are preceeded
by a right parenthesis.
As an example,
the following is a typical
entry into \s-2APL\s0:
.sp
% apl
.br
a p l \\ 1 1
.br
25 oct 1978
.sp
clear ws
.sp
	_
.sp
(the underline character "_"
represents the "cursor"
on the terminal).
The ")lib" command could then
be typed:
.sp
	)lib
.sp
.PP
Commands which specify action
are composed of the command
name
and some other value.
For instance,
to edit the function "fn",
the command would be:
.sp
	)editf fn
.sp
.PP
Before we start examining
the available commands and
what they can do for us,
a final warning is necessary:
the command and the left
parenthesis must be together:
.sp
	) editf fn
.sp
is invalid and will give an error message.
.SH
Available Commands
.PP
Most of the \s-2APL\s0 system commands are described here.
A few commands are strongly oriented toward
\s-2APL\s0 system development and not toward general
use; they are not included.
Also omitted are commands which
are being developed but
do not operate properly.
.IP ")clear" 14
This command is used to completely
initialize an \s-2APL\s0
workspace.
As we saw
before,
usually when \s-2APL\s0 is
started,
it will print:
"clear ws".
This means that
no internal variables
or functions are defined.
Sometimes,
it is desirable to completely
erase everything,
and this command serves that purpose.
To let you know that everything
has been erased,
\s-2APL\s0 will output the message
"clear ws".
.IP ")erase list" 14
This command is handy when it
is desirable to get rid of parts
of a workspace without using
")clear" to eliminate all of it.
A list of function and variable
names
(separated by spaces or tabs)
may be specified.
The named functions and variables
will be deleted from the internal
workspace.
The remainder of the workspace will
not be affected.
.IP ")save xxx" 14
As we discussed previously,
while \s-2APL\s0 is running it
keeps all of the information
about the current session in
an internal "workspace".
This command causes \s-2APL\s0 to write
its internal workspace into a
Unix file.
This allows the current session
to be resumed at a later time.
If the save is successful,
\s-2APL\s0 will output the date and time.
.IP ")vsave xxx" 14
This command allows parts of
a workspace to be saved.
The functions and variables
which are specified will be
saved in a Unix file in the same
format as produced by ")save".
\s-2APL\s0 will prompt for the
names of the functions and variables
to be saved.
When you have entered the
last name,
type a blank line to end the save
operation.
The workspace you have created
with ")vsave" may be loaded with
")load" at some later time.
")vsave" does not affect
variables in the internal workspace.
.IP ")load xxx" 14
This command is used to tell
\s-2APL\s0 to load the Unix file
"xxx" into \s-2APL\s0 as a workspace.
After the file is loaded,
\s-2APL\s0's internal workspace will
be the save as it was when the
workspace file was saved with ")save",
and that \s-2APL\s0 session may be resumed.
If the workspace file
exists and is successfully
loaded,
\s-2APL\s0 will print the time
and date that the workspace
was last saved.
.IP ")copy xxx" 14
This command instructs \s-2APL\s0
to locate the Unix file "xxx"
and load it into its internal
workspace, similar to the
")load" command.
The difference between
")load" and ")copy"
is that ")load" will replace
the current internal workspace
with the one being read in,
while ")copy" merges the
current internal workspace with
the one being read in.
Functions and variables which
are loaded from the file
take precedence over functions
and variables of the same name
existing already in the internal
workspace.
.IP ")digits n" 14
This command is used to specify
to \s-2APL\s0 how many digits
are to be displayed when
a number is printed in
floating-point
or exponential format.
By default,
\s-2APL\s0 will print 9 digits.
You may specify any number
between 1 and 19 for the
number of digits (n).
\s-2APL\s0 will answer with
the number of digits it
was using.
.IP ")origin n" 14
This command is used to change
the "origin".
By default, the origin is 1.
The "origin" is the
starting index for arrays.
For example,
if the origin is 0,
then the first element of
a 3-element array A is
A[0].
If the origin is 5,
the first element will be
A[5].
Although standard \s-2APL\s0 permits
only 0 or 1 for the origin,
Unix \s-2APL\s0 allows any
integer value.
\s-2APL\s0 will answer with
the origin it was using.
.IP ")width n" 14
This command tells \s-2APL\s0 how many
characters wide your terminal screen is.
This way, you can control
how many characters are printed
per line.
The default value is 72.
\s-2APL\s0 answers this command with
the previous terminal width.
.IP ")off" 14
This command does the same
thing that a control-D
does --
it terminates the \s-2APL\s0 session.
The Unix command program
will come back and print its
prompt ("% ").
.IP ")continue" 14
This is a very powerful system command.
")continue" is a combination
of the ")save" and ")off" commands.
First,
the internal workspace is saved in
a file named "continue",
and then \s-2APL\s0 is terminated.
This command will be discussed in
more detail later.
.IP ")fns" 14
This command causes \s-2APL\s0
to list the names of all
of the functions which are
defined in its internal workspace.
.IP ")vars" 14
This command causes \s-2APL\s0
to list the names of all
of the variables which are
defined in its internal workspace.
.IP ")lib" 14
This command is similar to the
"ls" command in Unix.
It causes \s-2APL\s0 to list the names
of all of the Unix files in
the current directory.
.IP ")editf xxx" 14
This command is used to
create and edit functions.
If the function named "xxx"
exists in the workspace,
\s-2APL\s0 will write it into a
temporary Unix file
and then will execute the
Unix editor
"ed"
to edit that function.
When you have finished
editing the file,
and you exit the editor,
\s-2APL\s0 will come back
and will read the function
in from the temporary file.
.IP ")edit xxx" 14
This command is similar to
")editf" except that "xxx"
is a Unix filename.
\s-2APL\s0 will execute the editor
to edit the Unix file named
"xxx",
and when the editing is complete,
\s-2APL\s0 will read that file into the workspace.
The difference between ")edit" and ")editf"
is that ")editf" essentially edits
functions directly from the workspace,
while ")edit" gets the functions from
the Unix directory.
.IP ")read xxx" 14
At times it is desirable
to read a function which
is stored in an ASCII file
into the internal workspace.
The ")read" command causes
\s-2APL\s0 to read the Unix file
named "xxx" into the workspace
as a function.
Note that ")read" and ")load"
are
.I not
the same thing.
")load" reads a complete new workspace
into \s-2APL\s0 from a workspace-format file,
while ")read" reads a function
from an ASCII file
and adds it to the current workspace.
.IP ")write xxx" 14
This command is the complement of
")read".  It takes the function "xxx"
from the current workspace and
writes it to an ASCII file named "xxx".
This is useful for writing functions
which will be ")read" later into other
workspaces or which will be printed
on the line-printer.
Note ")write" and ")vsave" are not the
same thing,
for ")write" is used to write a
function into an ASCII file
and ")vsave" saves a selected subset
of the internal workspace in a
workspace-format file.
.IP ")drop list" 14
This command performs the same
function as "rm" in Unix.
The names of the files to be
deleted should be separated by
spaces or tabs.
The files may be
\s-2APL\s0 workspaces,
ASCII files,
or any other type of Unix file.
.IP ")script xxx" 14
This command places \s-2APL\s0
into a "protocol" mode.
Following this command,
\s-2APL\s0 will copy all input
from the terminal and
output to the terminal
to the file "xxx".
Thus,
"xxx" is a complete
transcript of the \s-2APL\s0 session.
To turn off the script file,
type ")script off".
The protocol file which is
produced will contain all of
the output produced by \s-2APL\s0 itself,
but will,
unfortunately,
not contain any output
produced by another
process
(such as the editor).
.IP ")trace" 14
This command
turns on \s-2APL\s0's internal "trace" mode.
When tracing is turned on,
\s-2APL\s0 will report the function name
and line number of each
line in every function executed.
Thus,
the flow of execution from the
start to the end of a run can be
followed.
.IP ")untrace" 14
This command turns off "trace" mode.
.IP ")si" 14
This command is useful when something
goes wrong.
When an error occurs,
the function that was executing is
"suspended".
The ")si" command causes \s-2APL\s0 to
print a traceback from the
suspended function.
This command will be discussed in more
detail later.
.IP ")reset" 14
This command is used to reset the
state indicator.
All suspended functions are reset.
This command will be discussed in more
detail later.
.IP ")shell" 14
This command is useful when it is desired
to return to Unix temporarily without
having to save the current internal workspace,
exit \s-2APL\s0,
and later re-enter \s-2APL\s0 and reload the workspace.
")shell" causes \s-2APL\s0 to execute
the Unix "shell" program
(command interpreter).
When you have finished with the
shell,
logout and you will be returned to \s-2APL\s0.
.IP ")list xxxx" 14
This command causes \s-2APL\s0 to print out
the function named "xxxx".
This is very handy for looking
at a function without having to
use the editor --
especially when an error has
occurred and you want to look at
a function without disturbing the
state indicator.
The state indicator and the use
of this command will be discussed
in more detail later.
