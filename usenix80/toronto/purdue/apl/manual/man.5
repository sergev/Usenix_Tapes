.SH
Editing Functions
.PP
Editing functions is
relatively straightforward,
except as noted above
that suspended functions
cannot be editing without
first typing ")reset".
However,
there is one other problem
which presents itself
that should be discussed.
.PP
When using ")editf",
\s-2APL\s0 writes the function
to be edited out of
its internal workspace
into a temporary
ASCII file,
and then it calls the
Unix editor to edit that file.
When editing is complete,
\s-2APL\s0 reads the file back in.
The problem that occasionally
occurs is that \s-2APL\s0 examines the
first line of the file in order
to determine what the name of the
function is.
If a syntax error is detected
in line 0 of the file,
\s-2APL\s0 will
.I not
read it in!
As a result,
the function no longer
is defined
in the workspace,
and the only other copy
exists in a temporary file.
Thus,
in order to save you a lot
of work retyping,
\s-2APL\s0 will automatically
copy the temporary file
into a file called "apl_badfn"
when it detects a syntax error
while reading.
.PP
An example is probably called for at
this point
to clear the mud somewhat.
The function "xyz"
is defined in the workspace,
and the following occurs:
.DS L
	)editf xyz
XED V5.45	[ 10/17 21:37 ]
*** Use at your own risk ***
5 lines
>0
[ 0 ]	xyz
>c
[ 0 ]	xyz+1
[ 1 ]	.
>w
>q
xyz+1
   ^
syntax error
Function saved in apl_badfn
.DE
As the error message indicates,
"xyz+1" is illegal in the function
header,
so the bad function was copied
to the file "apl_badfn".
To get it back,
you could say:
.DS L
	)editf xyz
	[new fn]
XED V5.45	[ 10/17 21:37 ]
*** Use at your own risk ***
0 lines
>r apl_badfn
>0c
[ 0 ]   xyz
>w
>q
.DE
and the problem would be corrected.
.PP
If you use ")edit" instead of
")editf",
\s-2APL\s0 will not worry about saving
the function in "apl_badfn"
because you were editing from a
Unix file rather than
from the internal workspace.
