
NAME
trino -- extract a file from a raw device

SYNOPSIS
# /etc/trino [[-]<device>] <number>

DESCRIPTION
"trino" is analogous to the "rino" program except that  it  works
on  raw  devices which are serially accessed.  Thus, it lends it-
self primarily to use with magnetic backup tapes.

There is one required parameter to "trino" -- the inode number of
the  file  to  be retrieved.  Optionally, the device on which the
filesystem resides may be specified (the default is /dev/rmt0).

"trino" reads the super-block to determine if the inode value  is
legal.  If so, it finds the inode.  If the inode is allocated and
is not a special file or directory it  may  be  either  small  or
large.  Huge files (more than one level of indirection) cannot be
recovered.  Small files can be processed in one pass of the tape,
while large files usually (but not always) take two.

The resulting file is placed in the current  directory  with  the
owner  and  mode (except sticky-bit, and suid bit) of the file on
the raw device (naturally, the owner can be set correctly only if
run  by  "root").   The name of the disc file which is created is
the ascii string for the specified inode.  Thus,
# trino 6
would produce a filename "6".

"trino" does not require super-user permission, only read permis-
sion  on  the  device  to be accessed and write permission in the
current directory.

If the device name begins with a minus sign ("-"),  "trino"  will
skip  one  file  on  that device before it starts reading what it
considers to be  the  filesystem.   Thus,  dump  tapes  with  the
"ncheck" file as the first record can be used with "trino" by us-
ing the command:
# trino -/dev/rmt0 <inode>
   or
# trino - <inode>

FILES
/dev/rmt0 -- magnetic tape
##### (ascii number) -- resultant output

DIAGNOSTICS
There are several informative messages which  are  printed  while
the  file is being trinoed.  Fatal errors are printed in the for-
mat:
ABORT: message
and cause immediate termination.

BUGS
"trino" really should truncate the last block of the file to  the
actual  length for the file.  Ascii files can be restored by sim-
ply rewriting them with the editor.  Binary files with extra zero
bytes on the end are more of a problem.
