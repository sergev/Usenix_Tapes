digcnt(number,base)
	feed number and base, returns the number of digets required
	to print the number.

bytcnt(opcode)
	feed opcode for 6800, returns the number of bytes in the
	instruction.

basesp(#,string,base)
	print # into string with ascii charactors in base 'base'

basin(string,base)
	reads string and returns number that is value of string
	base 'base'

basout(#,base)
	prints # on terminal in base 'base'

jnum(#,base,#char,justification)
	print # on terminal in base 'base' and prints #char charactors
	with justtification  1 =  left        0 =  right

sjnum(#,string,base,#char,justification)
	prints '#' into string with '#char' ascii charactors in base 
	'base' and prints charactors with 'justification' 1=left	0=right

test(#)
	diagnostic for printing # on the terminal.  Used for
	debugging things.  Prints  "  Test Point # \n  "  .
islet(char)
	returns a 0 if numeric
	returns a 1 if alpha
	returns a 2 if any printing but space
	returns a 3 else

island(char)
	returns a 1 if alpha-numeric
	returns a 0 else

llu(string,keylist)
	compares keylist (who has structure of **argv types)
	to string and returns keylist index if hit
	and a -1 if miss

comstr(string1,string2)
	if string1 equals string2 reuturns a 1
	else returns a 0

cats(string1,string2)
	concatinates "string1" with "string2" and leaves the result
	int "string1".  "string2" is not modified.

cpystr(string1,string2)
	Copys "string2" into "string1".  String2 is not  modified.

scanin(string)
	takes charactors from the standard input device and
	puts alphanumerics into 'string' .  Value of scanin
	on return is:
		-1 if string terminated with a \n
		-2 if string terminated with a \0
		'char' that terminated the string else.
	Note that charactors before the string are lost.

seedin(string,seed)
	similar to scanin except the first charactor of 'string'
	is 'seed'.  Using seedin allows programs to prossess delimiters
	before strings and after.  See "Funn with Free Formatt Fooling
	& dynamic data spooling" in the
	Aug, 1982 byte for more details.

dumpt.c(argv)
	dumps '**argv' list with index onto terminal.
	does not dump the zero element.

cement(item,table)
	puts string 'item' at the end of the 'table' where
	table is an **argv structured table.
	See also 'mixerup', needed for initalization.

mixerup(table,list)
	initalizes the first array in a **argv to '\0'.  This
	is used to make indexing happy.  One must 'mixerup' before
	'cement'ing into a symbol table.  'Table' is *argv, and
	'list' is the **argv or argv[table][list].

evol(p,table,vtable)
	evaluates the string pointed to by p (char **p) using
	table to 'llu' variables as nessacery and finds var. values
	in 'Vtable' (int *vtable) and returns the value of the
	expression.  Evaluation is from left to right.  Table is **table

bumpd(charstring,firstmoveto,firstmovefrom,ltable)
	Bumps down the charactor string 'charstring' moving the
	firstmovefrom to the firstmoveto.  0 is the normal return.
	'ltable' is the number of char in the table.

Slide(intstring,firstmoveto,firstmovefrom,ltable)
	Bumps down the integer string 'intstring' starting with the
	'firstmovefrom' and moving down into the 'firstmoveto'.
	0 is the normal return.  'ltable' is the lenght of the table.

mexp(body,arglist)
	expands macros using *body as the body and **arglist
	as the repacment for &x where x is one digit.  Spits
	out lines, should be played with for a specific aplication.

ordnp(n)
	prints the ordinal for n (i.e. 1st, 2nd. 3rd, 4th).
	width is allways 5 charactors wide.  Uses jnum.

eatspace(p)
	char **p   string pointed to by **p is eaten until non
	space (not space or tab) is found.  *p is modified.

evolexp(s,table,vtable)
	like evol except returns a number.  It is a finised product
	of evol.  Knows about the unarys - ~ and ! .

lfs(string,target)
	*string,*target.  Looks for the string in the targer.
	returns a 1 if found and a zero if not found.  '\n'
	and '\0' terminat a string.

lfw(string,target)
	*string,*target.  Looks for the string in target, where
	string must be a word serperated by a SPACE. (not tabs).
	Returns the charactor position at which the string was found.

sscan(string,target)
	*string, **target.  Looks for first alfa-numeric string in
	target and returns it in 'string'.  *target is modified.
	like scanin but reads from string instead of the terminal.

chisel(index,table)
	Removes the 'index'ed entry from the **table.  The
	table is moved around to conserve storage.  Used in
	conjunction with slide and bumpd can be used to delite
	anything from any format table.

alsort(table,intlist)
	Sorts (in place) the **argv type 'table', and also moves the
	integer string 'intlist' so that elements in 'intlist' keep
	alligned with elements in 'table'.  This can be used, for
	example, to sort a symbol table.  If there are multiple integer
	list to sort, make a new list that has a count in it and use it
	to make a map for the other integer list.

mist(arrow,target)
	Returns  a 1 if the string 'arrow' could hit the 'target' if
	a single charactor was mis-typed (by one key-cap).

