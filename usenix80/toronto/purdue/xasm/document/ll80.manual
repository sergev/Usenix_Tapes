	'll80' is the linking loader for the 're80' assembler.  It will
read in a main program, and get any of the external programs it
referances, and any externals referanced in them, etc, etc,
iteratively until all the externals are resolved.  Note that each
routine is loaded once regardless of how much it is called.
Impure routines recursevly called could bungle things a might.
Format:
	ll80 filename [reloc addr] [library dir.]

where 'filename' is the file name of the main program (stored as
		'filename.rel')

	'reloc addr' is the address the relocated moduale is to start
	(default is 100 hex).  This number is in hex.

	'library dir.'  is a pointer to a directory in which ll68 will
	look for every external file (except 'filename', the main
	program).  Default directory is the current directory.
	Note that the last '/' is missing from the path name.

Example:	x/ll80 myprog  1000 /usr2/wa1yyn/68lib

Output file is 'filename.out' in absolute 8080 format. (':0' format)

	'll80' also gives list of where each routine is in memory,
	and where the entry point for each routine is.  Note that
	the  options must be given in the order listed.

To use: type % x/ll80 ...(as above)

Rom moduales:
	To make a rom moduale for ll80, use 'rommod80'.  This will
	make a moduale that generates no code, and puts the address
	of the rom routine in whenever it was referanced in the program.

Relocatable 8080 format:

:0name		name of modual

:2BCRRRRAAAADD[DD...]CK		Relocatable code
	BC = bytecount
	RRRR = 16 bit relocation mask keyed to high-order bit
	AAAA = relative pc
	DD = data bytes
	CK = checksum

:3name		forces the modual 'name' to be loaded.  Used to get a
		modual into memory with mutiple entry points, as
		in an IO modual.

:4AAAAname	Defines a global symbol supplied by the modual to the
		rest of the moduals.

:5AAAA		Rom modual entry point. Can Not be used with record
		types S2,S6,S7, or S8.

:6AAAA		entry point- reltive entry point for the modual

:7AAAAname	External referance modual.  This record gives the name
		of a modual whose address is needed by this modual,
		and the relative adress within the modual where the ex-
		ternals' adress is needed.  Note that the reltive adress
		(the AAAA field) must be an every-increaseing entity.
		( this avoids long searches in the linking loader).

:8LLLL		Lenght of the modual in bytes (by giveing the lenght,
		the linking loader is spared looking at the :2 records,
		and storage allocation/computation is speed up.)

:9		End of moduale

Any trouble, mail me.  tnx.  Pete
