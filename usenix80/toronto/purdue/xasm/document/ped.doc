                                                                        .





                       The Picture Editor

                          C. Strickland
                       Peter D. Hallenbeck

                             2/15/79




        'ped' is a program for editing pictures, much  like  'ed'
is  a  program  for editing text.  The program used the Tektronix
4014 Graphics Terminal and the HP  2004  plotter.   Pictures  are
made by postioning symbols, strings of characters, and characters
on the 4014 screen and using 'wires' to  connect  them  together.
There are two major parts to the program: an editor much like the
text editor, and the graphics prompting/plotting routines.  There
are  also a number of drafting tools avaliable, such as straight-
edges, rulers and grid paper.

The Editor:


        The editor half of 'ped'  is  much  like  the  UNIX  text
editor.   One  may  read in files, write out the current picture,
change elements (similar to changing a  line  of  text)  and  the
like.   A  major  differance between the 'ped' editor and 'ed' is
the 'ped'  is  a  line-oriented  editor,  and  does  not  support
character-changes  in  a  line  (which  makes  sense since we are
editing pictures with lines  not  text  with  characters).   Each
piece  of  a picture takes one "line".  It is convenient to think
of this "line" as an element of the picture from a notation point
of  view.   In  a text editor, one enters a line by typing it in.
In 'ped', one enters  the  element  through  the  graphics  input
section  of  the  program.  This part of the program has commands
different from the editor, and works interactively with  you   to
get  an  element in the correct place.  The elements have numbers
(like line numbers) and can be deleted or changed by the  editor.
The 'p' command plots out the current element.  A 'pp' prints out
the entire picture.  The command '4,14p' plots out elements  four
through  fourteen  (much  as  a text editor would print out lines
four through fourteen).  Hopefully by the now the analogy between
  'ed' and 'ped'  (and  more  importantly  its'  limitations)  is
clear.

        The editor and its commands are as follows:
        [#]a            Append after
        [#]i            Insert before
        [#] or [#,#] c  Change the element(s)
        [#] or [#,#] p  Plot out the line(s)
        [#] or [#,#] d  Delete the line(s)

                              - 1 -

                    PED - the Picture EDitor



                        Note: the 'p' command may be included
                        to see the next line, i.e. '4dp' .
        [#] or [#,#] l  'L'ook at the line in ascii format
                        (more on this later)
        [#] r filename  Read in the file (after line # if
                        specifed, else append to end of picture
        [#,#] w filename  Write out the file or a part of it
        [#,#]m#         Move command
        [#,#]t# Transfer (copy) command

        The  character  '.'  is  the  current  element  and   the
character '$' is the end of the file.

The Graphics Input Mode

        After one gets into input mode of the editor (through  an
'a'  command  or a 'c' command), the graphics input commands must
be used.  The commands are one-letter commands, possibly followed
by  one-digit  of  rotation  and/or  one-digit  of  size,and  the
argument for the command.  These are terminated by  the  'return'
key  on  the  terminal.   Then,  depending  on  the  command, one
positions the symbol or element to  be  drawn  using  either  the
joystick  or thumbwheels and, when the element is in place, draws
it by again hitting 'return'.  There are currently  two  ways  to
know  the position of the element.  One way is to see the element
move around on the screen as the joystick moves, place  it  where
it  is wanted, and then, what you see is what you get.  The other
is to use the crosshairs from the  thumbwheels  to  get  the  co-
ordinate  of  the  element.   There  is no choice in which device
(joystick or thumbwheels) you use.  It depends on  the  commands.
A  certain  amount  of fooling around goes on behind your back to
place all things drawn on a  software-created  grid.   This  grid
helps  wires and sybols connect to each other, but also fools you
sometimes by playing with where you would like something  to  be.
With  experiance,  you'll  soon learn to outguess the griding and
use it to your advantage.

        There are fize basic types of elements:  Boxes,  Strings,
Characters,  Wires,  and 'Z'arrallagrams (really parralelagrams).
Boxes and strings use the joystick and show you the  elements  on
the  screen  as  you move the joystick.  Characters and wires use
the crosshairs.  The commands work as follows:

Wires

        To place a 'wire' (really any arbritrary line)  into  the
picture,  a  simple 'w' (return) is all that is needed.  Then use
the crosshairs to postion in the first  point,  hit  'return'  to
enter  it,  use the crosshairs to position the terminating point,
and hit 'return' to enter the wire.  At this  point,  the  editor
part  draws  the  line  and  prompts you for the next element (by
typing the element number).   To  draw  a  number  of  continuous
touching  wires, use ' ' (space) to enter all but the last point.

                              - 2 -

                    PED - the Picture EDitor



Each segment of a multi-segmented line is entered as  a  separate
segment.   To  delete the line, one must delete all the segments.
The 'dp' command is useful, as a segment can be deleted  and  the
next segment will (momentarily) flash as it is re-drawn.

 'M'ud dots
        When two wires that cross are to be conected, use  a  mud
dot.   Type 'm' (return) and position the crosshairs at the place
where the dot is to go.

 'Z'arralagrams

        To make a box of any size  on  the  screen,  type  a  'z'
(return).  Use the crosshairs as in the case of the wire to enter
first the lower left corner of the box, and then the upper right.
The  box  is one symbol, and all four lines in it will be deleted
with the single command line. (the command does not break the box
down into four wire commands)

Characters

        To  place  a  character  (of  fixed  size  '1'  (size  is
described  later))  at a location on the screen, the command 'cX'
(return) is  typed.   The  'X'  is  the  character  of  interest.
Position the crosshairs so that they are at the lower left of the
character.  Looking at the cursor on the terminal  gives  a  good
indication of the size of the characters.

Strings

        To place a string of characters on the picture, (such  as
a  chip  number),  the  's' command is used.  An option character
size immediately follows the 's'.  Valid sizes  are  '0'  through
'4', with four being the largest.  The default size of the string
is '1', which is the most reasonable size for  most  uses.   Size
'0'  doesn't  look  any different from size '1' on the Tektronix,
but on the HP plotter,  it  is  half  the  size  of  a  size  '1'
character.   Note  also  that if you want to have a number as the
first digit of the string, the character size  is  needed  first.
Thusly,    the    command    for    the    string   '74LS00'   is
's174LS00(return)'.  After typing in the command, the string will
appear  on the screen.  Move it around with the joystick until it
is where you want it, and then hit return to place it there.  The
string  is  a single element, and is not translated into a series
of 'c' commands.  A certain degree of skill must  be  aquired  to
get  the  string  to end up where you want it due to the software
gridding.

Boxes

        The 'b'ox command is the most complicated on to use.  Its
format is as follows:
        b[rotation][size]boxname

                              - 3 -

                    PED - the Picture EDitor



        The rotation is optional.  Valid rotates are '0'  -  '7'.
position  (which  must  be  determined by the enclosed vocabulary
sheet).  A rotation of '0' is no rotion and is the default.  Most
elements  have  x-axis  symmetry in their "home" positions, but a
few do not and need the '4'-'7' to get  all  possible  rotations.
The  size  field  can  go  from '0' to '9'.  If the size field is
used, the rotation field must be specified also.  A size  of  '0'
is  one  half the "standard" size.  A size of '1' is the standard
size and is also the default.  Sizes '2' through '9' magnify  the
standard  size by the number.  The 'boxname' is as defined on the
vocabulary sheet.  The command is terminated by a 'return'.

Recovering from errors

        There are a number  of  facilities  to  recover  from  an
error.  They are given here in a somewhat random order.

        To recover from entering the wrong  boxname  or  size  or
whatever, a 'n(return)' may be typed, and the element command can
be re-typed.  After drawing an element, one way to recover is  to
do  a  '.(return)'  to  get back into the editor,  a 'c' (change)
command, and try it again.  This is usualy done when  the  symbol
did  not end up placed exactly where you had in mind, which often
occurs do to the incredible joystick drift.

        To recover from a bad point in a line, at  any  point  an
'j'  may  be  hit (if the crosshairs are up) and a target will be
drawn.  Move the crosshairs in the direction of desired  movement
in  either  x  or y (no diagonals, etc) and punch the ' ' (space)
bar.  You will see a little dot in the middle  of  the  crosshair
move  in  the  desired direction, ultimatly drawing a small line.
When you have moved as much as you wish , hit 'return'.  Typing a
'v'  at  any  point  (where you could type a space) will show you
where you are.   This  sequence  is  called  the  "justification"
prosess  and is used to correct where an element was entered when
it ended up in the wrong place.  Each time you hit the space bar,
the point you are ajusting moves by one Tekpoint (about the width
of a line).  A grid point is four Tekpoints, so hit the space bar
four  times  (wait for the crosshairs each time) to move one grid
point.

        The 'j' command can be typed at any time you in  graphics
input  mode  and  align through the above procedure  the last co-
ordinate typed in.  To align a point after the whole  picture  is
type  in,  do an 'a' (append) command to the editor (append after
the line of interest) type 'J' and justify the point.  If you are
justifying a line, you can justify only the last point. (sorry).

Plotting on the HP

        As soon as the picture is ready to plot on  the  HP,  the
command  'h(return)'  is  typed  in  the  editor.   Note that the
plotter must be in the correct mode, namely no 'login' on it, and

                              - 4 -

                    PED - the Picture EDitor



the  following raw, -echo, odd, even, -tabs, .  This will soon be
done with a system command, but currently requires

        The program lives  (currently)  in  /v/wa1yyn/c/plot/ped.
If  you  anticipate much work with it, copy ped off into your own
directory to avoid all your pictures from becoming invalid if the
vocabulay   and   symbol  sizes  should  change.   Things  should
stabalize by April of 1979 or so, at which  point  they  will  be
(hopefully) installed in the system.

The Ruler command

        The ruler command puts up temporary  tick  marks  on  the
screen.   The  basic format is 'r#', where the # is a number that
says how many tick marks you want.  To position the  tick  marks,
the   first   and  second  tick  marks  are  postioned  with  the
crosshairs.   (useing  'return'  to  terminate  of  course!)  The
remaining  number  of  tick  marks  are plotted out with the same
spacing and direction.

        The "line" ruler is a variant form of the  ruler,  as  it
draws  lines between the tick marks.  The typical use of the line
ruler is do simple draw a line.  Syntax is 'rl#', where # is  the
number of tick marks.  'rl2' is used to just draw a line.

        The "interpolating" ruler is used when one  has  a  fixed
area  in  which  to put a number of lines (or objects) with equal
spaceing.  Syntax is 'ri#' where # is the number of tick marks to
put  between the two entered points.  For example:  If you wanted
to have eight data lines comeing out of a  box,  you  would  type
'ri10' and "crosshair in" the endpoints of the box.

        The "real" ruler  measures  a  specific  number  of  grid
points
 (positive only -sorry) from a given crosshair-entered  referance
point.   Syntax  is 'rrxxx,yyy' where xxx and yyy are the "delta"
grid points to go  from  the  entered  referance  point.   It  is
sujested that you pick a referance point at the lower left of all
your drawing.  Failing that, one could use a ruler to measure  an
equal  negative distance from the 'rr' point though the referance
to the desired point.


The Grid command

        The command 'g' puts up the crosshairs.  Position and hit
return,  and  a  grid  with  spacing  between points equal to the
smallest resolution abtainable with the crosshairs or joystick.
Ascii representations of sybols and lines

        The 'l' command  in  the  editor  prints  out  the  ascii
representation   of   the  line.   This  is  typically  a  single
charactor, some base-ten absolute co-ordinates, and perhaps a box

                              - 5 -

                    PED - the Picture EDitor



name,  character,  or  a string.  A saved plot file can be edited
with the normal text editor to change any part of this line if  a
user  feels  it  would  be quicker to change things that way than
with 'ped'.  Locating  or  searching  for  strings  or  parts  of
pictures  may  sometimes  best be done using the 'll' command and
looking for the section  with  the  error  in  it,  then  single-
stepping through the picture until the exact line with the symbol
is found.
Searching

        A  primitive  search   command   (with   an   interactive
proceedure  to  specify  the element being searched for) exist.If
you are in graphics input mode, (and only in graphics input mode)
instead  of  a  command  type '/[command]'.  and gets the command
after the '/' (i.e. if you typed a '/c5' it will go and  ask  you
to  postion  a  charactor  '5')  After  terminating  the  command
(hitting the cross hairs in) it will plot the  command.   If  you
are lucky, it will over-plot or overstike the picture element you
are looking for.  If it does, just  type  'return'  and  it  will
search   for  that  command.   If  it  is  not  correct,  type  a
'n(return)' and enter another command to search for, postion  it,
and  if  it  is ok hit return.  If the command is found, the line
number is printed and you are returned to command input mode.  If
you  wish to take action on that line, you must exit command mode
('.(return)') and then do a '[line #]c(return)'.  This proceedure
may  sound  complex,  but  is  is  really easy to do and is quite
natural at the time.  A little personal tutoring from someone  is
better than all of the above words.

        Note that the 'j' and '/' (search) commands will soon  be
avaible at the editor level of 'ped'.























                              - 6 -

