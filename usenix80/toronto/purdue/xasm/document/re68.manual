Relocatable 6800 assembler manual.

Theory:
	The relocating assembler produces object files that
	can be placed anywhere in memory with minor modification.
	The object files have all the information in them for
	relcation to a specific area of memory by the linking loader,
	called 'll68'.  Also, the moduales may refer to each other.
	This allows a library of subroutines that can be pointed
	to during relocation by a main program, linked into one
	program, and placed in a absolute address in memory.
	First off, be familiar with the 'mas68' manual.

	Files produced are:
	filename.rel	relocatable object moduale, YYN standard form.
	filename.lst	listing of program.

	Note: the file produced by the linker is called
	'filename.out' and is in absolut format. More on that later

	  're68' used all the pysdo-ops of mas68, with some added
	to help relocatability.  The new pysdo-ops are:

    New pseudo ops:
	'external	prog1,prog2,...progn'
	Declares various progams as being external, so that they
	can be referanced within this moduale.

	'entry	nnn'
	Declares the entry point of the moduale to be at nn
	in the relative program counter.  Default entry point
	is at locatin zero (relative).

	'global	  sym1,sym2,...    '
	Declares various symbols as being global.  Their value is passed
	to the linker and these symbols inside of this modual can be
	referanced by other moduals.

	'loadmod	mod1,mod2,....  '
	Forces the linker to load the moduals (mod1,mod2, etc) whether
	they are referanced or not.  This is usefull for big moduals
	(like I.O. packages) that have mutiple entry points defined as
	globals, where the user can't be sure that the correct global
	will be referanced to force the linker to load the modual.

Absolute symbol conventions:

	Since it is nessecary to referance real, fixed addresses
	in a program, and it is desirable to use a mnemonic for
	the fixed address, a feature exist to avoid the assmbleer
	relocating that address.  Whenever a lable begins with a
	'_' (underscore), it is NOT relocated.


Sample Program:


*	sample relocatable moduale
	external	output,input
	global	data
	entry	go
* this program gets input and echos it to ouput putting the charactor
* in a varable.
data	db	0
go	jsr	input
	staa	data
	jsr	output
	staa	_absadd
	rts
_absadd	equ	1234h
	end


Linking and relocating moduales:
	See 'll68.manual'.

To use:  type:  % x/re68 filename

A version of 're68' which does NOT put the symbol table in the
'  .rel' file is called 're68ns' .

	Any trouble, contact me.  Tnx  Pete
