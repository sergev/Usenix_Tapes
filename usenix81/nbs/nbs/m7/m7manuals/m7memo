From: G. Skillman

Date: August 19, 1980

	I have finished implementing everything I'm going to for M7.
The following are the features I implemented by Matt's request:

1. Tags can be nested.
2. The number of tags per macro can be up to 99.
3. The "zero or more closure" has been implemented as "*-"
4. The special character classes have been added as follows:
	'?1' matches any character.
	'?2' matches any alpha-numeric character.
	'?3' matches any alphabetic character.
	'?4' matches any upper case letter.
	'?5' matches any lower case letter.
	'?6' matches any digit.
5. Stack and counter calls may appear anywhere in the macro definition.
   No incrementation may appear in or before the pattern! This is
   because M7 will perform the incrementation each time it attempts
   to match the pattern. In fact, M7 will execute any call found
   in the pattern whenever it comes across that call in an attempt to
   match the pattern. M7 executes calls found before the pattern each
   time it retrieves the macro from the file. For these reasons
   it is also recommended that no calls be placed in or before the pattern
   unless absolutely necessary.


The following features were also suggested but not implemented:

1. The 'f' option which allows the user to reuse a preprocessed macro file
   requires the user to specify the number of macros that are in the file.
   An unsuccessful attempt was made to liberate the user of this burden.
   The routine m7 which was altered and later abandoned can be found in
   the file "/642/skillman/m7/m7backup/itried".

   Currently the f option works in this fashion:
	NEW_M7.xqt -f "<preprocessed file>" "<macro count>"

2. The 'f' option also does not allow the user to take advantage of the '<'
   option. Any macro with that option in an 'f' file will be treated as
   though it had '=' as the replacement symbol instead.

3. A construction, such as (<pattern text>)* that would match any number
   of occurences of a sub pattern. This was not implemented because it is
   already possible by using stacks in this manner:

	'{<pattern text>}&(1,a)&(a)*-'

   however, it is only possible to match one or more occurrences in this 
   fashion.

4. A new character class construction that would match any of the named
   pairs of characters:

	[do|at|in|to]

   would match either 'do', 'at', 'in' or 'to.
   This feature might not be too hard to accomplish, but I didn't have
   the time. Another, perhaps easier, implementation of it would be:
	
	[6MozartBrahmsMahlerHolst  JSBach]

   to match any of a set of n characters.

5. Branching replacement:

	If[=>]then[EG]

   would replace the character '=' with 'E', but the character '>' with 'G'.

6. A fifth stack call construction which can be used to test what's on a stack:

	'&(a=case 1=)'<'stack a has "case 1" so do this macro";

   This construction would not require the input to match the contents of the
   stack.


In a minute there is time
   for decisions and revisions
   which a minute will reverse.

           - T. S. Elliott
