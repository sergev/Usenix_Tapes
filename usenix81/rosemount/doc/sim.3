.ds - -
.TH SIM VII 3/27/80
.SH NAME
sim \*- simulation package
.SH SYNOPSIS
.ft B
siminit()
.PP
struct proc {
.br
	char *next ;
.br
	char *procblk ;
.br
	int signal ;
.br
	double runtime ;
.br
	} *sfork() ;
.PP
sexit() ;
.PP
delayf(timef)
.br
double timef ;
.PP
delay(time)
.br
int time ;
.PP
swait(sig)
.br
int sig ;
.PP
ssignal(sig)
.br
int sig ;
.PP
swaited(sig)
.br
int sig ;
.PP
snumber(sig)
.br
int sig ;
.PP
qinit(que)
.br
struct squeue {
.br
	int count ;
.br
	struct proc *first ;
.br
	struct proc *last ;
.br
	} *que ;
.PP
qwait(que)
.br
struct squeue *que ;
.PP
qsignal(que)
.br
struct squeue *que ;
.PP
qwaited(que)
.br
struct squeue *que ;
.br
.ft R
.SH DESCRIPTION
This is a package of discrete event simulation routines.
program that is
executed in a psuedo-parallel fashion.
Execution is sequenced by the simulation
.I time
(which has nothing to do with real-time)
which is kept track of by the simulation package.
.PP
The program causes
.I time
to pass by calling a
.I delay
routine to generate the required delay.
.PP
.I Siminit
initializes the simulation system and sets the time to zero.
.PP
.I Sfork
is similer to the
.I UNIX
system call
.I fork
(II).
It returns twice to the calling routine with 0 for the child and a pointer
to a process table entry for the parent.
.PP
.I Sexit
is the analog to the
.I UNIX
system call
.I exit
(II).
It terminates the child process.
.PP
.I Delayf
and
.I delay
wait until the time specified in the parameter has passed before resuming
the process.
.PP
.I Swait
waits for a call to the appropriate
.I ssignal
routine.
.PP
.I Ssignal
wakes up all processes currently waiting on the signal given by the parameter.
.PP
.I Swaited
returns non-zero if the signal given by the parameter has process(es) waiting
on it.
.PP
.I Snumber
returns the number of processes waiting on the signal.
.PP
.I Qinit
initializes a queue for processes to wait on.
.PP
.I Qwait,
.I qsignal
and
.I qwaited
are analogs to the signal routines above.
The major difference is that
.I qsignal
will start only the oldest of the waiting processes in the queue.
.SH "SEE ALSO"
.I save
(VII),
.I urand
(VII)
.SH BUGS
