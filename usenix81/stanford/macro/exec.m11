
;this is the key to the bob bowering assembler that has been modified for
;unix by brent byer
;symbols for ddt have been added by forrest howard, who also fixed various
;bugs
	.title	mexec	-  assembler exec

	.ident	/01aug5/

	.mcall	(at)always,xmit,putkb,putkbl,putlp,genswt
	always

	.macro	gvnum		;gen version number
	.ascii	/1aug75/
	.endm

	.sbttl		assembly options

;the following macro causes assembly options to be
;printed on the loader map and any implications
;(second argument) to be defined.  options are
;selected by equating them to zero.

	.macro	ldrmap	mne,implies
	.if df	mne
	.list
	.globl	mne
	.nlist
	.irp	x,<implies>
x=	0			;invoke implications
	.endm
	.endc
	.endm	ldrmap


;the following group enables functions

	ldrmap	rsx11d,<dflgtb>		;rsx11d "features"

	ldrmap	debug		;debug version
	ldrmap	pdpv45		;pdp-11/45 instructions
	ldrmap	id.spc		;i- & d-space capability for unix
	ldrmap	dblbuf		;tran'd input

;the following group disables functions

	.iif df	x40&x45,	xfltg=	0

	ldrmap	xbaw		;no bells and whistles
	ldrmap	xswit,xcref	;no switches
	ldrmap	xrel,xedpic	;abs output only
	ldrmap	xmacro,xsml	;all generated code (macro, rept, etc.)
	ldrmap	xsml		;system macros
	ldrmap	x40		;pdp-11/40 features
	ldrmap	x45		;pdp-11/45 features
	ldrmap	xfltg,xedfpt	;floating point evaluation
	ldrmap	xedabs		;ed.abs
	ldrmap	xedama		;ed.ama
	ldrmap	xedpic		;ed.pic
	ldrmap	xedfpt		;ed.fpt
	ldrmap	xedlsb		;ed.lsb
	ldrmap	xedpnc		;ed.pnc
	ldrmap	xedlc		;ed.lc
	ldrmap	xedcdr		;card reader format
	ldrmap	xzerr		;"z" errors
	ldrmap	xlcttm		;no lpt listing format
	ldrmap	xlcseq		;sequence numbers
	ldrmap	xcref,xrun	;cref suppression
	ldrmap	xrun		;no .run emt used
	ldrmap	xtime		;no time & date on header
	.sbttl		globals

;globals defined in assembler

	.globl	srchi
	.globl	prop1,	endp1,	prop2,	endp2
	.globl	bksiz
	.globl	symlp,	symhp
	.globl	setlc,	seted

	.globl	pass

	.globl	putkb,	putkbl,	putlp

	.globl	dnc,	movbyt,	savreg,	xmit0

	.globl	linbuf,	errcnt,	openo,	openc
	.globl	chrpnt,	prosw, absexp

	.globl	xctpas,	xctlin


;globals defined in mcexec

	.globl	pagnum,	linnum,	mactop
	.globl	doscor
	.globl	corinc, inicor, iargv

	.if ndf	xtime
	.globl	dattim
	.endc
	.if ndf	xsml
	.globl	finsml,	inisml,	smlnam, smlfil
	.endc
	.globl	getic,	hdrttl,	putoc,	getsrc
	.globl	io.eof,	io.eoi,	io.tty,	io.err

	.globl	ioftbl,	cnttbl,	buftbl,	ioltbl,	chrtbl
	.globl	exttbl,	bintbl,	lstflg, chntbl
	.globl	$wrsys, $wrbfp, $wrcnt, $brksy, $brkad

	.globl	symovf

	.globl	errrol
errrol=	1
	.mcall	(at)param

	.mcall	$creat, $open, $close, $exit, $read, $write, $break
	.mcall	$seek, $indir, $time, $fork, $wait, $exec

	corinc=	256.		; # of words to get per expansion.


				;init sectors

	entsec	xctprg
	mov	#^pl impure,r0
1$:	clr	(r0)+
	cmp	r0,#^ph implin
	blo	1$

	entsec	xctpas
xctpas:	mov	#^pl imppas,r0
1$:	clr	(r0)+
	cmp	r0,#^ph implin
	blo	1$

	entsec	xctlin
xctlin:	mov	#^pl implin,r0
1$:	clr	(r0)+
	cmp	r0,#^ph implin
	blo	1$

	entsec	xctlix
	return

	entsec	impure
	entsec	imppas
	entsec	implin
	.blkw
	xitsec
	.sbttl	mcioch - i/o channel assignments

.macro	genchn	zchan,zlnk,zbuf,ztype,zext,zlen
	setchn	cmo,	cmo,	cmo,	0,	,80.
	setchn	src,	src,	src,	0,	m11,	132.
	setchn	lst,	lst,	lst,	,	lst,	512.
	setchn	obj,	obj,	obj,	1,	obj,	42.
	.if ndf	xsml
	setchn	sml,	sml,	sml,	0,	sml,	80.
	.endc
	.if ndf xcref
	setchn	crf,	crf,	crf,	,	xrf,	512.
	.endc
.endm	genchn

	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.if nb	<zlen>
	param	zbuf'len,	zlen
	.endc
	.endm

	genchn

	.globl	objlen

tmpcnt=	0
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
zchan'chn=	tmpcnt
	.nlist
	.globl	zchan'chn
tmpcnt=	tmpcnt+2
	.endm

	genchn

maxchn=	tmpcnt			;just to preserve the count
	.macro	serror	number,message
	jsr	r0,serror
	.asciz	\message\
	.even
	.endm	serror

.macro .asclc, str
	.nlist

	.irpc x, ^%str%

	.if ge ''x-101
		.if le ''x-132
			.byte ''x+40
		.iff
			.byte ''x
		.endc
	.iff
	.byte ''x
	.endc

	.endm

	.byte	0

	.list
.endm
	.sbttl	start of program

	.globl	start,	fin


start:				;start of program
	mov	(sp)+,iargc	;store arg. count
	mov	sp,iargv	;store pointer to arg. vector
	clr	(sp)		;clear first arg. pointer (our name)
.if ndf xtime
	mov	#dattim,r2	;set date and time
	$time
	call	.cvtim		;convert to ascii @r2
.endc

	call	<^pl xctprg>	;clean up core
	mov	#ctltbl,r0	;set for master loop
2$:	mov	(r0)+,r1	;fetch next address
	beq	8$		;terminate on null
	mov	r0,-(sp)	;stack pointer
	call	(r1)		;call the routine
	mov	(sp)+,r0	;retrieve pointer
	br	2$		;loop 'till control is
				;taken away
8$:	mov	#objchn,r0
	call	zclose
	mov	#lstchn,r0	;output any remaining listing
	call	zwrite
	.if ndf xcref
	mov	crfpnt,r2
	beq	9$
	mov	#crfchn,r0
	call	zwrite		;dump out any remaining output
	call	zclose		;close cref tmp. file
	mov	#lstchn,r0
	tst	ioftbl+lstchn
	bne	81$
	mov	cnttbl+crfchn,cnttbl+lstchn
				;set up to recycle (i hope)
	inc	lstflg
	call	openo
81$:	mov	#lstchn,r2	;set up name of listing file in linbuf
	call	src.ap
	$exec			;cref will do the rest!!
	crfrun
	crargs

	br	$$exit
	.endc

9$:	tst	lpflag		;spooler requested?
	beq	$$exit		;no, leave
	mov	#lstchn,r0	;yes, close listing channel
	mov	r0,r2		;copy for src.ap
	call	zclose
	call	src.ap		;put name of lst file into linbuf
	$exec			; take it away, lpr!
	lprrun
	lpargs
$$exit:	clr	r0		;leave r0 set corectly
	tst	errcnt
	beq	1$		;no problems
	inc	r0		;return 1
1$:
	$exit			;that's all, folks!

	.if ndf xcref

;	entsec	mixed
	entsec	dpure

crargs:	crfrun
	chntbl+lstchn
	linbuf
	lpflag
	0

	xitsec
	.endc


	entsec	dpure
lpargs:	lprrun
	linbuf
	0

lprrun:	.asclc	/bin/print
	.even

ctltbl:				;table to associate assembler
				;and exec

;		exec	assembler
;		----	---------

	.word	inip0		;output file processing
	.word	inip1,	prop1	;pass one
	.word	finp1,	endp1	;clean up
	.word	inip2,	prop2	;pass 2
	.word	finp2,	endp2
	.word	setdn		;finished, control not returned
	.word	0


	entsec	mixed

argc:	.blkw	1
iargc:	.blkw	1
iargv:	.blkw	1
argv:	.blkw	1
symlp:	<^pl xpcor>
symhp:	<<<^ph xpcor>+63.>&^c63.>-2

	entsec	impure

lstflg:	.blkw	1
crfpnd:	.blkw	1
no.flg:	.blkw	1
lpflag:	.blkw	1

	xitsec
	.sbttl	output file initialization

inip0:				;initialize things
	mov	#cmochn,r0	;set up cmo
	call	zopen
	mov	#1,chntbl+cmochn	;it is file handle #1
	call	inip0z		;set up argc & argv
1$:	dec	argc		;any more arguments?
	blt	9$		;no, return
	mov	argv,r0		;yes, get pointer to next arg.
	mov	(r0)+,r1	;  into r1
	mov	r0,argv		;store back new argv
	tst	r1
	beq	1$		;ignore null pointers (maybe, first one)
	cmpb	(r1)+,#'-	;is switch indicated?
	beq	3$		;yes
	mov	-(r0),srcnam	;no , last name will be prefix
	br	1$
3$:	;here is hack for explicit name switch
	cmpb	(r1),#'n
	bne	33$
	cmpb	1(r1),#'a
	bne	33$
	add	#3,r1		;move past na:
	mov	r1,esrcnam
	br	1$
33$:	mov	#linbuf,r2	;point to dest. for switch
	mov	r2,r3		;make copy
	clr	(r2)+		;zap initially
	mov	r2,chrpnt	;copy pointer here for arg.
4$:	movb	(r1)+,r0	;get char.
	call	mk.up		;make upper case
	ble	55$		;null or :
	movb	r0,(r3)+	;ok, store
	cmp	r3,r2		;max. of 2 chars.
	blo	4$
5$:	movb	(r1)+,r0	;store rest of arg. in linbuf
	call	mk.up		;check it and make upper case
55$:	bge	6$		;neg. indicates :
	mov	#40,r0		;replace with space
6$:	movb	r0,(r2)+
	bne	5$		;continue till null
	mov	linbuf,r0	;restore switch name into r0
7$:	call	prosw		;process the switch
	  bne	1$		;continue if no error
8$:	serror	203,	<bad switch>

9$:	tst	esrcnam		;explicit name???
	beq	19$
	mov	esrcnam,srcnam
19$:	tst	srcnam		;must be at least one filename
	beq	$$exit		;or we are just a no-op.
	return

mk.up:	cmp	r0,#141	;lower-case?
	blt	1$		;no
	cmp	r0,#172
	bgt	2$		;no
	sub	#40,r0		;yes, make upper
1$:	cmp	r0,#':		;is it colon?
	bne	2$		;no
	neg	r0		;yes, cause neg. return
2$:	tst	r0
	return

	entsec	impure
srcnam:	.blkw	1
esrcnam: .blkw	1
	xitsec
	genswt	no,no.set
no.set:	inc	no.flg		;indicate no object output
	return

.if	ne,mk.symbol
	genswt	ns,ns.set

ns.set:	inc	out$ym
	return

	.globl	out$ym
.endc
	genswt	xs,xs.set
xs.set:	call	absexp		;get absolute expr.
	cmp	r0,#20.		;mustn't be greedy
	bgt	1$		;  or else, take the easy way out
	ash	#11.,r0		;this many more k words for symbols
	add	r0,symhp
	mov	symhp,$brkad
	$indir
	$brksy
	bcc	2$
1$:	jmp symovf
2$:	return			;ok

	genswt	ls,ls.set
	genswt	lp,lp.set

lp.set:	inc	lpflag		;note spooler request
ls.set:	inc	lstflg		;note lst file req.
	mov	#lstchn,r2	;set up to add buffer for lstchn
addbuf:	mov	symlp,r0	;get cur. free loc.
	mov	r0,cnttbl(r2)	;that's where our byte count will go
	tst	(r0)+		;now point to our buffer
	mov	r0,buftbl(r2)
	add	ioltbl(r2),r0	;allow for length of buffer
	mov	r0,symlp	;new free loc.
.rem %
	add	#<inicor*2>+63.,r0	;form new prog. brk.
	bic	#63.,r0
	mov	r0,$brkad
	$indir			;get core up to there
	$brksy
	bcc	1$
	jmp	symovf		;use this cop-out
1$:	tst	-(r0)		;point to last legal word
	mov	r0,symhp	;store as such
%
	return

.if ndf xcref
	genswt	cr,cr.set
cr.set:	inc	crfpnd		;note pending cref
	mov	#crfchn,r2	;set up buffer for it
	br	addbuf
.endc
	.sbttl	pass initialization

inip1:			;init for pass 1
	mov	#lstchn,r0
	call	openo
	call	srchi		;init the symbol table & rolls
	br	inip2f		;set source for pass

inip2:				;init for pass 2
	inc	pass
	tst	crfpnd
	beq	inip2f
	call	crfset
inip2f:	call	setlc
	call	seted
inip0z:	mov	iargv,argv	;init count & pointer to args.
	mov	iargc,argc
	return
	.sbttl	end of pass routines

finp1:				;finish of pass
	mov	#srcchn,r0
	call	zclose
	return

finp2:				;end of pass 2
	return


openo:				;open output file
	call	savreg
	mov	r0,r2		;copy r0 (chn. #)
	cmp	r0,#lstchn	;is it list channel?
	bne	1$		;no
	tst	lstflg		;yes, is listing enabled (-ls) ?
	beq	9$		;no, ignore
1$:	cmp	r0,#objchn	;is this object channel?
	bne	11$		;no
	tst	no.flg		;were we told to withhold obj. o/p ?
	bne	9$		;yes, ignore
11$:	call	src.ap		;set up name in linbuf
	mov	#stdprv,$crtmd	;set up standard priveleges (mode)
	mov	#linbuf,$crtnm	;  and pointer to name
	tst	bintbl(r2)	;is this to be executable?
	bpl	2$		;no
	mov	#stdprv+101,$crtmd	;yes
2$:	$indir	
	$crtsy
	bcc	7$		;ok
	mov	#linbuf,r1	;no good, complain
3$:	tstb	(r1)+		;find end of filename
	bne	3$
	dec	r1		;back up over null
	mov	#ncmsg,r0	;append rest of msg.
4$:	movb	(r0)+,(r1)+
	bne	4$
	putkb	#linbuf
	return

7$:	mov	r0,chntbl(r2)	;store file handle
	mov	r2,r0		;restore r0 with chn. #
	call	zopen
9$:	return
src.fp:
	mov	srcnam,r1	;transfer file name from src prefix
	mov	#linbuf,r0	;and store in linbuf
nam.fp:	clr	-(sp)		;clear "." flag
2$:	movb	(r1)+,(r0)+	;transfer a byte
	beq	4$		;move on if done
	cmpb	-1(r0),#'.	;not null, was it a "." ?
	beq	3$		;yes, set flag and cont.
	cmpb	-1(r0),#'/	;no, was it / ?
	bne	2$		;no, continue
	clr	(sp)		;yes, clear flag
	br	2$		;continue
3$:	mov	r0,(sp)		;flag with adr. past period.
	br	2$
4$:	mov	r0,r1		;copy adr. past terminating null
	mov	(sp)+,r0	;restore period flag (adr.)
	bne	5$		;if set, move on
	mov	r1,r0		;use this adr.
5$:	dec	r0		;back up pointer to null or period.
	return

nam.ap:	call	nam.fp		;move to period
	br	ap.ext

src.ap:	call	src.fp		;find period.
				; and plop appropriate ext. in

ap.ext:	tstb	(r0)+		;period here?
	bne	1$		;yes, assuming non-null is a period
	movb	#'.,-1(r0)	;no, put one in
1$:	mov	exttbl(r2),r1	;get pointer to ext.
2$:	movb	(r1)+,(r0)+	;store the ext. at end of name
	bne	2$
7$:	return
	.sbttl	end of program cleanup

setdn:				;clean up
	mov	#finmsg,r1	;set for final message
	mov	#linbuf,r2
	call	movbyt		;move into linbuf
	mov	errcnt,r1
; ***	beq	1$		;don't bother if successful
	call	dnc		;print in decimal
	clrb	(r2)

	putkbl	#linbuf		;list to kb & lp

1$:	return
serror:				;"s" error
	call	putkb
	mov	#1,r0
	$exit

symovf:	serror	217,<symbol table overflow>
getic:				;get input character
	dec	@cnttbl(r0)	;any chars left in line?
	blt	4$		;  no
	clr	r5
	bisb	@chrtbl(r0),r5	;yes, fetch next
	inc	chrtbl(r0)	;bump count
	return

4$:	tst	ioftbl(r0)	;file initted?
	beq	5$		;no, do so
	call	zread		;read and wait
	mov	ioftbl(r0),r5	;get condition flags
	bic	#^c<io.eof!io.err>,r5	;clear extraneous
	beq	getic		;branch if nothing special
	bit	#io.eof,r5
	beq	9$		;  error, exit
	mov	#io.eoi,r5	;in case not source
	cmp	r0,#srcchn	;is it src.?
	bne	9$		;no
5$:	call	getsrc		;open next source file
	mov	#io.eoi,r5	;in case unsuccessful
	tst	ioftbl+srcchn	;winner?
	beq	9$		;no
	mov	#io.eof,r5	;set end-of-file
9$:	bis	#100000,r5	;set flag bit
	return

getsrc:
	mov	#srcchn,r0	;use source chn.
	mov	r0,-(sp)
	mov	r1,-(sp)
	mov	r2,-(sp)
	mov	r0,r2		;copy chn. #
	call	zclose		;close current source input
1$:	dec	argc		;any left?
	blt	7$		;no
	mov	argv,r0		;point to next arg.
	mov	(r0)+,r1
	mov	r0,argv
	tst	r1		;ignore null pointer
	beq	1$
	cmpb	(r1),#'-	;switch?
	beq	1$		;yes, ignore
	mov	buftbl+srcchn,r0	;point to dest. of name
	mov	r0,$opnnm	;set up pointer to name
	call	nam.fp		;transfer name & find period.
	clr	-(sp)		;clear retry indicator
	tstb	(r0)		;was ext. specified?
	bne	13$		;yes, try it as is
	mov	r0,(sp)		;no, save adr. of null
	call	ap.ext		;append default ext.
13$:	clr	$opnmd		;set up mode as "read"
	$indir			;indirect to dirty area
	$opnsy
	bcc	3$		;if ok, move on
	tst	(sp)		;prepared to retry w/o ext.?
	beq	14$		;no, not found!
	clrb	@(sp)		;yes, remove ext.
	clr	(sp)		;just one retry
	br	13$
14$:	mov	#linbuf,r1	;store msg. in buffer
	mov	$opnnm,r0
15$:	movb	(r0)+,(r1)+
	bne	15$		;store file name
	dec	r1		;back up pointer
	mov	#nfmsg,r0
2$:	movb	(r0)+,(r1)+
	bne	2$
	putkb	#linbuf
	mov	#1,r0		;indicate error status
	$exit			;and die

3$:	mov	r0,chntbl+srcchn	;store file handle.
	bis	#io.opn,ioftbl+srcchn	;denote open
	clr	@cnttbl+srcchn	;beware of dos "feature"
	tst	(sp)+		;flush retry indicator
4$:	mov	argc,r0		;get arg. count
	mov	argv,r1		;and vector ptr.
5$:	dec	r0		;any left?
	blt	7$		;no
	cmpb	@(r1)+,#'-	;yes, but is it switch?
	beq	5$		;yes
	clr	r5		;no, note another file to go
6$:	mov	(sp)+,r2
	mov	(sp)+,r1
	mov	(sp)+,r0
	return
7$:	mov	sp,r5		;note no more files
	br	6$

putoc:	cmp	@cnttbl(r0),ioltbl(r0)	;any room left?
	bge	5$		;no
	movb	r1,@chrtbl(r0)	;yes
	inc	chrtbl(r0)
	inc	@cnttbl(r0)
4$:	return
5$:	bit	#io.opn,ioftbl(r0)	;open?
	beq	4$		;no, return
	call	zwrite		;yes, dump buffer
	br	putoc		;try again
	.sbttl	system macro handlers

	.if ndf	xsml

inisml:				;init sml file
	mov	#smlchn,r0	;open 'er up
	tst	ioftbl(r0)
	bne	finsml
	call	zopen
	mov	smlnam,r1	;get pointer to name prefix
	mov	#smlfil,r0	;point to destination of complete string
	mov	r0,$opnnm	;make copy for system call
	mov	#smlchn,r2	;set up channel #
	call	nam.fp		;transfer name to smlfil & find period.
	tstb	(r0)		;ext. specified?
	bne	1$		;yes
	call	ap.ext		;no, supply default
1$:	clr	$opnmd		;for reading
	$indir	
	$opnsy
	bcs	finsml
	mov	r0,chntbl+smlchn
	mov	sp,r0		;flag good (non-zero) return
	return

finsml:				;close out sml file
	mov	#smlchn,r0	;  and release it
	call	zrlse
	clr	r0		;signal that we're through
	return


	entsec	impure

smlnam:	.blkw	1
smlfil:	.blkw	20		;macro filename (.sml) goes here

	xitsec

	.endc
	.sbttl	init/read/write routines

	.globl	zread,	zwrite

zinit:				;init a device
	bis	#io.ini,ioftbl(r0)	;flag as in use
	return

zopen:	bis	#io.opn,ioftbl(r0)
	mov	buftbl(r0),chrtbl(r0)
	clr	@cnttbl(r0)
	return

zread:				;read a line
	mov	r0,-(sp)
	mov	r1,-(sp)
	mov	r0,r1
	mov	buftbl(r0),$rdbfp
	mov	ioltbl(r0),$rdcnt
	mov	buftbl(r0),chrtbl(r0)
	mov	chntbl(r0),r0	;get file handle
	$indir	
	$rdsys
	bcc	1$		;ok
	bis	#io.err,ioftbl(r1)
	br	8$
1$:	mov	r0,@cnttbl(r1)	;store count of chars. read
	bne	8$
	bis	#io.eof,ioftbl(r1)	;eof if none
8$:
	mov	(sp)+,r1
	mov	(sp)+,r0
	return
zwrite:				;write a line
	mov	r0,-(sp)
	mov	r1,-(sp)
	mov	r2,-(sp)
	mov	r0,r2
	bit	#io.opn,ioftbl(r0)	;only if open
	beq	9$
	mov	buftbl(r0),r1
	mov	@cnttbl(r0),r0
	beq	4$		;and non-zero count
	tst	bintbl(r2)	;binary?
	ble	59$		;  no
	mov	r2,-(sp)
	add	#4,r0
	mov	r0,-(r1)
	mov	#1,-(r1)
	mov	r0,-(sp)
	add	r1,r0
	clr	-(sp)
51$:	movb	(r1)+,r2
	add	r2,(sp)
	cmp	r1,r0
	blo	51$
	neg	(sp)
	movb	(sp)+,(r1)
	clrb	1(r1)
	mov	(sp)+,r0
	sub	r0,r1
	bis	#1,r0
	inc	r0
	mov	(sp)+,r2
59$:	mov	r0,$wrcnt	;store byte count
	mov	r1,$wrbfp	;and buffer adr.
	mov	chntbl(r2),r0	;get file handle
	$indir	
	$wrsys
	bcc	4$
	bis	#io.err,ioftbl(r2)	;error
4$:	clr	@cnttbl(r2)	;clear count initially
	mov	buftbl(r2),chrtbl(r2)	;point to beg. of buffer
9$:	mov	(sp)+,r2
	mov	(sp)+,r1
	mov	(sp)+,r0
	return
zclose:				;close file
	bit	#io.opn,ioftbl(r0)	;is file open?
	beq	1$		;no
	mov	r0,-(sp)	;yes, save r0
	mov	chntbl(r0),r0	;get file handle
	$close			;close
	mov	(sp)+,r0
	clr	ioftbl(r0)
	clr	@cnttbl(r0)
1$:	return

zrlse:				;close and release file
	call	zclose		;be sure it's closed
	clr	ioftbl(r0)	;clear device table
	return
	.sbttl	messages

	entsec	imppas
pagnum:	.blkw			;page number
linnum:	.blkw	2		;line number
	entsec	mixed

doscor:	.word	077460

	.if ndf	xtime
dattim:	.ascii	/00-xxx-00 /
datti1:	.ascii	/00:00/
datti2:	.ascii	/:00/
	.even
	.endc

	entsec	dpure

endp1m:	.asciz	/end of pass/
finmsg:	.asciz	/errors detected:  /

nfmsg:	.asciz	/ not found/<cr><lf>
ncmsg:	.asciz	/ - can't create/<cr><lf>

	.even

	entsec	mixed
hdrttl:	.ascii	/macro v/	;intro message
	gvnum			;generate version number
	.asciz	/ /
	.even

	xitsec
	.sbttl	i/o tables

	.list	meb
				;i/o flags
io.ini=	000001			;initted
io.opn=	000002			;opened
io.tty=	000004			;device is tty
io.eof=	000010			;eof seen
io.err=	000020			;error encountered
io.eoi=	000040			;end of input
io.out=	100000			;output device

	entsec	impure
ioftbl:	.blkw	maxchn/2	;i/o flag table

	entsec	dpure
ioltbl:				;i/o length table
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.word	zbuf'len
	.nlist
	.endm
	genchn

	.list

	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.if nb zext
zchan'ext:	.asclc	zext
	.endc
	.nlist
	.endm

	genchn

	.even
nulext:	.word	0


	entsec	mixed
exttbl:
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.if nb zext
	.word	zchan'ext
	.iff
	.word	nulext
	.endc
	.nlist
	.endm

	genchn
	entsec	mixed
cnttbl:				;pointer to counts
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.if nb ztype
	.word	zbuf'buf-2
	.iff
	.word	0
	.endc
	.nlist
	.endm
	genchn


buftbl:				;pointers to buffers
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.if nb ztype
	.word	zbuf'buf
	.iff
	.word	0
	.endc
	.nlist
	.endm
	genchn

	entsec	impure
chrtbl:				;char pointer table
	.blkw	maxchn/2


chntbl:			;channel <--> file handle table
	.blkw	maxchn/2

	entsec	mixed

bintbl:
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.list
	.if nb ztype
	.word	ztype
	.iff
	.word	0
	.endc
	.nlist
	.endm

	genchn
	.macro	setchn	zchan,zlnk,zbuf,ztype,zext,zlen
	.if nb	<ztype>
	entsec	impure
	.list

	.blkw	3
zbuf'buf:	.blkw	<zbuf'len+1>/2+2
	.nlist
	.endc
	.endm

	genchn


	entsec	mixed
$wrsys:	$write
$wrbfp:	.blkw	1
$wrcnt:	.blkw	1

$rdsys:	$read
$rdbfp:	.blkw	1
$rdcnt:	.blkw	1

$crtsy:	$creat
$crtnm:	.blkw	1
$crtmd:	.blkw	1

$opnsy:	$open
$opnnm:	.blkw	1
$opnmd:	.blkw	1

$brksy:	$break
$brkad:	.blkw	1

stdprv	=	604
	xitsec
	.sbttl	cross reference handlers

	.if ndf	xcref

crfset:				;cref switch processor
	tst	pass
	beq	9$
	mov	#crfchn,r0
	call	openo
	bit	#io.opn,ioftbl+crfchn	;successful?
	beq	9$		;no
	mov	sp,crfpnt	;yes, flag non-null
9$:	return
	.globl	crfdef,	crfref,	rolndx,	r50unp

	.nlist	meb
	.if df	xcref
crfref:	crfdef:	return
	.iff

	.globl	symbol

crfdef:	inc	crfdfl		;cref definition
crfref:	tst	crfpnt		;any cref output at this time?
	beq	9$		;  no
	tst	pagnum		;started yet?
	beq	9$		;  no, forget it
	call	savreg
	mov	#crfchn,r0	;set up cref channel #.
1$:	cmp	crfpag,pagnum	;new page?
	bhis	2$		;  no
	mov	#cr.pag,r1	;yes, send flag
	call	putxrf
	inc	crfpag
	clr	crflin
	br	1$

2$:	cmp	crflin,linnum	;new line number?
	bhis	3$		;  no
	mov	#cr.lin,r1
	call	putxrf
	inc	crflin
	br	2$

3$:	tst	symbol		;ignore null symbols
	beq	8$
	mov	#crftyp,r1
	mov	crfflg,r2
4$:	asr	r2
	cmpb	rolndx,(r1)+	;map roll number to cref type
	bne	4$
	asr	r2
;	bcc	8$		;**************
	sub	#crftyp+1-cr.sym,r1
	call	putxrf
	mov	#crfsym,r2	;point to where symbol gets unpacked to
	call	r50unp		;unpack the symbol
	mov	#crfchn,r0	;reset channel #
	mov	#crfsym,r2	;point to beginning of unpacked symbol
5$:	movb	(r2)+,r1	;get symbol char.
	cmpb	r1,#space	;space is end
	beq	55$
	call	putxrf		;non-space - output it
	cmp	r2,#crfsym+6	;max. of 6 chars.
	blo	5$
55$:	mov	crfdfl,r1	;set "#" bit
	tstb	opclas
	bpl	6$		;branch if no "*"
	bis	#2,r1
6$:	bis	#cr.sym,r1	;set terminator
	call	putxrf		;send it
	call	ckvtc		;see if vt needed
8$:
9$:	clr	crfdfl
	return
putxrf:	dec	vtcnt
	jmp	putoc

vtini=100.

ckvtc:	tst	vtcnt
	bmi	1$
	return
1$:	mov	#vtini,vtcnt
	mov	#vt,r1
	jmp	putoc
	entsec	impure
crfsym:	.blkw	3
vtcnt:	.blkw
crfflg:	.blkw
crfpnt:	.blkw


	.globl	opclas,	errrol

cr.ver=	001+<001*400>		;type 1, version #1
cr.pag=	002			;new page
cr.lin=	003			;new line
cr.sym=	020			;symbol

errrol=	1			;dummy roll

	entsec	impure
crfver:	.blkw			;version flag
crfpag:	.blkw
crflin:	.blkw

	entsec	implin
crfdfl:	.blkw			; "#" and "*" flags

	entsec	dpure
crftyp:
	.irp	x,<sym,mac,pst,sec,err>
	.iif ndf x'rol, .globl  x'rol
	.byte	x'rol
	.endm
	.even

crfrun:	.asclc	/usr/local/macxrf
	.even
	xitsec

	.endc
.if ndf xtime

	.globl	dnc, movbyt

;called with:
;	r0 - high-order word of 32-bit # seconds past 1jan70 gmt
;	r1 - low-order word
;	r2 - destination adr. of ascii (19 bytes)

	gmtsec = $timdf*3600.


.cvtim:
	sub	#gmtsec,r1	;adjust for deviation
	sbc	r0
	div	#8.*3600.,r0	;form # 8-hour units
	mov	r1,-(sp)	;save remaining hours, minutes & seconds
	mov	r0,r1		;now form days
	clr	r0
	div	#3,r0
	ash	#3,r1		;and hours
	mov	r1,-(sp)	;saving hours
	mov	#yr.tab,r1	;point to year structure
	mov	#69.,nyear	;initialize year
	mov	#-1,nmonth	;initialize month
1$:	inc	nyear
	sub	(r1)+,r0
	bpl	1$
	add	-(r1),r0
	mov	#28.,$feb
	cmp	(r1),#366.	;is this leap year?
	bne	21$
	inc	$feb		;yes
21$:	mov	#montab,r1
4$:	inc	nmonth
	sub	(r1)+,r0
	bpl	4$
	add	-(r1),r0
	inc	r0		;form day of month
	mov	r0,r1		;put # days into r1 for conversion
	call	dnc
	movb	#'-,(r2)+	;store dash
	mov	nmonth,r1
	asl	r1		;form offset into asciz table
	asl	r1
	add	#mo.tab,r1	;form adr. of string
	call	movbyt
	movb	#'-,(r2)+
	mov	nyear,r1	;put year into r1 for conversion
	call	dnc
	movb	#40,(r2)+
	mov	(sp)+,r0	;get partial hours
	mov	(sp)+,r1	;get initial remainder
	mov	r0,-(sp)	;save
	clr	r0		;form hours
	div	#3600.,r0
	add	(sp)+,r0
	mov	r1,-(sp)	;save # seconds
	mov	r0,r1		;set up for conversion
	cmp	r1,#10.
	bge	6$
	movb	#'0,(r2)+
6$:	call	dnc
	movb	#':,(r2)+
	mov	(sp)+,r1	;restore # seconds
	clr	r0
	div	#60.,r0		;form # minutes
	mov	r0,r1
	cmp	r1,#10.
	bge	7$
	movb	#'0,(r2)+
7$:	call	dnc
	clrb	(r2)+
	rts	pc


entsec	dpure

yr.tab:	365.	;1970
	365.	;1971
	366.	;1972
	365.	;1973
	365.	;1974
	365.	;1975
	366.	;1976
	365.	;1977
	365.	;1978
	365.	;1979
	366.	;1980
	365.	;1981
	365.	;1982
	365.	;1983
	366.	;1984 big brother is listening
	365.	;1985
	365.	;1986
	365.	;1987
	366.	;1988
	365.	;1989
	365.	;1990
	365.	;1991
	366.	;1992
	365.	;1993
	365.	;1994
	365.	;1995
	366.	;1996
	365.	;1997
	365.	;1998
	365.	;1999  no one should macro even this long
	366.	;2000
mo.tab:	.asciz	/jan/
	.asciz	/feb/
	.asciz	/mar/
	.asciz	/apr/
	.asciz	/may/
	.asciz	/jun/
	.asciz	/jul/
	.asciz	/aug/
	.asciz	/sep/
	.asciz	/oct/
	.asciz	/nov/
	.asciz	/dec/

entsec	mixed

montab:	31.
$feb:	28.
	31.
	30.
	31.
	30.
	31.
	31.
	30.
	31.
	30.
	31.


entsec	impure
.even
nyear:	.blkw
nmonth:	.blkw
.even

xitsec

.endc

	.end	start
