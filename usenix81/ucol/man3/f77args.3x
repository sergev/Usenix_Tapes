.EQ
delim $$
.EN
.TH F77ARGS 3X CIRES
.SH NAME
f77args \- decode command-line arguments
.SH SYNOPSIS
.nf
\fBinteger*4 argdef( key )
.sp 0.5
integer*4 argstr( key, svalue, sdef, sundef )
.sp 0.5
integer*4 argr4( key, rvalue, rdef, rundef )
.sp 0.5
integer*4 argr8( key, dvalue, ddef, dundef )
.sp 0.5
integer*4 argi2( key, ivalue, idef, iundef )
.sp 0.5
integer*4 argi4( key, lvalue, ldef, lundef )
.sp 0.5
logical morarg( svalue )
.sp 0.5
character*1 key
character*(*) svalue, sdef, sundef
real*4 rvalue, rdef, rundef
real*8 dvalue, ddef, dundef
integer*2 ivalue, idef, iundef
integer*4 lvalue, ldef, lundef\fR
.sp
\fIf77 flag:\fB \-lCm\fR
.fi
.SH DESCRIPTION
.PP
These are \fIf77\fP-compatible functions which provide
a convenient and reasonably flexible way to decode command
line arguments.
Command line arguments are assumed to come in one of
the following forms
(where $alpha$ is any $letter$):
.TP
$- alpha$
a lone flag, such as \fB-s\fP.
.TP
$- alpha$string
a flag followed by a string, such as
\fB-sname\fP.
.TP
$- alpha$ string
a flag argument followed by a string argument
which does \fBnot\fP begin with a `\-',
such as \fB-s name\fP.
.TP
$- alpha$value
a flag followed by a numeric value, such as \fB-s10.2\fP.
.TP
$- alpha$ value
a flag argument followed by a numeric argument, such
as \fB-s 10.2\fP.
.TP
$anystring$
any string, such as \fBanystring\fP.
.PP
Each of these functions scans the currently-unconsumed argument
list for a specific flag, designated by \fBkey\fP.
If that flag is found, it is consumed
(that is, removed from an internal list of unconsumed arguments).
Optionally, the remainder of the argument
containing the flag will be scanned for a numeric or
string value (depending upon the function called).
If such a scan is requested and fails,
the next argument will be examined to see if it satisfies
the scan, that is whether it is a string or a numeric
value as appropriate,
and if so it will be consumed.
An example may be helpful:
.nf
	\fBcharacter*10 filenm
	i = argstr( 'f', filenm, 'default_file', '/dev/null')\fR
.sp 0.2
.fi
will cause a search for an argument starting with
\fB-f\fP.
If such a flag is not found, \fBi\fP will be given
the value \fB0\fP, or \fBUNDEFINED\fP,
and the fourth argument, \fBsundef\fP, will be returned
in \fBfilenm\fP.
If such a flag is found, the remainder of the argument
in which it appears is scanned for a \fIstring\fP value.
If a non-blank string is found, it is returned in \fBfilenm\fP.
If a string is not found, the next argument is examined
to see if it could be such a string;
in this case, any string \fBnot\fP beginning with a
\- is acceptable and would be assigned to \fBfilenm\fP.
In either event of a successful match
the value \fB2\fP, or \fBVALUED\fP,
is returned.
If the flag exists but there is no value assigned
(that is, if both searches above failed), the value
\fB1\fP or \fBDEFINED\fP is returned, and \fBfilenm\fP
is given the value of the third argument or \fBsdef\fP.
A similar process occurs if one of the four flavors
of numeric arguments is requested;
a trial argument is rejected if it cannot meet the most
general floating-point form.
.PP
\fBArgdef\fP
only scans for the \fIpresence\fP of a flag which,
if found,
is consumed.
It returned either \fBDEFINED\fP or \fBUNDEFINED\fP.
.PP
As each argument is consumed it is removed from an internal
list of available arguments.
Subsequent searches will ignore previously consumed
arguments.
.PP
The remaining function \fBmorarg\fP returns, in order,
each of the arguments not previously consumed and consumes
them.
\fBMorarg\fP returns \fBtrue\fP until there are no remaining
unconsumed arguments.
.PP
These functions do not disturb the arguments returned
by \fBiargc\fP and \fBgetarg\fP.
.SH AUTHOR
Martin L. Smith (CIRES)
.SH SPONSOR
Martin L. Smith (CIRES)
.SH BUGS
The package is currently configured to handle a maximum
of \fI32\fP arguments, each not longer than \fI48\fP
characters.
Numeric argument decoding is done with the \fIf77\fP
format \fBd22.0\fP.
These functions are all written in \fIratfor\fP.
