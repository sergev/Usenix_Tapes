.EQ
delim $$
.EN
.TH SPLNEQ 3X CIRES
.SH NAME
splneq, evaleq \- cubic spline interpolation on equispaced data
(1-dimensional)
.SH SYNOPSIS
.PP
\fBcall splneq(n,y,s)
.PP
\fByp = evaleq(u,n,y,s)
.PP
\fBinteger*2 n
.PP
\fBreal y(n),s(n),u,evaleq
.PP
f77 flag: \fB-lCm\fR
.SH DESCRIPTION
.PP
These two routines perform cubic spline
interpolation for equispaced data,
the spacing being taken to be 1.
(The actual spacing will be denoted by $h$).
Subroutine \fIsplneq\fR computes the coefficients
needed for spline interpolation; \fIevaleq\fR 
can then be used to find the value at any
particular point.
.PP
The arguments are:
.IP \fBn\fR
the number of data.
.IP \fBy\fR
array of data to be interpolated.
Note that satisfactory results cannot
be expected if \fBy\fR represents a function
which is not twice differentiable.
.IP \fBs\fR
auxiliary array (filled by \fIsplneq\fR),
which holds the second derivatives at
the sample 
points.
.IP u
normalized coordinate at which an interpolated
value is wanted.
\fBy\fR(1) is taken to be at \fBu\fR = 1,
\fBy\fR(2) at \fBu\fR = 2, and so on.
If the actual interval is $h$ and the first point is at $x sub 0$,
the normalized coordinate at $x$ is \fBu\fR = $1.~+~ (x- x sub 0 ) / h$.
.PP
The derivatives at the ends are usually found by
fitting a parabola through the first and last three
points.
If you want to specify the derivatives,
before calling \fIsplneq\fR set \fBs\fR(1) to $h {dy(1)} over dx$,
\fBs\fR(2) to $h {dy(2)} over dx$,
and n to -1 times the number of terms in the series.
.PP
For three or fewer terms in the series,
the programs will fit a straight line.
If \fBu\fR < 1, \fIevaleq\fR will return \fBy\fR(1);
if \fBu\fR > \fBn\fR, it will return \fBy\fR(n).
.SH SEE ALSO
\fBspline\fR(3X)
.SH AUTHOR
R. L. Parker (UCSD)
.SH SPONSOR
D. C. Agnew (CIRES)
.SH BUGS
If derivatives are specified, they
must be given at both ends.
