.so /usr/lib/tmac/tmac.e
.po 1i
.ll 6i
.lt 6i
.nr bi 5n   \" blocks indented 5n
.nr si 3n   \" indent text in sections 3n
.de $0      \" call this with each .sh (put title in index)
.(x
.ta \\$3c
\\$2	\\$1
.)x
..
.de BO
\&\\$1\h'|0'\&\\$1\h'|0'\\$1\h'|0'\\$1\\$2
..
.de EG
.(b C
\\$1
.)b
..
.de TL
.(b C
\fBDM\fR: A Data Manipulator
Tutorial Introduction and Manual

Gary Perlman
Cognitive Science Laboratory
University of California, San Diego
.he '\fBDM\fR: A Data Manipulator''Tutorial and Manual'
.fo ''- % -''
.)b
..
.TL
.sh 1 Introduction
.pp
\fBDM\fR is a powerful data manipulating program with a rich set
of operators for manipulating columnated files of
numbers and strings.
\fBDM\fR allows you to avoid writing little BASIC or C
programs every time you want to do some transformation
to a file of data.
To use \fBDM\fR, you write a list of expressions, and
for each line of data,
\fBDM\fR prints the result of evaluating each expression.
.sh 2 "Introductory Examples"
.pp
Usually, the input to \fBDM\fR is a file of lines,
each with an equinumerous number of fields.
Equivalently, \fBDM\fR's input is a file with some set number of columns.
.sh 3 "Column Extraction."
\fBDM\fR can be used to extract columns in a very simple manner.
If "data" is the name of a file of five columns,
then the following will extract
the third string followed by the first, followed by the fourth,
and print them to the standard output.
.EG "dm s3 s1 s4 < data
Thus \fBDM\fR is very useful for putting data in a correct format for
input to many programs, notably the statistical programs developed
available on the UNIX*
.(f
* UNIX is a trademark of Bell Laboratories.
.)f
operating system.\**
.(f
\**Gary Perlman.
Data analysis programs of the UNIX operating system.
.i "Behavior Research Methods and Instrumentation,
1980,
.b 12,
554-558.
.)f
.sh 3 "Simple Expressions."
In the preceding example, columns were accessed by typing the letter 's'
(for string) followed by a column number.
You can also access the numerical value of a column by typing 'x'
followed by a column number.
This is useful when you want to form simple expressions
based on various columns.
Suppose "data" is a file of four numerical columns,
and that you want to print the sum of the first two columns
followed by the difference of the second two.
The easiest way to do this is by the following.
.EG "dm x1+x2 x3-x4 < data
Almost any arithmetic operation is available and can be of arbitrary
complexity, however, care must be taken because many of the symbols
used by \fBDM\fR (such as * for multiplication) have special meaning when
used in UNIX.  This can be avoided by putting expressions in double
quotes.
For example, the following will print the sum of the squares of
the fist two columns followed by the square of the third,
a sort of Pythagorean program.
.EG "dm ""x1*x1+x2*x2"" ""x3*x3"" < data
.sh 3 "Line Extraction Based on Conditions."
\fBDM\fR allows you to test conditions and print values depending on whether
the conditions are satisfied.
The \fBDM\fR call
.EG "dm ""if x1 >= 100 then INPUT else KILL"" < data
will print only those lines that have first columns with values
greater than or equal to 100.
The variable INPUT refers to the whole input line.
The special variable KILL instructs \fBDM\fR to terminate processing on
the current line and go to the next.
.sh 1 "Data Types"
.sh 2 "String Data"
.pp
To access or print a column in a file,
the string variable, s, is provided.
si (s followed by a column number, such as 5)
refers to the ith column of the input, treated as a string.
The most simple example is to use an si as the only part
of an expression.
.EG "dm s2 s3 s1
will print the second, third and first columns of the input.
One special string is called INPUT,
and is the current input line of data.
String constants in expressions are delimited by single quotes.
For example:
.EG "'I am a string'
.sh 2 "Numerical Data"
.pp
Two variables are available to refer to the input columns
(xi) and the numerical result of evaluated expressions (yi).
xi refers to the ith column of the input, treated as a number.
xi is the result of converting si to a number.
If si contains non-numerical characters, xi may have strange values.
A common use of the xi is in algebraic expressions.
.EG "dm x1+x2 x1/x2
will print out two columns,
first the sum of the first two input columns,
then their ratio.
.pp
You can refer to the value of a previously evaluated expression,
and avoid evaluating the same sub-expression more than once.
yi refers to the numerical value of the ith expression.
Instead of writing:
.EG "dm x1+x2+x3 (x1+x2+x3)/3
you could write:
.EG "dm x1+x2+x3     y1/3
y1 is the value of the first expression, x1+x2+x3.
String values of expressions are unfortunately unaccessable.
.pp
.ul
Indexing numerical variables
is usually done by putting the index after x or y,
but if you want the value of the index to depend on the input
such as when there are a variable number of columns,
and only the last column is of interest, the index value
will depend on the number of columns.
If a computed index is desired for x or y
the index should be an expression in square brackets following x or y.
For example, x[N] is the value of the last column of the input.
N is a special variable equal to the number of columns in INPUT.
You have the option to use x1 or x[1] but x1 will execute faster
so computed indicies should not be used unless necessary.
.sh 2 "Special Variables"
.pp
\fBDM\fR offers some special variables and control primitives for
commonly desired operations.
Many of the special variables have more than one name
to allow more readable expressions.
.ip N 8
N is the number of columns in the current input line.
.ip SUM 8
SUM is the sum of the xi, i = 1,N.
This number may be of limited use if some columns are
non-numerical.
.ip INLINE 8
INLINE is the line number of the input.
For the first line of input, INLINE is 1.0.
.ip OUTLINE 8
OUTLINE is the number of lines so far output.
For the first line of input, OUTLINE is zero.
OUTLINE will not increase if a line is killed with KILL.
.ip RAND 8
RAND is a random number uniform in [0,1).
.ip INPUT 8
INPUT is the original input line, all spaces, etc. included.
.ip NIL 8
If an expression evaluates to NIL, then there will be no output
for that expression (for that input line).
This should not be confused with KILL that suppresses output
for a whole line, or a prefix X that unconditionally suppresses
output for an expression.
.ip KILL 8
If an expression evaluates to KILL, then there will be no output
for the present line.
All expressions after a KILLed expression are not evaluated.
This can be useful to avoid nastiness like division by zero.
NEXT can be used as a pseudonym for KILL.
.ip EXIT 8
If an expression evaluates to EXIT, then \fBDM\fR immediately
exits. This can be useful for stopping a search after
a target is found.
.sh 1 "User Interface"
.sh 2 "Expressions"
.pp
Expressions are written in common computer language syntax,
and can have spaces inserted anywhere except
(1) in the middle of constants, and (2) in the middle of multicharacter
tokens, such as <= (less than or equal to).
Four modes are available for specifying your expressions to \fBDM\fR.
They give you the choice of entering expressions from your terminal or a file,
and the option to use \fBDM\fR interactively.
.sh 3 "Argument Mode."
The most restrictive mode is to supply them are arguments
to your call to \fBDM\fR, as featured in previous examples.
The main problem with this mode is that many special characters
in UNIX are used as operators, requiring that many
expressions be quoted (with single or double quotes).
The main advantage is that this mode is most useful in
constructing pipelines and shell scripts.
.sh 3 "Expression File Mode."
Another non-interactive method is to supply \fBDM\fR with a file with your
expressions in it (one to each line) by calling \fBDM\fR with:
.EG "dm E<filename>
where <filename> is your file of expressions.
This mode makes it easier to use \fBDM\fR with pipelines and redirection.
.sh 3 "Interactive Mode."
\fBDM\fR can also be used interactively by calling \fBDM\fR with no arguments.
In interactive mode, \fBDM\fR will first ask you for a file of your expressions.
If you do not have your expressions in a file,
and wish to enter them interactively,
type RETURN when asked for the expression file.
A null filename tells \fBDM\fR to read expressions from your terminal.
In terminal mode, \fBDM\fR will prompt you with the expression number,
and print out how it interprets what you type in if it has correct syntax,
otherwise it lets you correct your mistakes.
When you have typed in the last expression,
an empty line tells \fBDM\fR you are done.
If your expressions are in a file, type in the name of that file,
and \fBDM\fR will read them from there.
.sh 2 "Input"
.pp
If you use \fBDM\fR in interactive mode, you will be asked for an input file.
You can type in a file name,
or type RETURN without typing any characters
in which case \fBDM\fR will read data from your terminal.
Out of interactive mode, \fBDM\fR will read from the standard input.
.pp
\fBDM\fR reads in your data a line at a time and stores that line
in a string variable called INPUT.
\fBDM\fR then takes each column in INPUT, separated by spaces or tabs,
and stores each in the string variables, si.
\fBDM\fR then tries to convert these strings to numbers and stores the
result in the number variables, xi.
If a column is not a number (eg. it is a name)
then its numerical value will be inaccessible,
and trying to refer to such a column will buy you an error message.
The number of columns in a line is stored in a special variable called N,
so variable numbers of columns can be dealt with gracefully.
The general control structure of \fBDM\fR is summarized in Figure 1.
.pp
Referring to a column that was not read in will result in
an error message, as will trying to use a string as a number.
Older versions of \fBDM\fR did not check for such problems.
.(b
.hl
.ce
Figure 1: Control structure for \fBDM\fR.

.sz 9
read in n expressions; e1, e2, ..., en.
repeat while there is some input left
	INPUT  = <next line from input file>
	N      = <number of fields in INPUT>
	SUM    = 0
	RAND   = <a new random number in [0,1)>
	INLINE = INLINE + 1
	for i  = 1 until N do
		si  = <ith string in INPUT>
		xi  = <si converted to a number>
		SUM = SUM + xi
	for i = 1 until n do
		switch on <value of ei>
			case EXIT: <stop the program>
			case KILL: <go to get new INPUT>
			case NIL : <go to next expression>
			default  : OUTLINE = OUTLINE + 1
				   yi = <value of ei>
				   print yi
	<print a newline character>
.hl
.)b
.sh 2 "Output"
.pp
In interactive mode, \fBDM\fR will ask you for an output file or pipe.
.(b
Output file or pipe: 
.)b
You can supply a filename, type a "pipe command," or type RETURN.
A null filename tells \fBDM\fR to print to your terminal.
If you are printing to a file,
it should be different from your input file.
\FBDM\fR will ask you if you want to overwrite any
file that contains anything, but that does not mean
you can write to the file you are reading from.
.pp
You can specify that the output from \fBDM\fR be redirected
to another program by having the first character of the
output specification be a pipe symbol, the vertical bar: \fB|\fR.
For example, the following line tells \fBDM\fR to pipe its output to
\FItee\fR which prints a copy of its output to the terminal,
and a copy to its argument file.
.(b
Output file or pipe: | tee dm.save
.)b
.pp
Out of interactive mode, \fBDM\fR prints to the standard output.

.pp
\fBDM\fR prints the values of all its expressions
in %.6g format for numbers (maintaining at most six digits of precision
and printing in the fewest possible characters), and %s
format for strings.
A tab is printed after every column to insure separation.
.sh 1 "Operations"
.pp
\fBDM\fR offers a rich set of numerical, logical, and string operators.
The operators are evaluated in the usual orders (eg. times before plus)
and expressions tend be evaluated from left to right.
Parentheses can be used to make the order of operations clear.
The way \fBDM\fR interprets expressions can be verified by entering them
interactively, in which case \fBDM\fR prints a fully parenthesized form.
.pp
An assignment operator is not directly available.
Instead, variables can be evaluated but not printed
by using the expression suppression flag, X.
If the first character of an expression is X, it will
be evaluated, but not printed.
The value of a suppressed expression can later be accessed with
the expression value variable, yi.
.sh 2 "String Operations"
.pp
Strings can be lexically compared with several comparators:
< (less-than), <= (less-than or equal), = (equal), != (not equal),
>= (greater-than or equal), and > (greater than).
They return 1.0 if their condition holds, and 0.0 otherwise.
For example,
.EG " 'abcde' <= 'eeek!'
is equal to 1.0.
The length of strings can be found with the # operator.
.EG "# 'five'
evaluates to four, the length of the string argument.
.pp
Individual characters inside strings can be accessed by following a
string with an index in square brackets.
.EG " 'abcdefg'[4]
is the ASCII character number (164.0) of the 4th character in 'abcdefg'.
Indexing a string is mainly useful for comparing characters because
it is not the character that is printed, but the character number.
A warning is appropriate here:
.EG "s1[1] = '*'
will result in an error because the left side of the '='
is a number, and the right hand side is a string.
The proper (although inelegant) form is:
.EG "s1[1] = '*'[1]
.pp
A substring test is available. The expression:
.EG "string1 C string2
will return 1.0 if string1 is somewhere in string2.
This can be used as a test for character
membership if string1 has only one character.
Also available is !C which returns 1.0 if string1 is NOT in string2.
.sh 2 "Numerical Operators"
.pp
<, <=, =, !=, >=, and > are the numerical comparators and have
the analogous meanings as their string counterparts.
.pp
The binary operators, + (addition), - (subtraction
or "change-sign"), * (multiplication), and / (division)
are available. Multiplication and division are evaluated
before addition and subtraction,
and are all evaluated left to right.
Exponentiation, ^, is the binary operator of highest precedence
and is evaluated right to left.
Modulo division, %, has the same properties as division,
and is useful for tests of even/odd and the like.
NOTE: Modulo division truncates its operands to integers before
dividing.
.pp
Several unary functions are available:
l (natural log [log]), L (base ten log [Log]), e (exponential [exp]),
a (absolute value [abs]), f (floor [floor]), c (ceiling [ceil]).
Their meaning can be verified in the UNIX programmer's manual.
You can use single letter names for these functions,
or the more nmemonic strings bracketed after their names.
.sh 2 "Logical Operators"
.pp
Logical operators are of lower precedence that any other operators.
Both logical AND (&) and OR (|) can be used to form complicated tests.
For example, to see if the first three columns are
in either increasing or decreasing order,
you could test if x2 was between x1 and x3:
.EG "x1<x2 & x2<x3 | x1>x2 & x2>x3
would equal 1.0 if the condition was satisfied.
Parentheses are unnecessary because < and > are of
higher precedence than & which is of higher precedence than |.
The unary logical operator, ! (NOT), evaluates to 1.0
if its operand is 0.0, otherwise it equals 0.0.
Many binary operators can be immediately preceded by
! to negate their value.
!= is "not equal to", !| is "neither", !& is "not both", and !C is "not in".
.br
.ne 10
.sh 2 "Conditional Expressions"
.(l
The expressions:

if expression1 then expression2 else expression3
   expression1  ?   expression2   :  expression3
.)l
evaluate to expression2 if expression1 is non-zero, otherwise
they evaluate to expression3.
The first form is more mnemonic than the second which is
consistent with C syntax.
Both forms have the same meaning.
expression1 has to be numerical, expression2 or expression3 can be
numerical or string.
For example, The following expression will filter out lines
with the word 'bad' in them.
.EG "if 'bad' C INPUT then KILL else INPUT
As another example, the following expression will print the
ratio of columns two and three if (a) there are at least three
columns, and (b) column three is not zero.
.EG "if (N >= 3) & (x3 != 0) then x2/x3 else 'bad line'
These are the only expressions, besides si or a string constant
that can evaluate to a string.
If a conditional expression does evaluate to a string,
then it CANNOT be used in some other expression.
The conditional expression is of absolute lowest precedence
and groups left to right,
however parenthese are recommended to make the semantics obvious.
.sh 1 "Expression Syntax"
.pp
Arithmetic expressions may be formed using
variables (with xi and yi) and constants
and can be of arbitrary complexity.
In the following table,
unary and binary operators are listed along with their
precedences and a brief description.
All UNARY operators are prefix except string indexing, [],
which is postfix.  All binary operators are infix.
.pp
Operators of higher precedence are executed first.
All binary operators are left associative except exponentiation,
which groups to the right.
An operator, O, is left associative if "xOxOx" is parsed as "(xOx)Ox",
while one that is right associative is parsed as "xO(xOx)".
.(b M
.hl
.ce
Table 1: Functions and operators.
.ta .5iC 1iC 1.5i

UNARY OPERATORS:
	\fIop	prec	description\fR
.sz 9
	l	10	base e logarithm [log]
	L	10	base 10 logarithm [Log]
	e	10	exponential [exp]
	a	10	absolute value [abs]
	c	10	ceiling (rounds up to next integer) [ceil]
	f	10	floor (rounds down to last integer) [floor]
	#	10	number of characters in string
	[]	10	ASCII number of indexed string character
	-	9	change sign
	!	4	logical not
.)b
.(b M
.ta .5iC 1iC 1.5i
BINARY OPERATORS:
	\fIop	prec	description\fR
.sz 9
	^	8	exponentiation
	*	7	multiplication
	/	7	division
	%	7	modulo division
	+	6	addition
	-	6	subtraction
	=	5	test for equality (also !=)
	>	5	test for greater-than (also >=)
	<	5	test for less-than (also <=)
	C	5	substring (also !C)
	&	4	logical AND (also !&)
	|	3	logical OR (also !|)
.hl
.)b
.sh 1 "Programming Considerations"
.pp
This section is only for persons interesting in modifying or
compiling \fBDM\fR.
.sh 2 "Program Limitations"
.pp
Several limitations are built into \fBDM\fR, including a few reserved
numbers as well as limitations of the size of problems \fBDM\fR can be
used for.
The reserved numbers act as special flags that probably could have been
implemented another way, however....
If one of your expressions evaluates to one of these numbers then unexpected
results will occur.
The numbers are all less than -10e15 so it is unlikely
that this will be a practical problem.
.lp
The size limitations of the program are:
.(b
.ta 1i
BUFSIZ	maximum length of an input line
100	maximum number of input columns
31	maximum length of an input column string
100	maximum number of numerical constants
100	maximum number of output columns
.)b
The number of and length of string constants are limited
by dynamic allocation constraints, as is the potential complexity
of expressions.
.pp
.sh 2 "Recompiling \fBDM\fR"
.pp
The source for \fBDM\fR is in dm.y.
It must be preprocessed by running yacc on it,
which will produce a file called y.tab.c which should be
compiled with the ly and lS libraries on version 6 UNIX and
with the lm library on version 7.
.ep
.he ''''
.fo ''''
.bp
.TL


.EG "Table of Contents

.(l M
.xp
.)l
