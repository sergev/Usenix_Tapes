edit is a screen-oriented enhancement of the UNIX text editor ed.
The "help" function provides on-line access to documentation.
To obtain help about a given subject or command, type:
     help <subject>
To make the help window go away, type:
     nohelp
When more information is available, the message:
     Type "more" for more.
will appear on the last line.
                                                Type "more" for more.
Help is available on the following subjects:
     addresses               buffers
     commands                macros
     cursor                  escape sequences
     modes                   environment
     options                 mapping
     regular expressions
     screen
     shell
     windows
{address,addresses}


No information available at this time.







{buffer,buffers}
Edit provides 27 text buffers where lines may be saved for insertion into
the text, or for use as macros. There are 26 named buffers, each specified
by a single letter, and one unnamed buffer. The unnamed buffer is
automatically filled with the lines to be removed immediately before each
delete or change command. The named buffers are filled via the yank command.
The contents of a buffer may be inserted into the text with the put command.




{commands}
When in the command mode (cursor at the bottom line) the following commands
are available:
     a append    g global     m move        r read           X execute
     b break     h head       M map         s substitute     y yank
     c change    i insert     o option      t copy           ! shell
     d delete    j join       p put         v global         > setbuffer
     e edit      k mark       P print       w write          @ macro
     f find      l list       q quit        x expand

For more information on a particular command, type: "help <commandname>"
{escape,escape sequences,sequences,escapes}
esc-@ set insert mode			esc-H cursor to start of '.'
esc-1 split line at current char	esc-i insert above current line
esc-2 set overwrite mode		esc-K cursor to end of current line
esc-a append after current line	esc-L cursor left 8 characters
esc-A cursor up 1 line			esc-m goto matching bracket character
esc-B cursor down 1 line		esc-M cursor right 8 characters
esc-C cursor right 1 character		esc-o accept misspelled word as correct
esc-d delete current line		esc-P delete current character
esc-D cursor left 1 character		esc-s goto misspelled word

{mapping}
Edit provides a capabliity for translating certain input characters or
character sequences into different sequences before acting on them. This
facility is provided to compensate for discrepancies between the special
function keys on a particular terminal and the escape sequences used to
perform cursor mode functions. For example, if your terminal has a group
of keys which transmit escape sequences but these are not the same as the
default sequences used by edit (see "escape sequences"), you can use the
mapping function to cause these keys to perform the desired function.

						type "more" for more
For each supported terminal type there is a default mapping. This may be
augmented or modified in two different ways: environment variables or the
map command. During initialization, edit searches for the environment
variables MAP and MAPterm, where term is the code for the current terminal.
If present, the mappings defined are merged into the map with any existing
mappings being overridden.



						type "more" for more
The format for these strings is:
	<delim><source><delim><target>...
where <delim> is some character not appearing in any source or target.
The string "^x", where x is any letter (or '[' for ESC) is replaced by
the corresponding control character wherever it appears in either the
source or target.
Some restrictions:
     All source strings must begin with a control character.
     No source string may be a left substring of any other source string.

{mode,modes}
Edit may be considered to be in one of two modes, depending on the location
of the cursor. When the cursor is on the bottom line of the screen, edit is
in "command" mode and will accept and execute commands similar to those of
"ed" (see "commands"). When the cursor is above the bottom line, edit is in
"screen" mode and changes and additions may be made to the text of the file.
In addition, screen mode may be divided into two submodes: "insert" where
the cursor is positioned at the end of the current line ("."), and "modify"
when the cursor is at any other location.

						type "more" for more.
When in insert mode, typing RETURN begins a new blank line below the
current line. When in modify mode, typing RETURN returns to the point at
which insert mode was left. In either case, typing CONTROL-D returns to
command mode.






{options}
Options may be set in three ways: via the EDIT environment variable,
at invocation as flags, and while running with the option command.
There are three types of options: boolean, numeric, and string.






						Type "more" for more.
The following options are available:
     a accept ctrl chars    p paging threshold    X setup file
     b shell beep           r read only           z expand size
     c crash recovery       s spell checking
     i auto-indent          t tab spacing
     j join spacing         u upper case text
     l left break           w word break
     o overwrite mode       x auto-expand
For information on a particular option type "help ox", where x is the
letter denoting the option.
{oa}
a  Accept all characters (boolean)
   Normally all control characters, except tab, newline, escape, and
   mapped characters, are ignored. If this option is set, they will be
   accepted as printing characters. In order to enter the erase or kill
   character, it is necessary that this option be set and the character
   escaped with a '\'.




{ob}
b  Shell beep (boolean)
   With this option set, the bell is sounded when the command running
   in the shell window completes.







{oc}
c  Crash recovery (numeric)
   Edit periodically saves the state of each file being edited in a pair of
   temporary files: /tmp/exxxxxYa and /tmp/exxxxxYb, where xxxxx is the process
   id of the editor, and Y is the name of the window in which the file is
   being edited. if edit terminates normally, these files are removed.
   However, if a system crash or other abnormal termination occurs during
   editing, these files are preserved (for a short time).


						type "more" for more
   To recover from the point of the last update type:
   	edit -cxxxxx
   where xxxxx is the process id mentioned above.
   This may be discovered by typing:
   	l /tmp
   and looking for an appropriate pair of files having your user id.
   This "option" may only be specified at the time the editor is invoked.



{oi}
i  Auto-indent
   With this option in effect, a line of text being inserted is automatically
   indented to the same level as the previous line by copying initial white
   space (tabs and spaces). The level of indentation may be reduced by
   backspacing. A single '.' as the first character entered terminates
   insert mode, regardless of any indenting.




{oj}
j  Join spacing (boolean)
   When this option is set a space is inserted between lines joined
   by the 'j' command.
   Note that the default is set.






{ol}
l  Left break (boolean)
   Normally, text lines which are too long to fit on a single screen line
   are broken and the last part right justified on the following screen    line.
   If this option is set, the remainder will be left justified.






{oo}
o  Overwrite mode.
   When on the default treatment of printing characters in cursor mode
   is set to overwrite. The default is insert.







{op}
p  Page threshold (numeric)
   Normally, edit scrolls in order to move a line from one part of the screen
   to another. If the number of screen lines to be moved exceeds the page
   threshold, the entire window will be cleared and rewritten instead.
   A value of zero disables paging.




{or}
r  Read-only (boolean)
   When on the execution of all write commands is prohibited. Useful
   for browsing through a file without inadvertently changing it.






{os}
s  Spell checking (boolean)
   When this option is set a background process is started to which all
   words entered into the file are passed. This process, which is a
   modified version of the spell program, checks each word and sends back
   a message for each one which it thinks is misspelled.

   Pressing esc-s will position the cursor at the word in question.
   Pressing esc-o will cause the spell checker to accept the word as
   corectly spelled henceforth.

{ot}
t  Tab spacing (numeric)
   Only uniformly spaced tabs are supported.
   The default is 8.






{ou}
u  Upper case text (boolean)
   When set, this option causes all text entered into the file to be forced
   into upper case. Note that text entered into the command line remains in
   whatever case it was typed in.






{ow}
w  Word break (boolean)
   With this option in effect, whenever a text line becomes longer than the
   screen line size, a new text line is started beginning with the faulting
   word. Useful for entering text without looking.






{ox}
x  Auto expand (boolean)
   When set casues automatic expansion after a 'P' command.







{oX}
X  Startup file (string)
   This option, which may only be specified at invocation, causes the
   specified file to be read and executed as editor commands,
   as in the 'X' command. Useful for setting up a standard set of macros.






{oz}
z  Expand size (numeric)
   When running at low baud rates, edit reduces the number of lines added
   to the screen by an expand command or by scrolling so as to reduce delays.
   This number is a function of the baud rate, with proportionately
   fewer lines at lower baud rates.
   This option allows the default to be overridden.




{window,windows}
The screen may be divided horizontally into up to 3 windows, each of
which may contain a file being edited, shell output, or help information.
Windows are created with the "e", "!", or help commands, and deleted by
the "q", "noshell", and "nohelp" commands.






{a,append}
(.)a
<text>
.
							
	The append command reads the given text and appends it after the
	addressed line.




{b,break}
(.)b<regular expression>
	The break command splits the addressed line into two lines such
	that the first character of the regular expression is the first
	character of the second line.






{c,change}
(.,.)c
<text>
.
	The change command deletes the addressed lines, then accepts
	input text which replaces these lines. '.' is left at the last
	line input; if there were none, it is left at the line preceeding
	the deleted lines.
	The deleted lines are saved in the unnamed text buffer.


{d,delete}
(.,.)d
	The delete command deletes the addressed lines from the buffer.
	The line originally after the last line deleted becomes the current
	line; if the lines deleted were originally at the end, the new
	last line becomes the current line.
	The most recently deleted lines are saved in the unnamed text
	buffer.



{e,edit}
e[w] filename
	The edit command causes the entire contents of the buffer to be
	deleted, and then the named file to be read in. 'filename' is
        remembered for possible use as a default file name in a subsequent
	r or w command.
	
	
	
	
	
{f,find}
(.)f<regular expression>
	The find command searches the file beginning at the addressed
	line for the first occurrence of a string matching the regular
	expression, and positions the cursor at the beginning of this
	string. The search wraps around to the beginning of the file
	if necessary. Note that there is no space between the 'f' and
	the beginning of the regular expression.



{g,global}
(1,$)g/regular expression/command
	In the global command, the first step is to mark every line which
	matches the given regular expression. Then for every such line,
	the given command is executed with '.' initially set to that line.
	The a, c, i, g, and v commands are not permitted.
	
	
	
	
	
{h,head}
(.)h
	The head command causes the addressed line to be moved to the
	top of the window and the remainder of the window to be filled.







{help}
help
	The help command enables the help function which displays help
	information in a window in the bottom half of the screen.







{i,insert}
(.)i
<text>
.
	The insert command inserts the given text before the addressed
	line. '.' is left at the last line input, or if there were none,
	at the line before the addressed line. This command differs from
	the a command only in the placement of the text.



{j,join}
(.,.+1)j
	The join command joins the addressed lines into a single line.
	If the 's' option is set (see options) a space is inserted
	between all joined lines.






{k,mark}
(.)kx
	The mark command marks the addressed line with the name x,
	which must be a lower-case letter. The address form "'x" then
	addresses this line.






{l,list}
(.)l
	The list command performs the same function as the "p" command
	except that all non-printing characters (including tabs) are
	displayed as "\oo" where oo is the octal value of the character.






{M,map}
M
<source sequence><SPACE><output sequence><RETURN>
	The map command provides for modifying or augmenting the default
	special function mapping (see "mapping"). The source sequence,
	which must begin with a control character and contain no spaces,
	is replaced by the output sequence whenever it is entered on the
	keyboard.



{m,move}
(.,.) m <addr>
	The move command repositions the addressed lines after the line
   	addressed by <addr>. The last of the moved lines becomes the
	current line.






{nohelp}
nohelp
	The nohelp command disables the help function and removes the
	help window from the screen.







{o,option}
o<option><new value>
	The set option command allows options to be changed.
	<option> is a single character code for the desired option.
	<new value> is either a numeric value for numeric options, or
	one of the words "on" or "off" for boolean options.
	If either <option> or <new value> is omitted, it will be prompted
	for.
	For more information and a list of options type "help options".


{P,print}
(.)P
	The print command clears the screen and displays the addressed
	line at the default position. The addressed line becomes the
	current line. Unless the x option is set, no other lines are
	displayed.





{p,put}
(.)p[<buffername>]
	The put command places the contents of the named text buffer
	after the addressed line. If no buffer name is given, the delete
	buffer is used.






{q,quit}
q[w]
	The quit command is used to exit the editor or to delete a
	window from the screen. If a window name is given, that window
	is removed from the screen and the remaining windows are expanded.
	If no window name is given, the editor exits. No automatic write
	of a file is done. However, if the file has been modified, a
	message is printed and a confirmation (i.e. reentry of the quit
	command) is required.


{r,read}
(.)r filename
	The read command reads in the given file after the addressed
	line. If no file name is given, the remembered file name, if any,
	is used (see "e" command). The file name is remembered if there
	was no remembered file name already. Address '0' is legal for "r"
	and causes the file to be read at the beginning of the buffer.
	If the read is successful, '.' is left at the last line read from
	the file.


{s,substitute}
(.,.)s/regular expression/replacement/[g]
	The substitute command searches each addressed line for an
	occurrence of the specified regular expression. On each line on
	which a match is found, all matched strings are replaced by the
	replacement specified, if the global replacement indicator 'g'
	appears after the command. If the global indicator does not appear
	only the first occurrence of the matched string is replaced.
	Any character other than space or newline may be used instead of
	'/' to delimit the regular expression and replacement.
						type "more" for more
	An ampersand '&' appearing in the replacement is replaced by the
	string matching the regular expression. The special meaning of '&'
	in this context may be suppressed by preceding it by '\'.
	The characters '\m' where m is a digit, are replaced by the text
	matched by the m-th regular subexpression enclosed between '\('
	and '\)'. When nested, parenthesized subexpressions are present,
	m is determined by counting occurrences of '\(' starting from the
	left.
	
						type "more" for more
	Lines may be split by substituting newline characters into them.
	The newline in the replacement string must be escaped by preceding
	it by '\'. Lines may also be split with the "b" command or
	with the split key in cursor mode.






{t}
(.,.)t<addr>
	This command acts just like the "m" command except that a copy
	of the addressed lines is placed after address <addr> (which may
	be 0). '.' is left on the last line of the copy.






{v}
(1,$)v/regular expression/command
	This command is the same as the global command "g" except that
	the command is executed with '.' initially set to every line
	except those matching the regular expression.






{w,write}
(1,$)w filename
	The write command writes the addressed lines onto the given
	file. If the file does not exist, it it created with mode 660.
	The file name is remembered if there was no remembered file name
	already. If no file name is given, the remembered file name, if
	any, is used (see "e" command). '.' is unchanged. If the read-only
	option is set an error is indicated and no write is performed.



{x,expand}
(.)x
	The expand command places the addressed line on the screen, if
	necessary, and causes any empty window lines to be filled.







{X,execute}
X filename
	The execute commands reads the specified file and executes
	its contents as editor commands. Execute commands may be nested.







{y,yank}
(.,.)y[<buffername>]
	The yank command places a copy of the addressed lines into the
	specified text buffer where they may be used in a subsequent
	put command or in a macro. If no buffer name is given, the
	delete buffer is used.





{!,shell}
!<shell command>
	The remainder of the line after the '!' is sent to sh(1) to be
	executed. If not present, a shell window is created at the top
	of the screen. All input to and output from the shell and any
	processes it executes appears in this window. The command is
	executed in the background and editing may continue while it is
	running.



{>,setbuf,setbuffer}
>[<buffer name>]
text
.
	Text is entered into the named buffer until a line consisting
	only of '.' in encountered. While this text is being entered,
	a message appears on the error line, and the prompt is changed
	to "x>" where x is the buffer name. This command is intended
	mainly for use in initializing macros, both on line and in
	a file specified in the X command or option.

{@,macro}
(.,.)@<buffer name>[<delim><string>[<delim><string>...]]
	For each line in the specified address range, the lines in the	
	named buffer are executed as editor commands. If any of the
	command lines contains a string of the form "$n" where n is a
	digit between 1 and 9, it is replaced with the nth. parameter
	string before the command is executed. If string of the form
	"\c" is encountered, where c is any character, it is replaced with
	c. Thus to execute the command "s/$/\$/" the macro would have to
	read "s/\$/\\\$/". Macros may be nested.

{oi,auto-indent,autoindent,auto indent,indent}
i  Auto-indent
   With this option in effect, a line of text being inserted is automatically
   indented to the same level as the previous line by copying initial white
   space (tabs and spaces). The level of indentation may be reduced by
   backspacing. A single '.' as the first character entered terminates
   insert mode, regardless of any indenting.




{oo,overwrite,overwrite mode}
o  Overwrite mode.
   When on the default treatment of printing characters in cursor mode
   is set to overwrite. The default is insert.







{or,read only,readonly,read-only}
r  Read-only.
   When on the execution of all write commands is prohibited. Useful
   for browsing through a file without inadvertently changing it.







{t,tab spacing,tabspace}
