/***************************************************************/
fishes.h
/***************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/gfxmacros.h>
#include <graphics/rastport.h>
#include <graphics/view.h>
#include <graphics/copper.h>
#include <graphics/clip.h>
#include <graphics/layers.h>
#include <graphics/collide.h>
#include <graphics/display.h>
#include <graphics/gfxbase.h>
#include <graphics/gels.h>
#include <intuition/intuition.h>

#include <hardware/dmabits.h>
#include <hardware/custom.h>




extern struct Custom custom;
/***************************************************************/
atest.c
/***************************************************************/
#include "fishes.h"
#include <stdio.h>

#define WIDTH   320
#define HEIGHT  200 
#define DEPTH 3 

short bpdata[] =
   {
   0x000, 0x5ef, 0x128, 0xd81, 0x326, 0x203, 0x086, 0x044,
   0x5ef, 0x633, 0x855, 0x857, 0x065, 0x669, 0x223, 0x547
   };

struct GelsInfo *GInfo;
struct VSprite *head, *tail;
struct collTable *boom;
struct BitMap   bitmap[2];

show(screen,view,vp,rp,window)
struct Screen *screen;
struct View *view;
struct ViewPort *vp;
struct RastPort *rp;
struct Window *window;
{
    short dispIndex;
    short i, i2, j,k;
	struct IntuiMessage *message;
	struct AnimOb *animKey;
	struct BitMap *OldI_BitMap;		

	OldI_BitMap = rp->BitMap;

    if ((boom = (struct collTable *)AllocMem(sizeof
        (struct collTable),MEMF_PUBLIC+MEMF_CLEAR )) == 0)
		{
		    exit(1);
        }
 
    if ((head = (struct VSprite *)AllocMem(sizeof(struct VSprite),
        MEMF_PUBLIC+MEMF_CLEAR )) == 0)
		{
		    exit(1);
        }

    if ((tail = (struct VSprite *)AllocMem(sizeof(struct VSprite),
        MEMF_PUBLIC+MEMF_CLEAR )) == 0)
		{
		    exit(1);
        }
 
    if ((GInfo = (struct GelsInfo *)AllocMem(sizeof(struct GelsInfo),
        MEMF_PUBLIC+MEMF_CLEAR )) == 0)
		{
		    exit(1);
        }

    GInfo->nextLine = 0;
    GInfo->lastColor = 0;
    GInfo->leftmost = 0;
    GInfo->topmost = 0;
    GInfo->rightmost = WIDTH -1;
    GInfo->bottommost = HEIGHT - 1;
    GInfo->collHandler = boom;
    GInfo->sprRsrvd = -1;
    rp->GelsInfo = GInfo;
    InitGels(head,tail,GInfo);
	

	LoadRGB4(vp,bpdata,16);
	SetRast(rp,0);

    for(i=0; i<2; i++)
    {	
		InitBitMap(&bitmap[i],DEPTH,WIDTH,HEIGHT);
    	for(j=0; j<DEPTH; j++)
		{	
		   if ((bitmap[i].Planes[j] = (PLANEPTR)AllocRaster(WIDTH,HEIGHT)) == 0)
           {
              exit(2);
           }
		   else
		   {
		       BltClear(bitmap[i].Planes[j],RASSIZE(WIDTH,HEIGHT),0);
		   }
	    }
	};

	rp->Flags = DBUFFER;
    rp->Mask = -1;        

    vp->RasInfo->BitMap = &bitmap[1];
	rp->BitMap = &bitmap[1];
	SetRast(rp,0);

    vp->RasInfo->BitMap = &bitmap[0];
	rp->BitMap = &bitmap[0];
	SetRast(rp,0);

	animinit(&animKey,vp,rp);

    dispIndex = 0;

restart:
    while((message = (struct IntuiMessage *)GetMsg(window->UserPort)) == NULL)
        {
		Animate(&animKey, rp);
        SortGList(rp);
		WaitTOF();
		DrawGList(rp,vp); 
		vp->RasInfo->BitMap = &bitmap[dispIndex]; 
		WaitTOF();
	   	MakeScreen(screen);	
		WaitBlit();
		RethinkDisplay();
        dispIndex ^= 1;
        rp->BitMap = &bitmap[dispIndex];

        }
	switch(message->Class)
		{
        case CLOSEWINDOW:ReplyMsg(message);
				      free_anim_obj(rp);		
                      for (i = 0; i < 2; i++){
                      	for (j = 0; j < DEPTH; j++)
							{
                            FreeMem(bitmap[i].Planes[j],RASSIZE(WIDTH,HEIGHT)); 
                            };
						};	
						FreeMem(boom,sizeof(struct collTable));
						FreeMem(head,sizeof(struct VSprite));
						FreeMem(tail,sizeof(struct VSprite));
						FreeMem(GInfo,sizeof(struct GelsInfo));
                        vp->RasInfo->BitMap = OldI_BitMap;
                        rp->BitMap = OldI_BitMap; 
						return;
       } 
   ReplyMsg(message);
   goto restart;
              

}

main()
{
  startgfx(400,80,50,100,2,0,show,"CATHY'S FISH",SMART_REFRESH);

}

delay()
{
	int i;
	int x;
	for(i = 0; i<10000; i++)
	{
		x += i;
	}
}
	
/***************************************************************/
init.c
/***************************************************************/
#include "fishes.h"
#include <stdio.h>

#define DEPTH 3 
#define ALLSTART 0
#define TEST


extern short color[8];
extern short color1[8];
extern short color2[8];

short color92[] = {
0x28f,
0xffc,
0xfbf,
0xfd0,
0xf30,
0x90d,
0xff,
0xd9,
};

extern struct AnimOb fishOb;
extern struct Bob fish1Bob;
extern struct AnimComp fish1Comp;

extern struct GelsInfo *GInfo;
extern struct VSprite *head, *tail;
extern struct collTable *boom;

SHORT timers[] =
{
/* fish's */
    1, 1, 1, 1, 1, 1, 1, 1, 1,1,1,1,1, 1, 1, 1, 1,
};

SHORT Index = 0;

SHORT xtranslations[] = 
{
/* fish's */
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
};

SHORT ytranslations[] = 
{
/* fish's */
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
    0 << ANFRACSIZE,
};

SHORT XVel[] = 
{
/* fish's */
    4 << ANFRACSIZE,
};

SHORT YVel[] = 
{
/* fish's */
    0 << ANFRACSIZE,
};

/* !!! define an animCRoutine here */

/* !!! define an animORoutine here */

fishMRoutine(anOb)
struct AnimOb *anOb;
{
    register struct AnimComp *acptr, *seqptr;

    acptr = anOb->HeadComp;
    while (acptr)
        {
        seqptr = acptr;
        do
            {
            if (seqptr->AnimBob->BobVSprite->Flags & GELGONE)
                {
                seqptr->AnimBob->BobVSprite->Flags &= ~GELGONE;
                fishOb.AnX = 0 << ANFRACSIZE;
                }
            seqptr = seqptr->NextSeq;
            }
        while (seqptr != acptr && (seqptr));
        acptr = acptr->NextComp;
        }
}

fish1Routine(comp)
struct AnimComp *comp;
{
    /* if (fish1Comp.Timer == 1)
        fishOb.AnX += (87 << ANFRACSIZE); */

    return(TRUE);
}

short startFlag = 4;

animinit(animKey,vp, wR)
struct AnimOb **animKey;
struct ViewPort *vp;
struct RastPort *wR;
{
    SHORT i;

    Index = 0;
    fishOb.XVel = XVel[0];
    fishOb.YVel = YVel[0];

    fishOb.HeadComp = &fish1Comp;

	fish1Bob.Before = NULL;
	fish1Bob.After = NULL;

    InitAnimate(animKey);

    extrainit(&fishOb, TRUE, wR);   
    AddAnimOb(&fishOb, animKey,wR);

	for (i = 0; i < 8; i++)
        SetRGB4(vp,i ,
            (color92[i] >> 8) & 0x00F, 
            (color92[i] >> 4) & 0x00F, 
            (color92[i] >> 0) & 0x00F); 
	
}

extrainit(animKey, addFlag,wR)
struct AnimOb *animKey;
BOOL addFlag;
struct RastPort *wR;
{
    struct AnimOb *anOb;
    struct AnimComp *acptr;
    struct AnimComp *seqptr, *sseqptr;
    struct Bob *bptr;
    struct Sprite *sptr;
    short i, depth, sw, sh;
    UBYTE *iptr, *i2ptr, *pptr;
    short ibufsize, pbufsize;


/* animOb inits */

    anOb = animKey;
    anOb->AnX = ALLSTART << ANFRACSIZE;
    anOb->AnY = 0;

    anOb->XAccel = 0;
    anOb->YAccel = 0;
    anOb->Clock = 0;

    acptr = anOb->HeadComp;
    while (acptr)
        {
        acptr->AnimBob->BobVSprite->X =
	    (anOb->AnX + xtranslations[Index] + ANIMHALF) >> ANFRACSIZE;
        acptr->AnimBob->BobVSprite->Y =
	    (anOb->AnY + ytranslations[Index] + ANIMHALF) >> ANFRACSIZE;
        sseqptr = seqptr = acptr;
        do
            {
            seqptr->AnimBob->Flags = BOBISCOMP;
            seqptr->AnimBob->BobVSprite->Flags = SAVEBACK|OVERLAY;
            seqptr->TimeSet = timers[Index];
            seqptr->XTrans = xtranslations[Index];
            seqptr->YTrans = ytranslations[Index];
            seqptr->AnimBob->BobVSprite->PlaneOnOff= 0x10;
            Index++;
            seqptr = seqptr->NextSeq;
            }
        while (seqptr != sseqptr && (seqptr));
        acptr = acptr->NextComp;
        }

    if (! (GetGBuffers(anOb, wR, TRUE)))
	{  
		exit(3);
	}
	InitGMasks(anOb);
}

free_anim_obj(RPort)
struct RastPort *RPort;
{

    FreeGBuffers(&fishOb,RPort,TRUE);
} 
 
/***************************************************************/
start.c
/***************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/view.h>
#include <graphics/text.h>
#include <graphics/gfxmacros.h>

#include <graphics/layers.h>
#include <intuition/intuition.h>

#define DEPTH 3 

#define TXHEIGHT 8

struct TextAttr TestFont =
    {
    "topez.font",
    TXHEIGHT,
    0,
    0,
    };

long GfxBase = 0;
long LayersBase = 0;
long IntuitionBase = 0;

startgfx(x,y,height, width, n_bit_Planess, palette, gfxproc,s,flags,sbitmap)
WORD x,y;
WORD height, width, n_bit_Planess;
UWORD *palette;
int (*gfxproc)();
UBYTE *s;
struct BitMap *sbitmap;		/* optional parameter */
{
    struct Screen *myscreen;
	struct Window *window;
	struct RastPort *w=0;
    struct View *view;
	register i, j;
	int idcmp;
	struct NewWindow nw;
    struct NewScreen ns;

    
	GfxBase = OpenLibrary("graphics.library",31);
	if (GfxBase == 0)
	{
		exit();
	}

	LayersBase = OpenLibrary("layers.library",31);
	if (LayersBase == 0)
	{
		exit();
	}


	IntuitionBase = OpenLibrary("intuition.library",31);
	if (IntuitionBase == 0)
	{
		exit();
	}

	/* intuition direct comunication message port */
	idcmp = CLOSEWINDOW|REFRESHWINDOW;

    ns.LeftEdge = 0;
	ns.TopEdge = 0;
	ns.Width = 320;
	ns.Height = 200;
	ns.Depth = DEPTH;
	ns.DetailPen = -1;
	ns.BlockPen = -1;
	ns.ViewModes = 0;
	ns.Type = CUSTOMSCREEN;
	ns.Font = &TestFont;
    ns.DefaultTitle = NULL;
    ns.Gadgets = NULL;

    if ((myscreen =(struct Screen *)OpenScreen(&ns)) == 0)
   		{
			exit(1);
		}


	nw.LeftEdge = x;
	nw.TopEdge = y;
    nw.Width = width;
	nw.Height = height;
	nw.DetailPen = -1;
	nw.BlockPen = -1;
	nw.IDCMPFlags = idcmp;
	nw.Flags = WINDOWDEPTH|WINDOWSIZING|WINDOWDRAG|WINDOWCLOSE|flags;
	nw.FirstGadget = 0;
	nw.CheckMark = 0;
	nw.Title = s;
	nw.Screen = 0;
	nw.BitMap = sbitmap;
	nw.MinWidth = 80;
	nw.MinHeight = 16;
	nw.MaxWidth = 640;
	nw.MaxHeight = 200;
    nw.Type = WBENCHSCREEN;

    window = (struct Window *)OpenWindow(&nw);
    view = (struct View *)ViewAddress(); 
    (*gfxproc)(myscreen,view,&myscreen->ViewPort,&myscreen->RastPort,window);
    CloseWindow(window);    
    CloseScreen(myscreen);
}
/***************************************************************/
fish.c
/***************************************************************/
#include <fishes.h>

short color[] = {
0x28f,
0xffa,
0xfbf,
0xdb,
0xf30,
0x90d,
0xff,
0x16a,
};


short image_1[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0xf80, 0x0, 0x0, 
0xfc0, 0x0, 0x0, 0x860, 0x0, 0x0, 0xec0, 0x0, 0x0, 0x18, 
0x0, 0x0, 0x21, 0x0, 0x0, 0x21, 0x8000, 0x0, 0x31, 0x8000, 
0x0, 0x7, 0x0, 0xf800, 0x0, 0x0, 0xfc03, 0x0, 0x0, 0xfe03, 
0xc000, 0x7800, 0xff03, 0xe001, 0xc400, 0xff83, 0xf800, 0x6000, 0xffe3, 0xfe00, 
0x3800, 0xffe3, 0xff80, 0x0, 0xfff3, 0xffe0, 0x0, 0xfff8, 0x0, 0x0, 
0xfffc, 0x0, 0x0, 0xfffe, 0x0, 0x0, 0xff81, 0x0, 0x0, 0xff81, 
0x8060, 0x0, 0xff81, 0xc1e0, 0x0, 0xffff, 0xe0e0, 0x0, 0xffff, 0xf060, 
0x0, 0xffff, 0xf800, 0x4, 0xffff, 0xf000, 0x0, 0xffff, 0xc000, 0x0, 
0xffff, 0xff0, 0x0, 0xfffc, 0xfc0, 0x0, 0xfff0, 0xf00, 0x0, 0xffc0, 
0xc00, 0x0, 0xff00, 0x800, 0x0, 0xfc00, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0xf80, 0x0, 0x0, 0xfc0, 0x0, 0x0, 0x860, 
0x0, 0x0, 0xec0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x21, 0x0, 
0x0, 0x21, 0x8000, 0x0, 0x31, 0x8000, 0x0, 0x7, 0x0, 0x0, 
0x0, 0x0, 0x3, 0x0, 0x0, 0x3, 0xc000, 0x7800, 0x3, 0xe001, 
0xc400, 0x3, 0xf800, 0x6000, 0x23, 0xfe00, 0x3800, 0x3, 0xff80, 0x0, 
0x3, 0xffe0, 0x0, 0x3, 0xfff8, 0x0, 0x3, 0xfffe, 0x0, 0x1, 
0xffff, 0x8000, 0x0, 0xffff, 0xe000, 0x0, 0x7f9f, 0xf800, 0x0, 0x3e1f, 
0xf000, 0x0, 0x1f1f, 0xe000, 0x0, 0xf9f, 0xe000, 0x0, 0x7ff, 0xf004, 
0x0, 0xfff, 0xf800, 0x0, 0x3fff, 0xfe00, 0x0, 0xf00f, 0xf800, 0x1, 
0xf03f, 0xc000, 0x1, 0xf0ff, 0x0, 0x1, 0xf3fc, 0x0, 0x1, 0xf7e0, 
0x0, 0x1, 0xff00, 0x0, 0x1, 0xf800, 0x0, 0x1, 0xe000, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0xf80, 
0x0, 0x0, 0xfc0, 0x0, 0x0, 0x860, 0x0, 0x0, 0xec0, 0x0, 
0x0, 0x18, 0x0, 0x0, 0x21, 0x0, 0x0, 0x21, 0x8000, 0x0, 
0x31, 0x8000, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x7800, 0x0, 0x1, 0xc400, 0x0, 0x0, 0x6000, 
0x20, 0x0, 0x3800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x300, 0x0, 0x7e, 0x7c0, 
0x0, 0x7e, 0x7e0, 0x0, 0x7e, 0x3e0, 0xf00, 0x0, 0xe0, 0x1c00, 
0x0, 0x60, 0x1c00, 0x0, 0x0, 0xe04, 0x0, 0x0, 0x700, 0x0, 
0x0, 0x0, 0x0, 0xff0, 0x0, 0x0, 0xfc0, 0x4, 0x0, 0xf00, 
0x0, 0x0, 0xc00, 0x0, 0x0, 0x800, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_2[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 
0x3f0, 0x0, 0x0, 0x218, 0x0, 0x0, 0x3b0, 0x0, 0x0, 0x6, 
0x0, 0x0, 0x8, 0x4000, 0x0, 0x8, 0x6000, 0x0, 0xc, 0x6000, 
0x0, 0x1, 0xc000, 0x0, 0x0, 0x0, 0x700, 0x6000, 0x0, 0x780, 
0x7000, 0x1e00, 0x7c0, 0x7800, 0x7100, 0x7e0, 0x7e00, 0x1800, 0x7f8, 0x7f80, 
0xe00, 0x7f8, 0x7fe0, 0x0, 0x7fc, 0x7ff8, 0x0, 0x7fe, 0x0, 0x0, 
0x7ff, 0x0, 0x0, 0x7ff, 0x8000, 0x0, 0x7e0, 0x4000, 0x0, 0x7e0, 
0x6018, 0x0, 0x7e0, 0x7078, 0x0, 0x7ff, 0xf838, 0x0, 0x7ff, 0xfc18, 
0x0, 0x7ff, 0xfe00, 0x4, 0x7ff, 0xfc00, 0x0, 0x7ff, 0xf000, 0x0, 
0x7ff, 0xc3fc, 0x0, 0x7ff, 0x3f0, 0x0, 0x7fc, 0x3c0, 0x0, 0x7f0, 
0x300, 0x0, 0x7c0, 0x200, 0x0, 0x700, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3f0, 0x0, 0x0, 0x218, 
0x0, 0x0, 0x3b0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x8, 0x4000, 
0x0, 0x8, 0x6000, 0x0, 0xc, 0x6000, 0x0, 0x1, 0xc000, 0x0, 
0x0, 0x0, 0x0, 0x6000, 0x0, 0x0, 0x7000, 0x1e00, 0x0, 0x7800, 
0x7100, 0x0, 0x7e00, 0x1800, 0x8, 0x7f80, 0xe00, 0x0, 0x7fe0, 0x0, 
0x0, 0x7ff8, 0x0, 0x0, 0x7ffc, 0x0, 0x0, 0x7fff, 0x0, 0x0, 
0x7fff, 0xc000, 0x0, 0x3fff, 0xf000, 0x0, 0x1fe7, 0xfc00, 0x0, 0xf87, 
0xf000, 0x0, 0x7c7, 0xe000, 0x0, 0x3e7, 0xe000, 0x0, 0x1ff, 0xe004, 
0x0, 0x3ff, 0xf800, 0x0, 0xfff, 0xfc00, 0x0, 0x1c03, 0xf800, 0x0, 
0x1c0f, 0xc000, 0x0, 0x1c3f, 0x0, 0x0, 0x1cf8, 0x0, 0x0, 0x1df0, 
0x0, 0x0, 0x1fc0, 0x0, 0x0, 0x1e00, 0x0, 0x0, 0x1800, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x3e0, 
0x0, 0x0, 0x3f0, 0x0, 0x0, 0x218, 0x0, 0x0, 0x3b0, 0x0, 
0x0, 0x6, 0x0, 0x0, 0x8, 0x4000, 0x0, 0x8, 0x6000, 0x0, 
0xc, 0x6000, 0x0, 0x1, 0xc000, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x1e00, 0x0, 0x0, 0x7100, 0x0, 0x0, 0x1800, 
0x8, 0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x1f, 0x81f0, 
0x0, 0x1f, 0x81f8, 0x0, 0x1f, 0x80f8, 0xf00, 0x0, 0x38, 0x1c00, 
0x0, 0x18, 0x1c00, 0x0, 0x0, 0x1c04, 0x0, 0x0, 0x600, 0x0, 
0x0, 0x300, 0x0, 0x3fc, 0x0, 0x0, 0x3f0, 0x4, 0x0, 0x3c0, 
0x0, 0x0, 0x300, 0x0, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_3[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 
0x3f0, 0x0, 0x0, 0x218, 0x0, 0x0, 0x3b0, 0x0, 0x0, 0x6, 
0x0, 0x0, 0x8, 0x4000, 0x0, 0x8, 0x6000, 0x0, 0xc, 0x6000, 
0x0, 0x1, 0xc000, 0x0, 0x0, 0x0, 0x100, 0x2000, 0x0, 0x180, 
0x3000, 0x1e00, 0x1c0, 0x3800, 0x7100, 0x1e0, 0x3e00, 0x1800, 0x1f8, 0x3f80, 
0xe00, 0x1f8, 0x3fe0, 0x0, 0x1fc, 0x3ff8, 0x0, 0x1fe, 0x0, 0x0, 
0x1ff, 0x0, 0x0, 0x1ff, 0x8000, 0x0, 0x1e0, 0x4000, 0x0, 0x1e0, 
0x6018, 0x0, 0x1e0, 0x7078, 0x0, 0x1ff, 0xf838, 0x0, 0x1ff, 0xfc18, 
0x0, 0x1ff, 0xfe00, 0x4, 0x1ff, 0xfc00, 0x0, 0x1ff, 0xf000, 0x0, 
0x1ff, 0xc3fc, 0x0, 0x1ff, 0x3f0, 0x0, 0x1fc, 0x3c0, 0x0, 0x1f0, 
0x300, 0x0, 0x1c0, 0x200, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x3f0, 0x0, 0x0, 0x218, 
0x0, 0x0, 0x3b0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x8, 0x4000, 
0x0, 0x8, 0x6000, 0x0, 0xc, 0x6000, 0x0, 0x1, 0xc000, 0x0, 
0x0, 0x0, 0x0, 0x2000, 0x0, 0x0, 0x3000, 0x1e00, 0x0, 0x3800, 
0x7100, 0x0, 0x3e00, 0x1800, 0x8, 0x3f80, 0xe00, 0x0, 0x3fe0, 0x0, 
0x0, 0x3ff8, 0x0, 0x0, 0x3ffc, 0x0, 0x0, 0x3fff, 0x0, 0x0, 
0x3fff, 0xc000, 0x0, 0x3fff, 0xf000, 0x0, 0x1fe7, 0xfc00, 0x0, 0xf87, 
0xf000, 0x0, 0x7c7, 0xf000, 0x0, 0x3e7, 0xf000, 0x0, 0x1ff, 0xf004, 
0x0, 0x3ff, 0xf800, 0x0, 0xfff, 0xfc00, 0x0, 0xc03, 0xf800, 0x0, 
0xc0f, 0xc000, 0x0, 0xc3f, 0x0, 0x0, 0xcf8, 0x0, 0x0, 0xdf0, 
0x0, 0x0, 0xfc0, 0x0, 0x0, 0xe00, 0x0, 0x0, 0x800, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x3e0, 
0x0, 0x0, 0x3f0, 0x0, 0x0, 0x218, 0x0, 0x0, 0x3b0, 0x0, 
0x0, 0x6, 0x0, 0x0, 0x8, 0x4000, 0x0, 0x8, 0x6000, 0x0, 
0xc, 0x6000, 0x0, 0x1, 0xc000, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x1e00, 0x0, 0x0, 0x7100, 0x0, 0x0, 0x1800, 
0x8, 0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x1f, 0x81f0, 
0x0, 0x1f, 0x81f8, 0x0, 0x1f, 0x80f8, 0xf00, 0x0, 0x38, 0xc00, 
0x0, 0x18, 0xc00, 0x0, 0x0, 0xc04, 0x0, 0x0, 0x600, 0x0, 
0x0, 0x300, 0x0, 0x3fc, 0x0, 0x0, 0x3f0, 0x4, 0x0, 0x3c0, 
0x0, 0x0, 0x300, 0x0, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_4[]={

0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 
0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 
0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 
0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 
0x8010, 0x8000, 0x0, 0xc01b, 0x8000, 0x80, 0xe01e, 0x0, 0xc0, 0xf000, 
0x0, 0xe0, 0xf800, 0x0, 0xf0, 0x0, 0x0, 0xf8, 0x0, 0x0, 
0xfc, 0x0, 0x0, 0xfe, 0x0, 0x0, 0xc7, 0x0, 0x0, 0xc7, 
0x80c0, 0x0, 0xc7, 0xc3c0, 0x0, 0xff, 0xe0c0, 0x0, 0xff, 0xf040, 
0x0, 0xff, 0xf800, 0x4, 0xff, 0xe000, 0x0, 0xff, 0x8000, 0x0, 
0xfc, 0x1f00, 0x0, 0xf0, 0x1c00, 0x0, 0xe0, 0x1000, 0x0, 0x80, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 
0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 
0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 
0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x8010, 0x8000, 0x0, 0xc01b, 
0x8000, 0x0, 0xe01e, 0x0, 0x0, 0xf000, 0x0, 0x0, 0xf800, 0x0, 
0x0, 0xfc00, 0x0, 0x0, 0xff00, 0x0, 0x0, 0xffc0, 0x0, 0x0, 
0xffe0, 0x0, 0x0, 0xfff0, 0x0, 0x0, 0x7f38, 0x0, 0x0, 0x3c3e, 
0x0, 0x0, 0x1f3c, 0x0, 0x0, 0xfb8, 0x0, 0x0, 0x7f8, 0x4, 
0x0, 0x1ff8, 0x0, 0x0, 0x7ff8, 0x0, 0x0, 0x60fc, 0x0, 0x0, 
0x63f0, 0x0, 0x0, 0x6f80, 0x0, 0x0, 0x7f00, 0x0, 0x0, 0x7800, 
0x0, 0x0, 0x6000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 
0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 
0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 
0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 
0x0, 0x0, 0x10, 0x8000, 0x0, 0x1b, 0x8000, 0x0, 0x1e, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x380, 
0x0, 0x38, 0x7c0, 0x0, 0x38, 0x3c0, 0x0, 0x0, 0xc3, 0x8000, 
0x0, 0x47, 0x0, 0x0, 0x6, 0x4, 0x0, 0x6, 0x0, 0x0, 
0x7, 0x0, 0x0, 0x1f03, 0x8000, 0x0, 0x1c00, 0x4, 0x0, 0x1000, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_5[]={

0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 
0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 
0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 
0x4, 0x8, 0x0, 0x4, 0x0, 0x0, 0x6, 0xf, 0x0, 0x6, 
0x2010, 0x8000, 0x7, 0x201b, 0x8000, 0x7, 0x301e, 0x0, 0x7, 0x3800, 
0x0, 0x7, 0xbc00, 0x0, 0x7, 0xbe00, 0x0, 0x7, 0xbf00, 0x0, 
0x7, 0x8000, 0x0, 0x6, 0x8000, 0x0, 0x6, 0x8000, 0x0, 0x6, 
0x8000, 0x0, 0x6, 0x8800, 0x0, 0x7, 0xc000, 0x0, 0x7, 0xc000, 
0x0, 0x7, 0xc000, 0x4, 0x7, 0x8000, 0x0, 0x7, 0x8000, 0x0, 
0x7, 0x8000, 0x0, 0x7, 0x0, 0x0, 0x7, 0x0, 0x0, 0x7, 
0x0, 0x0, 0x7, 0x0, 0x0, 0x6, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 
0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 
0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 
0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x2010, 0x8000, 0x0, 0x201b, 
0x8000, 0x0, 0x301e, 0x0, 0x0, 0x3800, 0x0, 0x0, 0x3c00, 0x0, 
0x0, 0x3e00, 0x0, 0x0, 0x3f00, 0x0, 0x0, 0x7f80, 0x0, 0x0, 
0x7fc0, 0x0, 0x0, 0x7fe0, 0x0, 0x0, 0x7ff0, 0x0, 0x0, 0x71e0, 
0x0, 0x0, 0x3980, 0x0, 0x0, 0x3980, 0x0, 0x0, 0x3d80, 0x4, 
0x0, 0x7f80, 0x0, 0x0, 0x7fe0, 0x0, 0x0, 0x43c0, 0x0, 0x0, 
0xcf80, 0x0, 0x0, 0xdf00, 0x0, 0x1, 0xfc00, 0x0, 0x1, 0xf800, 
0x0, 0x0, 0xf000, 0x0, 0x0, 0xc000, 0x0, 0x0, 0xc000, 0x0, 
0x0, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 
0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 
0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 
0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 
0x0, 0x0, 0x10, 0x8000, 0x0, 0x1b, 0x8000, 0x0, 0x1e, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1c00, 
0x0, 0x1, 0x1e00, 0x0, 0x1, 0x81c, 0x0, 0x0, 0x70, 0x0, 
0x0, 0x40, 0x0, 0x0, 0x40, 0x4, 0x0, 0x70, 0x0, 0x0, 
0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 
0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_6[]={

0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 
0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 
0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 
0x4, 0x8, 0x0, 0x4, 0x0, 0x0, 0x6, 0xf, 0x0, 0x6, 
0x2010, 0x8000, 0x7, 0x201b, 0x8000, 0x7, 0x301e, 0x0, 0x7, 0xb000, 
0x0, 0x7, 0xb800, 0x0, 0x7, 0xfc00, 0x0, 0x7, 0xfc00, 0x0, 
0x7, 0x8000, 0x0, 0x7, 0x0, 0x0, 0x7, 0x8000, 0x0, 0x7, 
0x8000, 0x0, 0x7, 0x9800, 0x0, 0x7, 0x9800, 0x0, 0x7, 0x1000, 
0x0, 0x7, 0x0, 0x4, 0x7, 0x0, 0x0, 0x7, 0x0, 0x0, 
0x7, 0x0, 0x0, 0x7, 0x0, 0x0, 0x7, 0x0, 0x0, 0x7, 
0x0, 0x0, 0x7, 0x0, 0x0, 0x6, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x4, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x2000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 
0x0, 0x0, 0x7800, 0x0, 0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 
0x0, 0x44, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 
0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x2010, 0x8000, 0x0, 0x201b, 
0x8000, 0x0, 0x301e, 0x0, 0x0, 0x3000, 0x0, 0x0, 0x3800, 0x0, 
0x0, 0x7c00, 0x0, 0x0, 0x7c00, 0x0, 0x0, 0x7e00, 0x0, 0x0, 
0xff00, 0x0, 0x0, 0x7f00, 0x0, 0x0, 0x7f80, 0x0, 0x0, 0x4780, 
0x0, 0x0, 0x6780, 0x0, 0x0, 0xe980, 0x0, 0x0, 0xe080, 0x4, 
0x0, 0xe000, 0x0, 0x0, 0xe000, 0x0, 0x0, 0xf000, 0x0, 0x0, 
0xf900, 0x0, 0x0, 0xfe00, 0x0, 0x1, 0xfc00, 0x0, 0x1, 0xf000, 
0x0, 0x0, 0xe000, 0x0, 0x0, 0xc000, 0x0, 0x0, 0xc000, 0x0, 
0x0, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x2000, 0x0, 0x0, 0x7800, 
0x0, 0x0, 0x800, 0x0, 0x0, 0x9000, 0x0, 0x0, 0x7800, 0x0, 
0x0, 0x30, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x44, 0x0, 0x0, 
0x7c, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 
0x0, 0x0, 0x10, 0x8000, 0x0, 0x1b, 0x8000, 0x0, 0x1e, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3800, 
0x0, 0x0, 0x3800, 0x0, 0x0, 0x1800, 0x0, 0x0, 0x1800, 0x0, 
0x0, 0x1600, 0x0, 0x0, 0x1f00, 0x4, 0x0, 0x1180, 0x0, 0x0, 
0x1980, 0x0, 0x0, 0xf00, 0x0, 0x0, 0x600, 0x4, 0x0, 0x0, 
0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_7[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 
0x6300, 0x0, 0x0, 0x1880, 0x0, 0x0, 0x1980, 0x0, 0x2, 0xe00, 
0x0, 0x3, 0x0, 0x0, 0x3, 0x8000, 0x0, 0x3, 0x8000, 0x0, 
0x3, 0xc000, 0x0, 0x3, 0xc3e0, 0x0, 0x3, 0xe420, 0x0, 0x3, 
0xe610, 0x0, 0x3, 0xf1f0, 0x0, 0x3, 0xf800, 0x0, 0x3, 0xf000, 
0x0, 0x3, 0xf800, 0x0, 0x3, 0xfc00, 0x0, 0x0, 0x200, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x3, 0xc780, 0x0, 0x3, 0x8380, 0x0, 0x3, 0x100, 
0x0, 0x0, 0x0, 0x4, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x4000, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7000, 0x0, 0x0, 0x7000, 
0x0, 0x0, 0x7000, 0x0, 0x0, 0x7000, 0x0, 0x0, 0x6000, 0x0, 
0x0, 0x6000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 0x6300, 0x0, 0x0, 0x1880, 
0x0, 0x0, 0x1980, 0x0, 0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x3e0, 0x0, 0x0, 0x420, 0x0, 0x0, 0x610, 0x0, 0x0, 0xc1f0, 
0x0, 0x0, 0xe000, 0x0, 0x0, 0xf000, 0x0, 0x0, 0xf800, 0x0, 
0x1, 0xfc00, 0x0, 0x3, 0xfe00, 0x0, 0x7, 0xfe00, 0x0, 0x7, 
0xff00, 0x0, 0x7, 0xffc0, 0x0, 0x7, 0xffc0, 0x0, 0x4, 0x3800, 
0x0, 0x4, 0x7c80, 0x0, 0x4, 0xfe80, 0x0, 0x3, 0xc380, 0x4, 
0x3, 0xc380, 0x0, 0x3, 0xc300, 0x0, 0x3, 0xfe00, 0x0, 0x1, 
0xfe00, 0x0, 0x0, 0xf800, 0x0, 0x0, 0x3800, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 
0x0, 0x0, 0x6300, 0x0, 0x0, 0x1880, 0x0, 0x0, 0x1980, 0x0, 
0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x420, 
0x0, 0x0, 0x610, 0x0, 0x0, 0x1f0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8100, 0x0, 0x3, 0x87c0, 
0x0, 0x3, 0xc7c0, 0x0, 0x3, 0xc780, 0x0, 0x3, 0x8380, 0x0, 
0x3, 0x100, 0x0, 0x0, 0x3c00, 0x4, 0x0, 0x3400, 0x0, 0x0, 
0x3c00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x2000, 0x0, 0x0, 0x0, 0x0, };


short image_8[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 
0x6300, 0x0, 0x80, 0x1880, 0x0, 0x2, 0x1980, 0x0, 0x3, 0xe00, 
0x0, 0x3, 0x8000, 0x0, 0x3, 0xc000, 0x0, 0x3, 0xe000, 0x0, 
0x3, 0xf000, 0x0, 0x3, 0xfbe0, 0x0, 0x3, 0xfc20, 0x0, 0x0, 
0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x8, 0x0, 0xfe, 0x3f0, 0x0, 0x5c, 0x1f0, 0x0, 0x7c, 0x1e0, 
0x0, 0x3c, 0xc0, 0x4, 0x38, 0xc0, 0x0, 0x18, 0xc0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x7c01, 0x4000, 0x0, 0x7c00, 0x0, 0x0, 
0x7c00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7000, 0x0, 
0x0, 0x6000, 0x0, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 0x6300, 0x0, 0x80, 0x1880, 
0x0, 0x0, 0x1980, 0x0, 0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 
0x83e0, 0x0, 0x1, 0xc020, 0x0, 0xf, 0xffd0, 0x0, 0x1f, 0xffe0, 
0x0, 0x3f, 0xfff0, 0x0, 0xff, 0xfff8, 0x0, 0x1ff, 0xfffc, 0x0, 
0x3ff, 0xfffe, 0x0, 0x7ff, 0xffff, 0x0, 0x7ff, 0xffff, 0x0, 0xfff, 
0xffff, 0x8000, 0xfff, 0xffff, 0x8000, 0xfff, 0xffff, 0x8000, 0xf00, 0xfc07, 
0x8000, 0xf81, 0xfe0f, 0x8000, 0xf83, 0xfe1f, 0x8000, 0xfc3, 0xff3f, 0x8004, 
0xfc7, 0xff3f, 0x8000, 0x7e7, 0x833f, 0x0, 0x7ff, 0x1ff, 0x0, 0x3ff, 
0x7dfe, 0x0, 0xff, 0x7dfc, 0x0, 0x7f, 0x7df8, 0x0, 0x3f, 0x1f0, 
0x0, 0xf, 0x83c0, 0x0, 0x3, 0xff80, 0x0, 0x0, 0xfc00, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 
0x0, 0x0, 0x6300, 0x0, 0x80, 0x1880, 0x0, 0x0, 0x1980, 0x0, 
0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x20, 
0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 
0x1c0, 0x0, 0x3e, 0x3e0, 0x0, 0xff, 0x3f0, 0x0, 0xff, 0x3f0, 
0x0, 0xff, 0x3f8, 0x0, 0xfe, 0x3f0, 0x0, 0x5c, 0x1f0, 0x0, 
0x7c, 0x1e0, 0x0, 0x3c, 0xc0, 0x4, 0x38, 0xc0, 0x0, 0x18, 
0x7cc0, 0x0, 0x0, 0xfe00, 0x0, 0x0, 0xfe01, 0x4004, 0x0, 0xfe00, 
0x0, 0x0, 0xfe00, 0x0, 0x0, 0xfe00, 0x0, 0x0, 0x7c00, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };


short image_9[]={

0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 
0x6300, 0x0, 0x80, 0x1880, 0x0, 0x2, 0x1980, 0x0, 0x3, 0xe00, 
0x0, 0x3, 0x8000, 0x0, 0x3, 0xc000, 0x0, 0x3, 0xe000, 0x0, 
0x3, 0xf000, 0x0, 0x3, 0xfbe0, 0x0, 0x3, 0xfc20, 0x0, 0x0, 
0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x8, 0x0, 0xfe, 0x3f0, 0x0, 0x5c, 0x1f0, 0x0, 0x7c, 0x1e0, 
0x0, 0x3c, 0xc0, 0x4, 0x38, 0xc0, 0x0, 0x18, 0xc0, 0x0, 
0x0, 0x1c00, 0x0, 0x0, 0x7e00, 0x0, 0x0, 0x7e00, 0x4000, 0x0, 
0x3c00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x7800, 0x0, 0x0, 0x7000, 0x0, 
0x0, 0x6000, 0x0, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x4, 0x0, 
0x0, 0x0, 0x0, 0x7c00, 0x0, 0x0, 0x6300, 0x0, 0x80, 0x1880, 
0x0, 0x0, 0x1980, 0x0, 0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 
0x83e0, 0x0, 0x1, 0xc020, 0x0, 0x1f, 0xfff0, 0x0, 0x3f, 0xfff8, 
0x0, 0x7f, 0xfffc, 0x0, 0x1ff, 0xffff, 0x0, 0x3ff, 0xffff, 0x8000, 
0x7ff, 0xffff, 0xc000, 0x1fff, 0xffff, 0xc000, 0x1fff, 0xffff, 0xe000, 0x3fff, 
0xffff, 0xf000, 0x3fff, 0xffff, 0xf800, 0x3fff, 0xffff, 0xf800, 0x3f00, 0xfc07, 
0xf800, 0x3f81, 0xfe0f, 0xf800, 0x3f83, 0xfe1f, 0xf800, 0x3fc3, 0xff3f, 0xf804, 
0x3fc7, 0xff3f, 0xf800, 0x1fe7, 0x813f, 0xf800, 0xffe, 0x1c7f, 0xf000, 0x7fe, 
0x7e7f, 0xe000, 0x1fe, 0x7e7f, 0xc000, 0xfe, 0x3c7e, 0x0, 0x3f, 0xfc, 
0x0, 0x1f, 0x83f0, 0x0, 0x7, 0xffc0, 0x0, 0x1, 0xff80, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x7c00, 
0x0, 0x0, 0x6300, 0x0, 0x80, 0x1880, 0x0, 0x0, 0x1980, 0x0, 
0x0, 0xe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0, 0x0, 0x0, 0x20, 
0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 
0x1c0, 0x0, 0x3e, 0x3e0, 0x0, 0xff, 0x3f0, 0x0, 0xff, 0x3f0, 
0x0, 0xff, 0x3f8, 0x0, 0xfe, 0x3f0, 0x0, 0x5c, 0x1f0, 0x0, 
0x7c, 0x1e0, 0x0, 0x3c, 0xc0, 0x4, 0x38, 0xc0, 0x0, 0x18, 
0x7ec0, 0x0, 0x1, 0xff80, 0x0, 0x1, 0xff80, 0x4, 0x1, 0xff80, 
0x4000, 0x1, 0xff80, 0x0, 0x0, 0xff00, 0x0, 0x0, 0x7c00, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };




extern fishMRoutine();

extern struct AnimComp fish1Comp, fish2Comp, fish3Comp, fish4Comp, fish5Comp,fish6Comp,fish7Comp,fish8Comp,fish9Comp,fish10Comp,fish11Comp,fish12Comp,fish13Comp,fish14Comp,fish15Comp,fish16Comp,fish17Comp;
extern struct Bob fish1Bob, fish2Bob, fish3Bob, fish4Bob, fish5Bob,fish6Bob,fish7Bob,fish8Bob,fish9Bob,fish10Bob,fish11Bob,fish12Bob,fish13Bob,fish14Bob,fish15Bob,fish16Bob,fish17Bob;
extern struct VSprite fish1Sprite, fish2Sprite, fish3Sprite, fish4Sprite, fish5Sprite,fish6Sprite,fish7Sprite,fish8Sprite,fish9Sprite, fish10Sprite,fish11Sprite,fish12Sprite,fish13Sprite,fish14Sprite,fish15Sprite,fish16Sprite,fish17Sprite;

/* animation object file */
struct AnimOb fishOb =
{
	NULL, NULL,		/* next and prev animation object */
	0,					/* clock */
	0, 0,				/* old y x coords */
	0, 0,				/* y x coords */
	0, 0,				/* y x vels */
	0, 0,				/* y x accels */
	0, 0,
	&fishMRoutine,		/* main anim routine */
	&fish1Comp,			/* routine */
};

extern fish1Routine();

struct AnimComp fish1Comp =
{
	0, /* flags */
	0, /* timer */
	0, /* timeset */
	NULL, NULL,	 		/* before, after */
	&fish2Comp, &fish17Comp,	/* next, prev */
	&fish1Routine,				/* routine */
	0, 0,				/* x y transforms */
	&fishOb,			/* head anim object */
	&fish1Bob,			/* bob */
};

/* bob data file */
struct Bob fish1Bob =
{
/*	NULL,   savePlaness */
	0, /* flags */
	NULL, NULL,			/* preserve buffers */
	NULL, NULL,			/* before, after */
	&fish1Sprite,		/* vSprite */
	&fish1Comp,		/* animComp */
	NULL,
};

/* vSprite data file */
struct VSprite fish1Sprite =
{
	NULL, NULL,			/* next/prev */
	NULL, NULL,			/* draw/clear */
	0, 0,
	OVERLAY+SAVEBACK,	/* vSFlags */
	0, 0,			/* positions */
	42, 3, 3,			/* height, width & depth */
	0, 0,				/* meMask, hitMask */
	image_1,		/* image */
	NULL, NULL,			/* dummy collision masks */
	NULL,				/* vSprite colors */
	&fish1Bob,			/* bob */
	0x7, 0x0,			/* PlanesPick, PlanesOnOff */
};

/* Happy Imaging!  =RJM= */
/* animation component file */
struct AnimComp fish2Comp =
{
	0, /* flags */
	0, /* timer */
	0, /* timeset */
	NULL, NULL,	 		/* before, after */
	&fish3Comp, &fish1Comp,	/* next, prev */
	NULL,				/* routine */
	0, 0,				/* x y transforms */
	&fishOb,			/* head anim object */
	&fish2Bob,			/* bob */
};

/* bob data file */
struct Bob fish2Bob =
{
/*	NULL,  savePlaness */
	0, /* flags */
	NULL, NULL,			/* preserve buffers */
	NULL, NULL,			/* before, after */
	&fish2Sprite,		/* vSprite */
	&fish2Comp,		/* animComp */
	NULL,
};

/* vSprite data file */
struct VSprite fish2Sprite =
{
	NULL, NULL,			/* next/prev */
	NULL, NULL,			/* draw/clear */
	0, 0,
	OVERLAY+SAVEBACK,	/* vSFlags */
	0, 0,			/* positions */
	42, 3, 3,			/* height, width & depth */
	0, 0,				/* meMask, hitMask */
	image_2,		/* image */
	NULL, NULL,			/* dummy collision masks */
	NULL,				/* vSprite colors */
	&fish2Bob,			/* bob */
	0x7, 0x0,			/* PlanesPick, PlanesOnOff */
};

/* Happy Imaging!  =RJM= */
/* animation component file */
struct AnimComp fish3Comp =
{
	0, /* flags */
	0, /* timer */
	0, /* timeset */
	NULL, NULL,	 		/* before, after */
	&fish4Comp, &fish2Comp,	/* next, prev */
	NULL,				/* routine */
	0, 0,				/* x y transforms */
	&fishOb,			/* head anim object */
	&fish3Bob,			/* bob */
};

/* bob data file */
struct Bob fish3Bob =
{
	/*NULL,  savePlaness */
	0, /* flags */
	NULL, NULL,			/* preserve buffers */
	NULL, NULL,			/* before, after */
	&fish3Sprite,		/* vSprite */
	&fish3Comp,		/* animComp */
	NULL,
};

/* vSprite data file */
struct VSprite fish3Sprite =
{
	NULL, NULL,			/* next/prev */
	NULL, NULL,			/* draw/clear */
	0, 0,
	OVERLAY+SAVEBACK,	/* vSFlags */
	0, 0,			/* positions */
	42, 3, 3,			/* height, width & depth */
	0, 0,				/* meMask, hitMask */
	image_3,		/* image */
	NULL, NULL,			/* dummy collision masks */
	NULL,				/* vSprite colors */
	&fish3Bob,			/* bob */
	0x7, 0x0,			/* PlanesPick, PlanesOnOff */
};

/* Happy Imaging!  =RJM= */

/* animation component file */
struct AnimComp fish4Comp =
{
	0, /* flags */
	0, /* timer */
	0, /* timeset */
	NULL, NULL,	 		/* before, after */
	&fish5Comp, &fish3Comp,	/* next, prev */
	NULL,				/* routine */
	0, 0,				/* x y transforms */
	&fishOb,			/* head anim object */
	&fish4Bob,			/* bob */
};

/* bob data file */
struct Bob fish4Bob =
{
/*	NULL,  savePlaness */
	0, /* flags */
	NULL, NULL,			/* preserve buffers */
	NULL, NULL,			/* before, after */
	&fish4Sprite,		/* vSprite */
	&fish4Comp,		/* animComp */
	NULL,
};

/* vSprite data file */
struct VSprite fish4Sprite =
{
	NULL, NULL,			/* next/prev */
	NULL, NULL,			/* draw/clear */
	0, 0,
	OVERLAY+SAVEBACK,	/* vSFlags */
	0, 0,			/* positions */
	42, 3, 3,			/* height, width & depth */
	0, 0,				/* meMask, hitMask */
	image_4,		/* image */
	NULL, NULL,			/* dummy collision masks */
	NULL,				/* vSprite colors */
	&fish4Bob,			/* bob */
	0x7, 0x0,			/* PlanesPick, PlanesOnOff */
};

/* Happy Imaging!  =RJM= */

/* animation component file */
struct AnimComp fish5Comp =
{
	0, /* flags */
	0, /* timer */
	0, /* timeset */
	NULL, NULL,	 		/* before, after */
	&fish6Comp, &fish4Comp,	/* next, prev */
	NULL,				/* routine */
	0, 0,				/* x y transforms */
	&fishOb,			/* head anim object */
	&fish5Bob,			/* bob */
};

/* bob data file */
struct Bob fish5Bob =
{
/*	NULL,  savePlaness */
	0, /* flags */
	NULL, NULL,			/* preserve buffers */
	NULL, NULL,			/* before, after */
	&fish5Sprite,		/* vSprite */
	&fish5Comp,		/* animComp */
	NULL,
};

/* vSprite data file */
struct VSprite fish5Sprite =
{
	NULL, NULL,			/* next/prev */
	NULL, NULL,			/* draw/clear */
	0, 0,
	OVERLAY+SAVEBACK,	/* vSFlags */
	0, 0,			/* positions */
	42, 3, 3,			/* height, width & depth */
	0, 0,				/* meMask, hitMask */
	image_5,		/* image */
	NULL, NULL,			/* dummy collision masks */
	NULL,				/* vSprite colors */
	&fish5Bob,			/* bob */
	0x7, 0x0,			/* PlanesPick, PlanesOnOff */
};

/* Happy Imaging!  =RJM= */
/* Happy Imaging!  =RJM= */
 
/* animation component file */
struct AnimComp fish6Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish7Comp, &fish5Comp, /* next, prev */
    NULL,               /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish6Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish6Bob =
{
/*  NULL,  savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish6Sprite,       /* vSprite */
    &fish6Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish6Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_6,     /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish6Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* Happy Imaging!  =RJM= */
 
/* animation component file */
struct AnimComp fish7Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish8Comp, &fish6Comp, /* next, prev */
    NULL,               /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish7Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish7Bob =
{
/*  NULL,  savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish7Sprite,       /* vSprite */
    &fish7Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish7Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_7,     /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish7Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* Happy Imaging!  =RJM= */
 
/* animation component file */
struct AnimComp fish8Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish9Comp, &fish7Comp, /* next, prev */
    NULL,               /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish8Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish8Bob =
{
/*  NULL,  savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish8Sprite,       /* vSprite */
    &fish8Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish8Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_8,     /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish8Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* Happy Imaging!  =RJM= */
 
/* animation component file */
struct AnimComp fish9Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish10Comp, &fish8Comp, /* next, prev */
    NULL,               /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish9Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish9Bob =
{
/*  NULL,  savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish9Sprite,       /* vSprite */
    &fish9Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish9Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_9,     /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish9Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* Happy Imaging!  =RJM= */
 
/* animation component file */
struct AnimComp fish10Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish11Comp, &fish9Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish10Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish10Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish10Sprite,       /* vSprite */
    &fish10Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish10Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_8,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish10Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
 
/* animation component file */
struct AnimComp fish11Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish12Comp, &fish10Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish11Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish11Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish11Sprite,       /* vSprite */
    &fish11Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish11Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_7,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish11Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};

/* animation component file */
struct AnimComp fish12Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish13Comp, &fish11Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish12Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish12Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish12Sprite,       /* vSprite */
    &fish12Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish12Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_6,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish12Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* animation component file */
struct AnimComp fish13Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish14Comp, &fish12Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish13Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish13Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish13Sprite,       /* vSprite */
    &fish13Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish13Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_5,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish13Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};
/* animation component file */
struct AnimComp fish14Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish15Comp, &fish13Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish14Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish14Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish14Sprite,       /* vSprite */
    &fish14Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish14Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_4,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish14Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};

/* animation component file */
struct AnimComp fish15Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish16Comp, &fish14Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish15Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish15Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish15Sprite,       /* vSprite */
    &fish15Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish15Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_3,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish15Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};



/* animation component file */
struct AnimComp fish16Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish17Comp, &fish15Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish16Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish16Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish16Sprite,       /* vSprite */
    &fish16Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish16Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_2,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish16Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};

/* animation component file */
struct AnimComp fish17Comp =
{
    0, /* flags */
    0, /* timer */
    0, /* timeset */
    NULL, NULL,         /* before, after */
    &fish1Comp, &fish16Comp, /* next, prev */
    NULL,              /* routine */
    0, 0,               /* x y transforms */
    &fishOb,            /* head anim object */
    &fish17Bob,          /* bob */
};
 
/* bob data file */
struct Bob fish17Bob =
{
/*  NULL,   savePlaness */
    0, /* flags */
    NULL, NULL,         /* preserve buffers */
    NULL, NULL,         /* before, after */
    &fish17Sprite,       /* vSprite */
    &fish17Comp,     /* animComp */
    NULL,
};
 
/* vSprite data file */
struct VSprite fish17Sprite =
{
    NULL, NULL,         /* next/prev */
    NULL, NULL,         /* draw/clear */
    0, 0,
    OVERLAY+SAVEBACK,   /* vSFlags */
    0, 0,           /* positions */
    42, 3, 3,           /* height, width & depth */
    0, 0,               /* meMask, hitMask */
    image_1,        /* image */
    NULL, NULL,         /* dummy collision masks */
    NULL,               /* vSprite colors */
    &fish17Bob,          /* bob */
    0x7, 0x0,           /* PlanesPick, PlanesOnOff */
};


/***************************************************************/
