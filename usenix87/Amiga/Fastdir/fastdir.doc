
This release made to V/internal/aug by Rob Peck 5/13/86.

/* fastdir.c */

/* *********************************************************************** */
/* Fastdir was designed to be a faster implementation of the "DIR" command
 * for directories that have a large number of items in them, such as c:
 *
 * It is implemented as follows:
 * 
 * 	command:  FASTDIR 
 *	or	  FASTDIR <pathname>
 *
 * If there is a file by the name ".dir" in the selected or current path
 * name, fastdir checks the creation date of this .dir file (stored as the
 * first line in the file itself) against the modification date of its 
 * parent directory.  If they match exactly, it means that ".dir" contains 
 * the (near) equivalent of somebody doing a command "DIR > .dir" within this
 * directory.  If the creation/modification dates don't match, fastdir
 * attempts to create such a file.  After either finding or creating
 * this file, it copies ".dir" to the standard output.
 * 
 * Fastdir handles most known error conditions, such as: 
 *
 * write-protected disk 
 *     (outputs the generated listing equivalent to DIR without writing
 * 	or rewriting the .dir file).
 * trying to get a directory of a nonexistent file
 * 	(responds "can't find <pathname>")
 * trying to generate a directory listing of a file
 * 	(responds "<pathname> is not a directory")
 * trying to generate a listing of an empty directory
 * 	(responds "Directory '<pathname>' is empty.)
 *
 * Could use some error checking around the Write commands to handle
 * too-full disks, or a write error while generating ".dir".  Anybody
 * out there want to add these?  
 *
 * Fastdir does not implement DIR's "OPT" option. (OPT A, OPT I)
 * 
 * Fastdir modifies the DIR output slightly in that directories are NOT
 * listed separately, but are merged alphabetically into the normal
 * sorted alpha listing, still marked " (dir)" as they should be marked. 
 *
 * Author:  Rob Peck 5/13/86
 *
 * Lattice/Amiga C (3.03) linking information:
 *
 * 	compile with stack checking code disabled in pass 2 (lc2 -v file.q)
 * 
 * FROM lib:Astartup.obj fastdir.o filecurrent.o tree.o treeprint.o
 * TO fastdir
 * LIBRARY lib:amiga.lib, lib:lc.lib 
 *
 */


