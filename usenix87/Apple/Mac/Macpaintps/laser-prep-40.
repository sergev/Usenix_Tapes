%!
%0000000000
% (c) CopyRight Apple Computer, Inc. 1984, 1985   All Rights Reserved.
%{appledict version #40
%serverdict begin exitserver
systemdict /currentpacking known{currentpacking true setpacking}if
/LW{save statusdict /product get(LaserWriter)anchorsearch
exch pop{length 0 eq{1}{2}ifelse}{0}ifelse exch restore}bind def
/LW+{LW 2 eq}bind def
/ok{systemdict /statusdict known dup{LW 0 gt and}if}bind def
%ok{statusdict begin 9 sccinteractive 3 ne exch 0 ne or{9 0 3 setsccinteractive}if
%waittimeout 300 lt{/waittimeout 300 def}if end}if
/md 250 dict def md begin
/av 40 def
/T true def
/F false def
/ci 0 def
/ml 0 def
/al 0 def
/tg 0 def
/sb 500 string def
/mtx matrix def
/s75 75 string def
/s8 8 string def
/s1 ( ) def
/pxs 1 def
/pys 1 def
/nlw .24 def
/ppr [-32 -29.52 762 582.48] def
/pgs 1320 def
/por true def
/xb 500 array def
/so true def
/fillflag false def
/pnm 1 def
/fmv true def
/sfl false def
/ma 0 def
/fkb true def
/fg (Rvd\001\001\000\000\177) def
/bdf{bind def}bind def
/xdf{exch def}bdf
/xl{neg exch neg translate}bdf
/fp{pnsh 0 ne pnsv 0 ne and}bdf
/vrb[
{fp{gsave 1 setlinewidth pnsh pnsv scale stroke grestore}if newpath}bind
/eofill load
dup
/newpath load
2 index
dup
{clip newpath}bind
{}bind
dup
2 copy
]def
currentscreen /spf xdf /rot xdf /freq xdf
/doop{vrb exch get exec}bdf
/psu{/pgs xdf 2 index .72 mul exch div /pys xdf div .72 mul /pxs xdf ppr astore pop /por xdf sn and /so xdf}bdf
/txpose{userdict /note known pgs 1680 eq 1 index and{legal}if
pgs 1212 eq{dup{note}if 54 32.4 translate}if pgs 1403 eq userdict /a4small known and{a4small}if
pgs 1320 eq and{note}if pxs pys scale ppr aload pop por{pop exch neg exch translate pop}
{translate pop pop 270 rotate}ifelse 1 -1 scale}bdf
/fr{3 index 3 index xl ppr aload pop 3 -1 roll 2 mul add 3 1 roll exch 2 mul add
6 2 roll 3 -1 roll sub 3 1 roll exch sub 3 1 roll exch 3 -1 roll div 3 1 roll div exch scale}bdf
/lws{show}bdf
/tv{show pop pop}bdf
/obl{{0.212557 mul}{pop 0}ifelse}bdf
/pw{fg 7 /PreserveWidth kif{pop}{127}ifelse put}bdf
/sfd{ps fg 5 -1 roll get mul 100 div 0 ps 5 -1 roll obl ps neg 0 0 6a astore makefont setfont}bdf
/fnt{findfont sfd}bdf
/bt{sa 3 1 roll 3 index and put}bdf
/sa(\000\000\000\000\000\000\000\000\000)def
/fs{0 1 bt 1 2 bt 2 4 bt 3 8 bt 4 16 bt 5 32 bt 6 64 bt 7 128 bt sa exch 8 exch put}bdf
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/dgf{fg 7 get currentfont}bdf
/gf{}bdf
/bu{currentpoint currentgray currentlinewidth currentlinecap currentlinejoin currentdash exch aload length
fg 5 sfl{1}{0}ifelse put ml al tg ci pnsv pnsh
2t aload pop 3a aload pop mx2 aload pop mx1 aload pop mtx currentmatrix aload pop
mx3 aload pop ps pm restore /ps xdf mx3 astore pop}bdf
/bn{/pm save def mx3 setmatrix newpath 0 0 moveto ct dup 39 get 0 exch getinterval cvx exec
mtx astore setmatrix mx1 astore pop mx2 astore pop 3a astore pop
2t astore pop /pnsh xdf /pnsv xdf gw /ci xdf /tg xdf /al xdf /ml xdf
/sfl fg 5 get 0 ne def array astore exch setdash setlinejoin setlinecap
setlinewidth setgray moveto}bdf
/fc{save vmstatus exch sub 50000 lt
{(%%[|0|]%%)=print flush}if pop restore}bdf
/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}bdf
/3a [0 0 0] def
/2t 2 array def
/tp{3a astore pop}bdf
/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy translate 3a aload pop exch dup 0 eq
{pop}{1 eq{-1 1}{1 -1}ifelse scale}ifelse rotate pop neg exch neg exch translate moveto}bdf
/te{mx2 setmatrix}bdf
/dtb{/fkb false def /tg currentgray def /ci 0 def /ml 0 def /al 0 def 3 eq{1 setgray}if}bdf
/tb{3 eq{1 setgray}if pop pop pop}bdf
/dam{ml add /ml xdf dup length sb exch ci exch dup
ci add /ci xdf getinterval copy dup wi pop dup al add /al xdf
currentgray{setgray dup ml mul 3 -1 roll rs}}bdf
/am{pop sa 2 get 0 ne{dup wi pop dup 3 -1 roll rs}{show}ifelse}bdf
/th{3 -1 roll div 3 1 roll exch div 2 copy mx1 scale pop scale /sfl true def}bdf
/tu{1 1 mx1 itransform scale /sfl false def}bdf
/ts{1 1 mx1 transform scale /sfl true def}bdf
/fz{/ps xdf}bdf
/dfs{dup fs{fs}}bdf
/dfz{dup fz{fz}}bdf
/tm{save exch{dup type dup /arraytype eq exch /packedarraytype eq or
{exec}{dup type /dicttype eq{fkb{setfont fg exch 7 exch put}{pop pop}ifelse}if}ifelse}forall
currentpoint 3 -1 roll restore moveto}bdf
/dkb{counttomark xb exch 0 exch getinterval astore exch pop es}bdf
/kb{}bdf
/dv{dup 0 ne{div}{pop}ifelse}bdf
/es{3 -1 roll dup sa 8 get
sa 1 get 0 ne{/ml ml .2 ps mul sub def}if
ne{fs}{pop}ifelse exch dup 1 eq
{pop /tv al ml gt{/ll load /ml ml al dv def}{{show pop pop}/ml 1 def}ifelse def}{dup 3 eq
{pop /tv al ml gt{/ll load /ml ml al dv def}{ml al sub 0 rmoveto{show pop pop}/ml 1 def}ifelse def}{2 eq
{/tv al ml gt{/ll load /ml ml al dv def}{ml al sub 2 div 0 rmoveto{show pop pop}/ml 1 def}ifelse def}
{/tv /ll load /ml ml al dv def def}ifelse}ifelse}ifelse tm tg setgray}bdf
/pop4{pop pop pop pop}bdf
/it{sfl{mx1 itransform}if}bdf
/gm{exch it moveto}bdf
/lm{dlm exec}bdf
/dlm{{pop currentpoint sfl{mx1 transform}if exch pop sub 0 exch it rmoveto}}bdf
/fm{statusdict /manualfeed known}bdf
/se{statusdict exch /manualfeed exch put}bdf
/mf{dup /ma exch def 0 gt{fm se /t1 5 st ok ma 1 gt and{/t2 0 st /t3 0 st
statusdict /manualfeedtimeout 3600 put
}if}if}bdf
/jn{ok{statusdict exch /jobname exch put}{pop}ifelse}bdf
/pen{pnm mul /pnsh xdf pnm mul /pnsv xdf pnsh setlinewidth}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/dh{fg 6 1 put array astore exch pop exch pop exch setdash}bdf
/ih[currentdash]def
/rh{fg 6 0 put ih aload pop setdash}bdf
/dl{gsave nlw pys div setlinewidth 0 setgray}bdf
/dlin{exch currentpoint newpath moveto lineto currentpoint stroke grestore moveto}bdf
/lin{fg 6 get 0 ne{lineto currentpoint 0 doop moveto}
{exch currentpoint /pnlv xdf /pnlh xdf gsave newpath /@y xdf /@x xdf fp{pnlh @x lt{pnlv @y ge
{pnlh pnlv moveto @x @y lineto pnsh 0 rlineto
0 pnsv rlineto pnlh pnsh add pnlv pnsv add lineto pnsh neg 0 rlineto}
{pnlh pnlv moveto pnsh 0 rlineto @x pnsh add @y lineto 0 pnsv rlineto
pnsh neg 0 rlineto pnlh pnlv pnsv add lineto}ifelse}{pnlv @y gt
{@x @y moveto pnsh 0 rlineto pnlh pnsh add pnlv lineto 0 pnsv rlineto
pnsh neg 0 rlineto @x @y pnsv add lineto}{pnlh pnlv moveto pnsh 0 rlineto
0 pnsv rlineto @x pnsh add @y pnsv add lineto pnsh neg 0 rlineto
0 pnsv neg rlineto}ifelse}ifelse
closepath fill}if @x @y grestore moveto}ifelse}bdf
/gw{/pnm fg 3 get fg 4 get div def}bdf
/lw{fg exch 4 exch put fg exch 3 exch put gw pnsv pnsh pen}bdf
/barc{/@f xdf /@op xdf /@e xdf /@s xdf /@r xdf
/@b xdf /@l xdf /@t xdf gsave
@r @l add 2 div @b @t add 2 div translate newpath 0 0 moveto
@r @l sub @b @t sub mtx currentmatrix pop scale @f{newpath}if
0 0 0.5 @s @e arc
mtx setmatrix @op doop grestore}bdf
/ar{dup 0 eq barc}bdf
/ov{0 exch 360 exch true barc}bdf
/rc{/@op xdf currentpoint 6 2 roll newpath 4 copy
4 2 roll exch moveto 6 -1 roll lineto lineto lineto closepath
@op doop moveto}bdf
/mup{dup pnsh 2 div le exch pnsv 2 div le or}bdf
/rr{/@op xdf 2. div /@w xdf 2. div /@h xdf
/@r xdf /@b xdf /@l xdf /@t xdf
@t @b eq @l @r eq @w mup or or{@t @l @b @r @op rc}
{@r @l sub 2. div dup @w lt{/@w xdf}{pop}ifelse
@b @t sub 2. div dup @w lt{/@w xdf}{pop}ifelse
@op 0 eq{/@w @w pnsh 2 div 2 copy gt{sub def}{0 pop4}ifelse}if
currentpoint newpath
@r @l add 2. div @t moveto
@r @t @r @b @w arcto pop4
@r @b @l @b @w arcto pop4
@l @b @l @t @w arcto pop4
@l @t @r @t @w arcto pop4
closepath @op doop moveto}ifelse}bdf
/pr{gsave newpath /pl{exch moveto /pl{exch lineto}def}def}bdf
/pl{exch lineto}bdf
/ep{dup 0 eq{{moveto}{exch lin}{}{(%%[|1|]%%)= flush}pathforall
pop grestore}{doop grestore}ifelse currentpoint newpath moveto}bdf
/gr{64. div setgray}bdf
/pat{s8 copy pop 9.375 0{1 add 4 mul cvi s8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}setscreen gr}bdf
/sg{freq rot /spf load setscreen gr}bdf
/dc{transform round .5 sub exch round .5 sub exch itransform}bdf
/sn{userdict /smooth known}bdf
/x8{3 bitshift}bdf
/x4{2 bitshift}bdf
/d4{-2 bitshift}bdf
/xf{.12 mul exch 8. div}bdf
/db{/bmode xdf
save 9 1 roll sn and 8 4 roll xf exch dc translate newpath 0 0 moveto
2 copy xf .96 mul exch scale pop
0 0 1 1 5 -1 roll 7 index 2 sub exch div 1200 div sub 10 rc clip newpath 0 0 moveto
bmode 0 eq bmode 4 eq or{1 setgray .5 .5 idtransform abs exch abs
2 copy neg 1 add exch neg 1 add exch 2 rc}if
bmode 3 eq bmode 7 eq or{1}{0}ifelse setgray
/@f (%stdin)(r) file def
{x4 /@dy xdf 2 sub x4 /@dx xdf /@idx xdf
@idx 5 bitshift @dy bmode 0 eq bmode 1 eq bmode 3 eq or or @dx 0 0 @dy 8 0 6a astore
{@f @dy d4 4 add @idx mul string readhexstring pop
dup length @idx x4 sub 4 bitshift string
dup 3 1 roll @dx 8 add d4 smooth}imagemask}
{/@dy xdf 2 sub /@dx xdf /@idx xdf
/@xs @idx string def
/@p{@f @xs readhexstring pop}def
@p @p @idx 3 bitshift @dy bmode 0 eq bmode 1 eq bmode 3 eq or or @dx 0 0 @dy 0 0 6a astore
{@p}imagemask @p @p pop4}ifelse restore}bdf
/wd 14 dict def
/mfont 14 dict def
/mdf{mfont wcheck not{/mfont 14 dict def}if mfont begin xdf end}bdf
/cf{{1 index /FID ne{tmp 3 1 roll put}{pop pop}ifelse}forall}bdf
/macvec 256 array def
/mv{fmv{tmp /Encoding macvec put}if}bdf
/du{findfont dup length dict /tmp exch def cf}bdf
/nf{tmp definefont pop}bdf
/rf{/fmv exch def du mv nf}bdf
/fe{tmp /Encoding 2 copy get dup length array copy put}bdf
/ce{tmp /Encoding get 3 1 roll put}bdf
/xs{\312\312 serverdict begin exitserver}bdf
/bmbc{wd begin
/cr xdf /fd xdf save fd /low get cr x4 6 getinterval dup 3 get 255 eq{pop 0 0 0 0 0 0 setcachedevice}{fd begin
dup 4 get 8 bitshift 1 index 5 get add
exch dup 0 get 8 bitshift 1 index 1 get add exch dup 2 get km add exch 3 get xm aload pop
end dup scale /sh xdf /sw xdf neg /desc xdf
/hwd load 0 get div 4 1 roll /coff xdf dup /cloc xdf sub /bitw xdf
0 coff desc bitw coff add sh setcachedevice
bitw 0 ne{coff desc translate newpath 0 0 moveto
mark cloc 8 mod dup bitw add dup 8 div ceiling cvi 1 add dup 1 and 0 ne{1 add}if /byw xdf
[2 7 4 index sub bitshift 1 sub 2 7 4 index 8 mod sub bitshift 1 sub not
3 index 8 idiv 1 sub dup 0 ge{{255 exch}repeat}{pop and}ifelse 0 0]
/rg byw sh so{4 add}if mul string def
sw 8 idiv fd /hm get cloc 8 idiv so{byw 1 bitshift}{0}ifelse
sh{2 index 2 index byw getinterval rg 2 index byw getinterval copy pop
byw add exch 3 index add exch}repeat
0 1 rg length 1 sub{rg 1 index get 6 index 2 index byw mod get and rg 3 1 roll put}for
byw x8 dup sh scale so{x4 sh x4 true 2 index 0 0 sh x4 neg
13 index x4 8 add 1 index neg 6a astore{byw sh mul 16 mul string rg 1 index byw x8 smooth}imagemask}
{sh true 2 index 0 0 sh neg 13 index sh 6a astore{rg}imagemask}ifelse cleartomark}if
}ifelse restore end}bdf
/bb{3 index div 4 1 roll
2 index div 1 5 2 roll
exch div 4 1 roll
4 array astore /FontBBox mdf
}bdf
/hwd LW+{.96}{1.}ifelse
/exch load /div load 4 /array load /astore load /xm /mdf cvx
8 LW+{packedarray}{array astore}ifelse cvx bdf
/bf{
mfont begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/Encoding macvec def
/BuildChar /bmbc load def
end
mfont definefont pop
}bdf
/wi LW+{/stringwidth load}
{{gsave 0 0 0 0 0 0 0 0 moveto lineto lineto lineto closepath clip stringwidth grestore}bind}ifelse def
/aps{0 get 124 eq}bdf
/apn{s75 cvs aps}bdf
/xc{s75 cvs dup}bdf
/xp{put cvn}bdf
/scs{xc 3 67 put dup 0 95 xp}bdf
/sos{xc 3 79 xp}bdf
/sbs{xc 1 66 xp}bdf
/sis{xc 2 73 xp}bdf
/sob{xc 2 79 xp}bdf
/sss{xc 4 83 xp}bdf
/dd{exch 1 index add 3 1 roll add exch}bdf
/smc{moveto dup lws}bdf
/kwn{dup FontDirectory exch known{findfont exch pop}}bdf
/gl{1 currentgray sub setgray}bdf
/mm{/mfont 10 dict def mfont begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
/Encoding macvec def
/df 4 index findfont def
/FontBBox [0 0 1 1] def
/xda xdf /mbc xdf
/BuildChar{wd begin /cr xdf /fd xdf /cs s1 dup 0 cr put def fd /mbc get exec end}def
exec end mfont definefont}bdf
/ac{dup scs kwn{exch /ofd exch findfont def /tmp ofd maxlength 1 add dict def ofd cf mv
tmp dup dup /StrokeWidth nlw 1000 mul pys div ps div dup 12 lt{pop 12}if put
/PaintType 2 put definefont}ifelse}bdf
/mb{dup sbs kwn{exch{pop}{bbc}{}mm}ifelse sfd}bdf
/mo{dup sos kwn{exch{pop}{boc}{}mm}ifelse sfd}bdf
/ms{dup sss kwn{exch{pop}{bsc}{}mm}ifelse sfd}bdf
/ou{dup sos kwn{exch dup ac pop{scs findfont /df2 xdf}{aoc}{}mm}ifelse sfd}bdf
/su{dup sss kwn{exch dup ac pop{scs findfont /df2 xdf}{asc}{}mm}ifelse sfd}bdf
/ao{/fmv true def ou}bdf /as{/fmv true def su}bdf /vo{/fmv false def ou}bdf /vs{/fmv false def su}bdf
/bbc{/da .03 def fd /df get setfont
gsave cs wi exch da add exch grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da moveto lws}bdf
/boc{/da 1 ps div def fd /df get setfont
gsave cs wi exch da add exch grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da smc gl da 2. div dup moveto lws}bdf
/bsc{/da 1 ps div def
/ds .05 def /da2 da 2. div def fd /df get setfont
gsave cs wi exch ds add da2 add exch grestore setcharwidth
cs ds da2 add .01 add 0 smc 0 ds da2 sub translate 0 0 smc
da 0 smc da da smc 0 da smc gl da 2. div dup moveto lws}bdf
/aoc{fd /df get setfont
gsave cs wi grestore setcharwidth
gl cs 0 0 smc fd /df2 get setfont gl 0 0 moveto lws}bdf
/asc{/da .05 def fd /df get setfont
gsave cs wi exch da add exch grestore setcharwidth
cs da .01 add 0 smc 0 da translate gl 0 0 smc gl fd /df2 get setfont 0 0 moveto lws}bdf
/dly{/@t exch st{@t the{exit}if}loop}bdf
/st{1000 mul usertime add dup 2147483647 gt{2147483647 sub}if def}bdf
/the{usertime sub dup 0 lt exch -2147483648 gt and}bdf
/lsf{FontDirectory{pop dup apn{= flush}{dup s75 dup 0 (|______) putinterval
7 68 getinterval cvs length 7 add s75 0 3 -1 roll getinterval cvn
FontDirectory exch known{pop}{= flush}ifelse}
ifelse}forall /* = flush}bdf
/6a 6 array def
/2a 2 array def
/3q 3 array def
/qs{3 -1 roll sub exch 3 -1 roll sub exch}bdf
/qa{3 -1 roll add exch 3 -1 roll add exch}bdf
/qm{3 -1 roll 1 index mul 3 1 roll mul}bdf
/qn{6a exch get mul}bdf
/qA .166667 def /qB .833333 def /qC .5 def
/qx{6a astore pop
qA 0 qn qB 2 qn add   qA 1 qn qB 3 qn add
qB 2 qn qA 4 qn add   qB 3 qn qA 5 qn add
qC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}bdf
/qp{6 copy 12 -2 roll pop pop}bdf
/qc{exch qp qx curveto}bdf
/qi{{exch 4 copy 2a astore aload pop qa .5 qm newpath moveto}{exch 2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}bdf
/qq{{qc 2a aload pop qx curveto}{exch 4 copy qs qa qx curveto}ifelse}bdf
/pt{currentpoint newpath moveto}bdf
/qf{/fillflag true def}bdf
/ec{1 and 0 ne{0 doop}if grestore currentpoint newpath moveto /fillflag false def}bdf
/eu{currentpoint fp{0 ep}{grestore newpath}ifelse moveto /fillflag false def}bdf
/bp{currentpoint newpath 2 copy moveto}bdf
/ef{gsave fillflag{gsave eofill grestore}if}bdf
/sm{dup 0 exch{32 eq{1 add}if}forall}bdf
/ll{3 1 roll exch dup abs .001 lt{pop pop pop}
{sub dup abs .5 lt{pop show}{1 index sm
fg 7 get dup 127 ne{4 1 roll exch pop dv 0 4 -2 roll exch widthshow}
{pop dup 0 eq 3 index 0 le or{pop length div 0 3 -1 roll ashow}
{10 mul exch length add div dup 10 mul 0 32 4 -1 roll 0 6 -1 roll awidthshow
}ifelse}ifelse}ifelse}ifelse}bdf
/dss{currentfont bu 0 sa 6 get 0 ne{pop 1}{sa 7 get 0 eq{pop 2}if}ifelse sa 1 get 0 ne
/|______Symbol sa 4 get 0 ne{vs}{sa 3 get 0 ne{vo}{fnt}ifelse}ifelse bn fg 7 get currentfont}bdf
/ss{dss pop pop}bdf
/dpf{fg 7 get 8 -1 roll dup setfont}bdf
/pf{setfont}bdf
/mc{0 3 1 roll transform neg exch pop}bdf
/rs{sa 2 get 0 ne{gsave 1 index 0
/UnderlinePosition kif{mc}{ps -10 div}ifelse
/UnderlineThickness kif{mc}{ps 15 div}ifelse
setlinewidth currentpoint 3 -1 roll sub moveto
sa 4 get 0 ne{gsave currentlinewidth 2. div dup rmoveto currentpoint translate 2 copy rlineto
stroke grestore}if sa 3 get sa 4 get or 0 ne 3 1 roll 2 index{gsave gl 2 copy rlineto stroke grestore}if
rlineto{strokepath nlw pys div setlinewidth}if stroke grestore}if tv}bdf
/sgt{2 copy known{get true}{pop pop false}ifelse}bdf
/kif{currentfont dup /FontMatrix get exch /FontInfo sgt{true}{currentfont /df sgt
{dup /FontInfo sgt{3 1 roll /FontMatrix get mtx concatmatrix exch true}{pop pop pop false}
ifelse}{pop pop false}ifelse}ifelse{3 -1 roll sgt{exch true}{pop false}ifelse}{false}ifelse}bdf
/blank /Times-Roman findfont /CharStrings get /space get def
/NUL /SOH /STX /ETX /EOT /ENQ /ACK /BEL /BS /HT /LF /VT /FF /CR /SO /SI
/DLE /DC1 /DC2 /DC3 /DC4 /NAK /SYN /ETB /CAN /EM /SUB /ESC /FS /GS /RS /US
macvec 0 32 getinterval astore pop
macvec 32 /Times-Roman findfont /Encoding get
32 96 getinterval putinterval macvec dup 39 /quotesingle put 96 /grave put
/Adieresis /Aring /Ccedilla /Eacute /Ntilde /Odieresis /Udieresis /aacute
/agrave /acircumflex /adieresis /atilde /aring /ccedilla /eacute /egrave
/ecircumflex /edieresis /iacute /igrave /icircumflex /idieresis /ntilde /oacute
/ograve /ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex /udieresis
/dagger /degree /cent /sterling /section /bullet /paragraph /germandbls
/registered /copyright /trademark /acute /dieresis /notequal /AE /Oslash
/infinity /plusminus /lessequal /greaterequal /yen /mu /partialdiff /summation
/product /pi /integral /ordfeminine /ordmasculine /Omega /ae /oslash
/questiondown /exclamdown /logicalnot /radical /florin /approxequal /Delta /guillemotleft
/guillemotright /ellipsis /blank /Agrave /Atilde /Otilde /OE /oe
/endash /emdash /quotedblleft /quotedblright /quoteleft /quoteright /divide /lozenge
/ydieresis /Ydieresis /fraction /currency /guilsinglleft /guilsinglright /fi /fl
/daggerdbl /periodcentered /quotesinglbase /quotedblbase /perthousand /Acircumflex /Ecircumflex /Aacute
/Edieresis /Egrave /Iacute /Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex
/apple /Ograve /Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde
/macron /breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
macvec 128 128 getinterval astore pop
/|______Courier /Courier T rf
/|______Seattle /Helvetica findfont dup length 1 add dict /tmp xdf cf mv
/mxv[/zero /one /two /three /four /five /six /seven /eight /nine /comma /period /dollar /numbersign
/percent /plus /hyphen /E /parenleft /parenright /space]def
tmp /Metrics 21 dict dup begin mxv{600 def}forall end put
tmp begin /FontBBox FontBBox [0 0 0 0] astore def end
tmp definefont pop
false{
/rd{/@t 5 st 0{readRS232{exch 1 add exch 1 index 3 eq{exit}
{pop}ifelse}{@t the{0 exit}if}ifelse}loop exch pop}bdf
/sf{66 writeRS232 rd 64 eq (BBFGB) ty get writeRS232 rd 64 eq and}bdf
/af{rd 64 ne{/@x 4.5 st{sf{exit}if @x the
{/@x 4.5 st(%%[status: problem with external paper feeder]%%)= flush}if}loop}if}bdf
/kf{af hp (BBDCE) ty get writeRS232}bdf
/hp{{t1 the{/t1 t2 the ty 4 eq or{{t3 the{exit}if}loop 18 st 18}{9 st 9}ifelse
dup 2 add /t2 exch st 4.5 add /t3 exch st exit}if}loop}bdf
/fx{ma 1 gt ok and{ma 5 eq{/@t 4.5 st{po 524288 and 0 eq{exit}if
@t the{(%%[status: paper jam]%%) = flush /@t 4.5 st}if}loop /@x 4.5 st
rd 64 eq sf and{{66 writeRS232 kf exit}{/ty (\0000\0000\0003\0002) ty get def}ifelse @x the
{(%%[status: external feeder out of paper]%%)= flush /@x 4.5 st}if sf}loop}{kf}ifelse}if}bdf
/sp{#copies dup userdict /#copies 1 put 1 ge{1 sub{fx copypage}repeat fx showpage}{1 ge{fx showpage}{erasepage}ifelse}ifelse}bdf
/pp{#copies userdict /#copies 1 put{fx copypage}repeat}bdf
}{/sp /showpage load def /pp /copypage load def}ifelse
/od{(Rvd\001\001\000\000\177) fg copy pop txpose newpath clippath mark
{transform{itransform moveto}}{transform{itransform lineto}}
{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform
{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}
{{closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39 0 put
10 fz 0 fs 2 F /|______Courier fnt}bdf
/cd{}bdf
/op{/sfl false def /pm save def}bdf
/cp{not{userdict /#copies 0 put}if ma 0 gt{{t1 the{exit}if}loop}if{pp}{sp}ifelse pm restore}bdf
/px{0 3 1 roll tp tt}bdf
/py{}bdf
/psb{/us save def}bdf
/pse{us restore}bdf
/ct 40 string def
/nc{currentpoint initclip newpath gc{dup type dup /arraytype eq exch /packedarraytype eq or{exec}if}
forall clip newpath moveto}bdf
/kp{ct 0 2 index length 2 index 39 2 index put getinterval copy cvx exec mx3 currentmatrix pop}bdf
end
LW 1 eq userdict /a4small known not and{/a4small
[[300 72 div 0 0 -300 72 div -120 3381]
280 3255
{statusdict /jobstate (printing) put 0 setblink
margins
exch 196 add exch 304 add 8 div round cvi frametoroket
statusdict /jobstate (busy) put
1 setblink}
/framedevice load
60 45{dup mul exch dup mul add 1.0 exch sub}/setscreen load
{}/settransfer load /initgraphics load /erasepage load]cvx
statusdict begin bind end readonly def}if
systemdict /currentpacking known{setpacking}if
%currentfile ok userdict /smooth known not and{eexec}{flushfile}ifelse
<1A73D71A961FBB2AC19BE58D26A29D58EC3A474CFEE3DEF290EEB285241ADA25BE96DD2E
A0CA0831BC1011013EED016DC1DECEF5EF1349B00F24B41DB158F3DDFDA4B7A557E5AC1E
6799E46CC291B0BDB8548E68AB6FF3BD5F735AE6D54C516A33C2B6DC3C671368D1BC01D3
CB154E6BB2A0A86AC449E18EB87DAE408DC2AB4A6A01BDAB8AD7AB8285C1178A2F59CF91
C4F840A4849B106B3545A51E3972E65F83A65F6B1A96E8F4F5AFE9987AD56C52E8EBDB26
A9D6F6FCB73042AB28DC9F91B6AE4928ECE56A278E0A67D269DDE6CC187A6C07D0878B46
5F9590AA780185E9C05087ABC09C1E3E2E5E055EA5AB02EA14EF88EDF28EB1ACEC5FED79
60FA3901E1EAC09C4E515C4BEEDE037CEE04DF6CE10A872517ACF7C73173BE38478E8979
5BC992BE84A72C4AF420A20D7D6A098D7E0B4A3578C1E0F3C0D37BCED8AC23A5C2C66AAA
FC278927EEDB8C46F3F5480BD3680698759C97A717AE5143F654D858D3A32E3B7D255420
4719774F50B7CA6CE7B9CD6984820A2F3A9BF131A3FF2C4A8DDDA5CABE8B4E03B959F998
A331DCB6EB452F36905852159DE67ED7BE09C9546F98F64B5923B121D7BB51AAE57E2747
4F58FA52A68A4472E340C76CE965DF8EC65B33AB0BFB59DBBD888B66789A3C69A9181455
E1A6F1163CF7EBA3B909F6C63AB12A24BE7B73976EEE05A03A882A77D2B5A10C9E51E43B
08D3F1D8DE6B56F2BD61EBED3545E3E7D713BB7F1EBB11B9E411B9C19A6D3FE3605E8CD9
A4B632BAAF049D1D8BE0294D97074468DB092B997FBF64A28BC713013C6ECABA91B5C6A0
484EC2CAA5B027D4B068F7D7399F82ADCC8B005AAEF549053C2B212F5247E0FF4B2C155D
EB96500EAD0D6C26B34C4F6284F8BD813DEF2E1898131FAB7BCF63F3634DDC89C658BF91
A4E59010E79E171E8E9BE44382136546FF6547E76CA8E14C4A4BBE177C74934DEB4A7DF8
23A1E76B1A91D79F5D009F3DC992C79ECD9DB46FEAFD164D464B06DCE9BDB33CD9F11076
2A77E486819BA99805E45E3AEF15AFA176B5278665F2DC065A60A3B2CEB8FDA49C778339
E20B251917F749F3BB9A2061038EC56D9BA691303B84881D0A59FD71769049B496A8BA77
8E64429D1B8A89831568F926DD235000D0CD3A0D2A5C74558225BD05ACDEDA4DEFF48E39
1E7A1A2D5FB3607E2A9E3B3D7AF6A891CE404AC20F6AA4A5A48AB94849596925A2030543
8255FAD30052E8D1CAAA36E9FFB826F80F4B79AF0335DB19204506A8ADD569C221364126
AF26CE964BF40DE30BF59CB849E61A1CC79BBD446D789083F96F9803A3B713695F2945CC
38EC6330808A2C2C15C52F1CBF1C33B38B0F23AA32515D3FF758748B3EE5EDC79EAF3BA8
7A00443D4662DA93A5B399C91BF3B169ECCD2EA9A8BF3292CDA540414E175A083E921563
459492F21E21551B4BDAFF3F3927125A307AF4F35672274F606E69C4229A6466C3DBC78B
69FF6A9D027BABDC76E84B3EA71277611D75A496262FF441BA66CC9BA1A84F16B68ECB92
9BA8C15B836CE6DC38CFEEFCC38123B714F11F93C191731CF14A5448EE31E2FB86F5B775
83378BD0E6B9ABF237F70DBE7E85362EF3ADE1DB6D00EBF76C9C513A164436FFED364133
A08F48518DEB441102B5B18CC74F066FB6E76EC359E3ABE1E88DD595E5FC953A5F938014
F53FF0B4090DEFB3D273C5C2AAC19E68232A9160219FCADB518E97D98D11980287C23592
85E73AAD1714F4C4B10F2661ECF12F4FABCA00A497DCA02258CA43A228EFF0DD37D1D586
126B06DAB569261B0BC89289F85D7D4FB88D6778245DE208AAC0412E587D3F001A37BCBD
57976DC85DE0C27E56C859384C1DB196D536265141BF17D4E04EFCA8CDD17203560043FD
7588C101EE32C7A222518EFCFAA953CD5D973E962712B6454B805757513A14CE9B7B3551
520B5FAB59255D6AFB013D37435B64CB516CDDFF8236EDAEDF8345DE7909A116D9F420D8
F6E9997DD0FE10C881AE887ACEB111974D058C5B531282F15105E77663A65A33AD7E9AC7
7EE48FD4F8B6385B99379C86B4482A32AE0C12337B0D92C35613D6CD6F7E6B1B8BA72713
C24D45C13765FD5F73F3DBAB82ABB35A106A1EC281FAB335D48D48D3B25DA195F9E0FD91
E3A8FAEB18F2BC3E48E68488A9417A9277DFDFFA461081C75703C0BAE6914F9AF8D39322
37B72F0C9C98EB697D7E1107E354329F58B072188FAE858915EC6C54C5332B6EAD052347
A616C9BC86A285493509B8DA8608DD8751214091D19DC58439EB7954E44D9A04CAE77461
C6692F7B2DF43F7587E09E27FD2928B8D07810B459B11363CC4B4C9A1302662EA1F4218A
172E5EA3A4AF9BF3A489CC96E7EF6E03985723426D461F4B082DBF0814179953C2BE574F
4298BBD20A4F9DA830B78FD225055110E6E5BC072C28067E0968FFF2733D9BFD8642588F
F384A8749569DD5DE35D847351C012E706FB77C771D983EB8197A04557AABFF0BFD3E26A
4F6C36305B3D7B6A6E86D2B5D44FA23527DE6D27A2D52B814A0C87AE77D0C6FF88851AB4
58663C0DBC36C4C4E02A76E13E2BC64AD3F4B24AA097C08D7B956D5EFFE794CAF954CE17
2FD5728AC926D1F8F934E2D5E103E4A9A0220BF17F4A8389A88069620B0A00B41506261B
87803E21DDEAF18BB7383165BA52038286C3870B10B787EC06620547317DEF718DB35CC7
EFD9AE3AD52048C5B1F0057935496618EFA953055E953BC60ABB477B894685DC7B250A21
EA0CF52C8105152AC5543A324E55AAED07B0FA2BE805E91328B00E23C7E2CBC7CBFDD8FD
B268A2B3A7D7ADCC99B64B4D230648E9CC986A347619B2B1D17194591FBE068137BB5CD2
DA481B0CF874B3673301FFB9C5C107FAC927C5653B418E7EC3B5F7BBED5C45BD3773788B
5B08D9F9827E4B5043882DEA8647F9BA70B33F3E01818E20766336EAC4CDE32D5039933A
0EBBCBEFFEAB37E5086674546AC164717D9209BFF10C76C89E06FBE0E9773570FB590D86
3522C37FE8D8EA55E66DA56E5599C9AB8085736BF06AE34F6C8415C6F55BA43882B62644
8EFC5EC18A52E418E2A6476A48B598C08C69446912092D720EF83E86D37423710E564FED
AF505CFE8B0C2A709D72422C2E87ED3B3A7B4E7334330CED6DFC15B7DE3137BF91AC87D1
269148FAEDA86A7695569777597C2A862080C47CD54C5F273B51C5744E2B6253DB9695FC
C2E876714C8B47AA9DB92F763F3C48CFEF27183E39DC041EB6DB7E5BE10B2C38BA95A3B8
B23E80C2C1B2A131AAF1D138CB24FCFCF9F18582D1E3DCDA44542851B5F4E919CCEE7CDF
E6C3CE7C83979550CE71E159945C7E7F2E241BEBEC3B70C85D6E22C22E24D4E46012BAC4
CC399E1C429FA922F6EFC8BC34E97F5FC8AB9105D08598AB3D70F43C7FB9DF6C566FFE16
3C97C9C5799A64A566BB8CD40D8E23700D53B5877AF22A0B5156DF046CF37F6178C107EF
D8B29839063F28AFECF894C3054AC81FBFB6D1616E22082C81B71B5A09793E7263C6C6EE
1C72F536BA9F2FB977ACE68E716A1C382176AA8797105ABC2C90C46FEB9CD7C7F17A02A7
E88C9FAAC033B20D4102DA13B2380525F47E>
ok userdict /smooth known not and{eexec}{pop}ifelse
%!
% fontprep.ps				greid Thu Sep 25 15:40:03 1986
%
% Assumes the presence of the "md" dictionary which is where the Apple
% LaserPrep routines are stored.  Works with version 40.0 of the
% LaserPrep file, and perhaps earlier ones.

userdict /md known not {
    (LaserPrep not loaded.  Cannot find "md" dictionary.\n) print flush
    stop
} if

md begin
/scratch 100 string def
FontDirectory {
  pop scratch cvs dup 0 get dup 65 lt exch 90 gt or {
    pop   %% ignore any font name that doesn't start with a letter
  }{
    %% set up and call the /rf routine in md dictionary:
    dup length string copy /#nm exch def
    #nm length 7 add string
    dup 0 (|______) putinterval
    dup 7 #nm putinterval cvn
    dup FontDirectory exch known {
	clear
    }{
        #nm cvn dup
        findfont /Encoding get StandardEncoding eq
        {true}{false}ifelse
	rf	% stack: /|______FontName /FontName <boolean>
    } ifelse
  } ifelse
} bind forall
end %md
