This is a modification of a make facility for the IBM PC previously
posted to the net.  I have converted it so that it will work with
the Atari 520ST.  Unfortunately I was about halfway through the conversion
when a newer version of the IBM PC version was posted to net.sources.
I think I have successfully incorporated the features of the newer IBM
version into this (520ST) version but only time will tell.

The documentation included here is that supplied with the latest IBM
version of the utility.

Notes:

1. You need to leave sufficient stack space in gemstart.o; I use 16k.
   All the space the program gets with malloc() comes from this.  You
   should adjust the sbrk() in the program to reflect the amount of
   storage you would like made available to malloc() from the stack.

2. If you do not append a suffix to a command name then .prg is appended.
   So c0 is the same as c0.prg but c0.ttp is not.

3. In general names are not case sensitive, e.g.

   makething : dependson
     .
     .
     .
   DEPENDSON : .........


   should work ok.

4. It never invokes a shell (all commands are treated as programs to be
   run) for the simple reason that there is no widely accepted shell for
   the ST yet.  I have left hooks for using a shell to execute commands,
   in place.  It shouldn't be too hard to make it work with your favourite
   shell if you so desire.

5. You have to be *VERY CAREFUL* to remember to set the date and time
   when you reboot - otherwise you will get totally inexplicable results
   from make.

6. I have include two makefiles that I use to make 'make'.  The first
   assumes that all executable programs (c compiler, linker etc.) are
   on the a: disk and that the sources and the library files (for the
   linker) are on the d: disk (what I use as a ram disk) and that the
   default disk is the a: disk.  The resulting program (make.prg) is
   left on the a: disk.  The second makefile assumes that disk d: is
   the current default again with sources and objects on d: and the
   executables on a: .

7. This would be much more useful if it could be incorporated into a
   public domain shell as a basic command.

8. Unfortunately there is no ctype.h file included in the development
   kit; I used the definition of the functions on our vax and created
   my own _ctype_ with the appropriate bits set on.  However this is
   probably prorietary information so I don't think I can post it. 
   You will have to come up with your own version of isdigit() etc.
   if your compiler doesn't include them.  Actually this pisses me
   off quite a bit because the only safe assumption you can make on
   a Unix system is that everything you see is copyrighted even though
   something like this may not be - I had to think for quite a while
   before deciding I shouldn't post the ctype.h and ctype.c that I used.
   Computing in fear....thanks at&t.

   John Chapman
   April 7, 1986

