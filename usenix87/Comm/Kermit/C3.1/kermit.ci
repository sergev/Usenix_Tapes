2 3 


     KERMIT(1)               UNIX 5.0 (local)                KERMIT(1)



     NAME
          kermit - file transfer, virt. terminal over tty link

     SYNOPSIS
          3!kermit c3 [3!lbe3 ] [2!line2 ] [2!baud2 ] [2!esc2 ]

          3!kermit r3 [3!ddilb3 ] [2!line2 ] [2!baud2 ]

          3!kermit s3 [3!ddilb3 ] [2!line2 ] [2!baud2 ] 2!file2  ...

     DESCRIPTION
          2!Kermit2  provides reliable file transfer and primitive virtual
          terminal communication between machines.  It has been
          implemented on many different computers, including
          microprocessors (see below).  The files transferred may be
          arbitrary ASCII data (7-bit characters) and may be of any
          length.  The file transfer protocol uses small (96
          character) checksummed packets, with ACK/NACK responses and
          timeouts.  2!Kermit2  currently uses a five second timeout and
          ten retries.

          The arguments to 2!kermit2  are a set of flags (no spaces
          between the flags), three optional args (which, if included,
          must be in the same order as the flags which indicate their
          presence), and, if this is a Send operation a list of one or
          more files.  (It is similar in some way to the 2!tar2  command
          structure).

          2!Kermit2  has three modes, Connect, Send, and Receive.  The
          first is for a virtual terminal connection, the other two
          for file transfer.  These modes are specified by the first
          flag, which should be 3!c3 , 3!s3 , or 3!r3 , respectively.  Exactly one
          mode must be specified.

          The 3!d 3 flag (debug) makes 2!kermit2  a bit more verbose.  The
          states 2!kermit2  goes through are printed along with other
          traces of it's operation.  A second 3!d 3 flag will cause 2!kermit2 
          to give an even more detailed trace.

          The 3!i 3 flag (image) allows slightly more efficient file
          transfer between Unix machines.  Normally (on Kermits
          defined to run on Unix systems) newline is mapped to CRLF on
          output, CR's are discarded on input, and bytes are masked to
          7 bits.  If this is set, no mapping is done on newlines, and
          all eight bits of each byte are sent or received.  This is
          the default for non-Unix kermits.

          The 3!l 3 flag (line) specifies the tty line that 2!kermit2  should
          use to communicate with the other machine.  This is
          specified as a regular filename, like "/dev/ttyh1".  If no 3!l3 
          option is specified, standard input is used and 2!kermit2 
          assumes it is running on the remote host (ie. NOT the



     Page 1                                         (printed 12/18/84)






     KERMIT(1)               UNIX 5.0 (local)                KERMIT(1)



          machine to which your terminal is attached).

          The 3!b 3 flag (baud) sets the baud rate on the line specified
          by the 3!l 3 flag.  No changes are made if the 3!b 3 flag is not
          used.  Legal speeds are: 110, 150, 300, 1200, 2400, 4800,
          9600.  Note that this version of 2!kermit2  supports this option
          on Unix systems only.

          The 3!e 3 flag (escape) allows the user to set the first
          character of the two character escape sequence for Connect
          mode.  When the escape character is typed, 2!kermit2  will hold
          it and wait for the next character.  If the next character
          is 3!c 3 or 3!C3 , 2!kermit2  will close the connection with the remote
          host.  If the second character is the same as the escape
          character, the escape character itself is passed.  Any
          character other than these two results in a bell being sent
          to the user's terminal and no characters passwd to the
          remote host.  All other typed characters are passed through
          unchanged.  The default escape character is '^'.

          The file arguments are only meaningful to a Send 2!kermit2 .
          The Receiving 2!kermit2  will attempt to store the file with the
          same name that was used to send it.  Unix 2!kermit2 s normally
          convert outgoing file names to uppercase and incoming ones
          to lower case (see the 3!f 3 flag).  If a filename contains a
          slash (/) all outgoing kermits will strip off the leading
          part of the name through the last slash.

     EXAMPLE
          For this example we will assume two Unix machines.  We are
          logged onto "unixa" (the local machine), and want to
          communicate with "unixb" (the remote machine).  There is a
          modem on "/dev/tty03".

          We want to connect to "unixb", then transfer "file1" to that
          machine.

          We type:   kermit clb /dev/tty03 1200

          Kermit answers:   Kermit: connected...

          Now we dial the remote machine and connect the modem.
          Anything typed on the terminal will be sent to the remote
          machine and any output from that machine will be displayed
          on our terminal.  We hit RETURN, get a "login:" prompt and
          login.

          Now we need to start a 2!kermit2  on the remote machine so that
          we can send the file over.  First we start up the remote,
          (in this case receiving) 2!kermit2 , then the local, (sending)
          one.  Remember that we are talking to unixb right now.




     Page 2                                         (printed 12/18/84)






     KERMIT(1)               UNIX 5.0 (local)                KERMIT(1)



          We type:   kermit r
               (there is now a Receive 2!kermit2  on unixb)

          We type ^ (the escape character) and then 3!c 3 to kill the
          local (Connecting) 2!kermit2 .

          Kermit answers:   Kermit: disconnected.

          We type:   kermit slb /dev/tty03 1200 file1

          Kermit answers:     Sending file1 as FILE1

          When the transmission is finished, 2!kermit2  will type either
          "Send complete", or "Send failed.", depending on the success
          of the transfer.  If we now wanted to transfer a file from
          unixb (remote) to unixa (local), we would use these
          commands:

               kermit clb /dev/tty03 1200
                 (connected to unixb)
               kermit s file9
               ^c (up-arrow c not control-c)
                 (talking to unixa again)
               kermit rl /dev/tty03 1200

          After all the transfers were done, we should connect again,
          log off of unixb, kill the Connect 2!kermit2  and hang up the
          phone.

          Detail on other implementations and on the protocol is given
          in the 2!Kermit2  2!Users2  2!Guide2 , and the 2!Kermit2  2!Protocol2  2!Handbook2 .

     FEATURES
          2!Kermit2  can interact strangely with the tty driver.  In
          particular, a tty with "hangup on last close" set (stty
          hup), will reset to 300 Baud between 2!kermit2  commands.  It
          will also hang up a modem at that time.  It is better to run
          with "stty -hup", and use "stty 0" to explicitly hang up the
          modem.

          The KERMIT Protocol uses only printing ASCII characters,
          Ctrl-A, and CRLF.  Ctrl-S/Ctrl-Q flow control can be used
          "underneath" the Kermit protocol (TANDEM line discipline on
          Berkeley Unix).

          Since BREAK is not an ASCII character, 2!kermit2  cannot send a
          BREAK to the remote machine.  On some systems, a BREAK will
          be read as a NUL.

          This 2!kermit2  does have timeouts when run under Unix, so the
          protocol is stable when communicating with "dumb" kermits
          (that don't have timeouts).



     Page 3                                         (printed 12/18/84)






     KERMIT(1)               UNIX 5.0 (local)                KERMIT(1)



     OTHER IMPLEMENTATIONS
          2!Kermits2  have been written for TOPS-20, TOPS-10, IBM VM/CMS,
          Unix, VAX/VMS, RT-11, MS-DOS, CP/M, and Apple DOS.  The Unix
          2!kermit2  in use at Ford Aerospace has been tested on v6/PWB,
          v7, Onyx System III, Bell System V, and Berkeley 4.1.  More
          information is given in the 2!Kermit2  2!Users2  2!Guide2 .

     SEE ALSO
          stty(1)

          2!Kermit2  2!Users2  2!Guide2 , Fourth Edition (4 May 83), Frank da
          Cruz, Daphne Tzoar, Bill Catchings

          2!Kermit2  2!Protocol2  2!Manual2 , Protocol Version 3 (29 April 83),
          Frank da Cruz, Bill Catchings

          Both of the above documents are from the Columbia University
          Center for Computing Activities, New York, New York, 10027.

     AUTHORS
          KERMIT kernel by Bill Catchings, Columbia University Center
          for Computing Activities

          KERMIT-Unix adaptation by Chris Maio and Bob Cattani,
          Columbia University Computer Science Dept.

          Local mods for v6, System III, and System V by Walter
          Underwood.  Includes bug fixes from Jim Guyton at RAND-Unix.

     DIAGNOSTICS
          cannot open 2!device2 
               The file named in the 2!line2  argument did not exist or
               had the wrong permissions.

          bad line speed
               The 2!baud2  argument was not a legal speed.

          Could not create 2!file2 
               A Receive 2!kermit2  could not create the file being sent
               to it.

          nothing to connect to
               A Connect 2!kermit2  was started without a 2!line2  argument.

     BUGS AND CAVEATS
          There is no locking on the use of the outgoing line.
          Several users could run 2!kermit2  (or anything else) on the
          line simultaneously.

          The acronym (2!K2 L10 2!E2 rror-free 2!R2 eciprocal 2!M2 icro 2!I2 nterconnect
          over 2!T2 TY lines) is charming, but strained.




     Page 4                                         (printed 12/18/84)






     KERMIT(1)               UNIX 5.0 (local)                KERMIT(1)



          This implementation does not send or process error-message
          packets.

          Eight-bit quoting is not implemented.



















































     Page 5                                         (printed 12/18/84)



2 3 