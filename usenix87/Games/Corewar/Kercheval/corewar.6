.TH COREWAR 6 
.UC 4
.SH NAME
corewar \- battling programs
.SH SYNOPSIS
.B corewar
[
.B \-l
] [
.B \-t
] [
.B \-d
]
prog1 prog2
.br
.SH DESCRIPTION
.I Corewar
loads 
.I file1
and
.I file2
into the simulated memory arena and executes instructions for 
each in turn until one encounters an illegal instruction, at which
point the other is declared the winner.
If neither has won in two minutes, the match is declared a draw.
.PP
.I Corewar
is based on A.K Dewdeney's May 1984 column in Scientific American.
.PP
The
.B \-l
option causes a listing of the generated code to be written on the
standard output while each file is loaded.
.PP
The option
.B \-t
causes an instruction execution trace to be written on the standard output.
.PP
The option
.B \-d
causes a post mortem memory dump to be written on the standard output.
.PP
More files may be given for simultaneous execution, and other options
exist (call
.I Corewar
with a nonexistent option to get a description of the existing ones).
The option
.B \-x
causes
.I Corewar
to accept one additional instruction: `fork'. Its syntax is like that
of `jmp', and it creates two processes, one continuing at the next
instruction, one at the (relative) address given as argument. There
exist restrictions to prevent proliferation of processes: there is
a maximum number of processes (e.g. 20), a minimum distance for a new
process from existing processes (e.g. 1), and a minimum age
(`maturity', e.g. 0) before which a process cannot spawn new processes.
.SH AUTHORS
Berry Kercheval (ihnp4!zehntel!berry)
.br
Andries Brouwer (mcvax!play)
