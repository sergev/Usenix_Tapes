Path: plus5!wucs1!mcdchg!clyde!cbatt!ihnp4!ptsfa!ames!cit-vax!tybalt.caltech.edu!sns
From: sns@tybalt.caltech.edu (Samuel N. Southard)
Newsgroups: net.sources.games,rec.games.empire
Subject: an empcre that works (well) with 128 x 128
Message-ID: <2543@cit-vax.Caltech.Edu>
Date: 1 May 87 07:38:40 GMT
Sender: news@cit-vax.Caltech.Edu
Reply-To: sns@tybalt.caltech.edu (Samuel N. Southard)
Distribution: world
Organization: Calfornia Institute of Technology
Lines: 419
Xref: plus5 net.sources.games:965 rec.games.empire:47

After seeing so many things about problems with making a world with dimensions
128 by 128, I decided that I wanted to do a 128 by 128 map.  It involved a few
changes, but it was not due to hardcoded 2**6 in the code.

Anyways, I did it.  This version of empcre.c allows you to specify (within a
couple percent) the percentages of mountain and water.  It seems to give very
nice maps.  There are large differences in regions, which is (I think)
desirable.

It gives reasonable amounts of gold and mineral in each sector, but these do
have a large degree of variation - you get rich areas and poor areas (which I
think is good, and not just because it turned out that way).

If there are problems with this version, try replacing w_xsize and w_ysize
*in every file where they occur* with something like (long)w_xsize and
(long)w_ysize.  I chose long out of paranoia - there is NO WAY it is going to
wrap on me because of not enough bits.  If your map comes out with strips
of things (if it happens, you'll know what I mean), this is the problem.

Anyways, here is the code.

-------* cut here *------------
#define D_FILES
#define D_NATSTAT
#define D_NATSTR
#define D_SCTSTR
#define D_DCHRSTR
#define PERCENT_MOUNT	6
#define PERCENT_SEA		30
#include        "empdef.h"
#include        <stdio.h>

char    thispro;
struct  {
        int     f1;
        int     f2;
        int     f3;
} elev[4] = { 3, 8, 0, 1, 10, 0, 3, 42, 0, 0, 40, 0 };
int     testfla, tracefl, creamfl;
extern  double  up_offset;
char    powbuf[48];
struct  {
        int     x;
        int     y;
} volc[400], gold[400], river[400];


main(argc, argv)
int     argc;
char    *argv[];
{
        register int i, j, k;
        double  pslsin();
        char    *mailbox();
        int     nvolc, ngold, nriver, d, e, st, r;
        int     sep, type[23], elmax, elmin, elsc, elcnts[1024];
        int     rx, ry, nx, ny, dx, dy, temp;
        int     stripsiz,mountheight,seadepth,sum=0;
	int	dist, dfact;
        long    now, sectsiz;
        struct  sctstr  scts[128];

        sectsiz = sizeof(sect);
	for( i = 0; i < 128; i++ ) {
		scts[i].sct_owned = scts[i].sct_desig = scts[i].sct_effic = 0;
		scts[i].sct_miner = scts[i].sct_gmin = scts[i].sct_prdct = 0;
		scts[i].sct_mobil = scts[i].sct_chkpt = 0;
		scts[i].sct_dfend = scts[i].sct_contr = scts[i].sct_civil = 0;
		scts[i].sct_milit = scts[i].sct_shell = scts[i].sct_guns = 0;
		scts[i].sct_plane = scts[i].sct_ore = scts[i].sct_gold = 0;
		scts[i].sct_c_use = scts[i].sct_m_use = scts[i].sct_s_use = 0;
		scts[i].sct_g_use = scts[i].sct_p_use = scts[i].sct_o_use = 0;
		scts[i].sct_b_use = 0;
		scts[i].sct_p_stage = scts[i].sct_p_time = 0;
		scts[i].sct_lstup = 0;
	}
	for( i = 0; i < 1024; i++ ) elcnts[i] = 0;
	for( i = 0; i < 23; i++ ) type[i] = 0;
	for( i = 0; i < 48; i++ ) powbuf[i] = 0;
        time(&now);
        srand((unsigned int)now);
        while( --argc > 0 ) {
                if( argv[argc][0] == '-' ) {
                        if( argv[argc][1] == 's' &&
                            argv[argc][2] == '=' ) {
                                strcpy(sectfil, &argv[argc][3]);
                                testfla++;
                        } else if( argv[argc][1] == 't' ) {
                                tracefl++;
                        } else if( argv[argc][1] == 'c' ) {
                                creamfl++;
                        } else goto usage;
                } else if( argv[argc][0] >= '0'  &&
                    argv[argc][0] <= '9' ) {
                        srand((unsigned int)atoi(argv[argc]));
                } else {
usage:                  printf("Usage: %s [randnum] [-s=sectfil] [-trace] [-cream]\n", argv[0]);
                        exit(2);
                }
        }
        up_offset =  now/1800L - 1; /* minimum curup is 1 */
        if( !testfla ) {
                if( (natf = make( natfil )) < 0 ) exit(1);
                printf("Name for Country 0? ");
                fflush(stdout);
                nat.nat_cnam[read(0, nat.nat_cnam, 20)-1] = '\0';
                printf("Representative's name? ");
                fflush(stdout);
                nat.nat_pnam[sread(nat.nat_pnam, 20)-1] = '\0';
                nat.nat_stat = STAT_GOD;
                nat.nat_btu = 127;
                nat.nat_nuid = getuid();
                nat.nat_money = 12345;
                nat.nat_up_off = up_offset;
                write(natf, &nat, sizeof(nat));
                printf("\nAll praise to %s!\n", nat.nat_cnam);
                for( i=0; i<20; i++ ) {
                        nat.nat_cnam[i] = nat.nat_pnam[i] = '\0';
                }
                nat.nat_stat = nat.nat_btu = 0;
                for( i=1; i<maxnoc; i++ ) {
                        write(natf, &nat, sizeof(nat));
                }
                close(natf);
        }
        nvolc = ((long)w_xsize * (long)w_ysize)/166 + 2; 
        ngold = ((long)w_xsize * (long)w_ysize)/333 + 2;
        nriver = ((long)w_xsize * (long)w_ysize)/100 + 2; 
		if (((long)w_xsize+(long)w_ysize)>128) 
		{
			nvolc*=2;
			ngold*=3;
		} 
        printf("Volcanos\n");
        sep = w_xsize/4 +  w_ysize/4; 
        k = nvolc;
        while( --k >= 0 ) {
                j = 10;
vloop:          volc[k].x = (rand()>>2) % (w_xsize-1);
                volc[k].y = (rand()>>2) % (w_ysize-1);
                i = nvolc;
                while( --i > k ) {
                        if( sep <= cdst(&volc[i], &volc[k]) ) continue;
                        if( --j < 0 ) {
                                sep--;
                                j = 9;
                        }
                        goto vloop;
                }
                printf("V%d\t%2d,%d [sep = %d]\n", k, volc[k].x, volc[k].y, sep);
        }
        printf("gold strikes\n");
        k = ngold;
        while( --k >= 0 ) {
                gold[k].x = (rand()>>2) % (long)w_xsize;
                gold[k].y = (rand()>>2) % (long)w_ysize;
                printf("%2d,%2d\n", gold[k].x, gold[k].y);
        }
        if( (sectf = make(sectfil)) < 0 ) exit(1);
        close(sectf);
        printf("Determine sector types");
        sectf = open(sectfil, O_RDWR);
        stripsiz = (long)w_xsize * sectsiz;
        elmax = 0;
        elmin = 32767;
        for( j=0; j < (long)w_ysize; j++ ) {
                for( i=0; i < (long)w_xsize; i++ ) {
                        d = rand() % 10;
                        for( k=0; k<=nvolc; k++ ) {
						if (w_xsize+w_ysize>128)
						{
							d+=2000/(dst(i-volc[k].x,j-volc[k].y)+rand()%4+2);
						} else {
							d+=1500/(dst(i-volc[k].x,j-volc[k].y)+rand()%4+2);
						}
                        }
                        e = pslsin(d*166) * 45.;
                        scts[i].sct_miner = rand() % 11 + e + 45;
                        e = rand() % 3;
			dfact = ( (long)w_xsize > (long)w_ysize ) ? (long)w_xsize : (long)w_ysize; 
			dfact = dfact/16 + 1; 
                        for( k=0; k<=ngold; k++ ) {
				dist = dfact * dst(i-gold[k].x, j-gold[k].y);
				temp=(dist+rand()%5+5);
				if (w_xsize+w_ysize>128) temp*=w_xsize/64;
				e+=5000/temp;
                        }
			scts[i].sct_gmin = max127(e/14 + rand()%29);
                        scts[i].sct_lstup = d;
                        if( d > elmax ) elmax = d;
                        if( d < elmin ) elmin = d;
                }
                write( sectf, scts, stripsiz );
                printf("...");
                fflush(stdout);
        }
        printf("\n");
        i = elmax;
        i -= elmin;
        elsc = i/1024 + 1;
        lseek(sectf, 0L, 0);
        for( j=0; j < (long)w_ysize; j++ ) {
                read(sectf, scts, stripsiz);
                for( i=0; i < (long)w_xsize; i++ ) {
                        k = (scts[i].sct_lstup - elmin)/elsc;
                        elcnts[k]++;
                }
        }
		for (k=1023 ; k>0 ; k--)
		{
			sum=sum+elcnts[k];
			if (((((sum/(long)w_xsize)*100)/(long)w_ysize))>PERCENT_MOUNT)
			{
				mountheight=k;
				sum=0;
				break;
			}
		}
		for (k=0 ; k<1024 ; k++)
		{
			sum=sum+elcnts[k];
			if (((((sum/(long)w_xsize)*100)/(long)w_ysize))>PERCENT_SEA)
			{
				seadepth=k;
				break;
			}
		}
        lseek(sectf, 0L, 0);
        for( j=0; j < (long)w_ysize; j++ ) {
                read(sectf, scts, stripsiz);
                for( i=0; i < (long)w_xsize; i++ ) {
					k=(scts[i].sct_lstup-elmin)/elsc;
					if (k>mountheight)
					{
						scts[i].sct_desig=1;
						scts[i].sct_miner = scts[i].sct_gmin=0;
						type[1]++;
					}
					else if (k<seadepth)
					{
						scts[i].sct_desig=0;
						scts[i].sct_miner = scts[i].sct_gmin=0;
						type[0]++;
					}
					else 
					{
						scts[i].sct_desig=3;
						type[3]++;
					}



/*                        d = scts[i].sct_lstup;
                        for( k=0; elev[k].f3 > 0; k++ ) {
                                if( d > elev[k].f3 ) break;
                        }
                        st = elev[k].f1;
                        if( st == 1 || st == 0 ) {
                                scts[i].sct_miner = scts[i].sct_gmin = 0;
                        }
                        scts[i].sct_desig = st;
                        type[st]++; */



                        if( tracefl ) {
                                printf("%c", " ^s-"[st]);
                        }
                }		
                lseek(sectf, (long)(-stripsiz), 1);
                write(sectf, scts, stripsiz);
                if( tracefl ) printf("\n");
        }
        printf("\nRivers\n");
        k = nriver;
        while( --k >= 0 ) {
rloop:          river[k].x = (rand()>>2) % (long)(w_xsize);
                river[k].y = (rand()>>2) % (long)(w_ysize);
                i = nvolc;
                while( --i >= 0 ) {
                        if( cdst(&river[k], &volc[i]) <  5 ) break;
                }
                if( i < 0 ) goto rloop;
                printf("R%d\t%2d,%d\n", k, river[k].x, river[k].y);
        }
        for( k=nriver; k >= 0; k-- ) {
                nx = river[k].x;
                ny = river[k].y;
                e = 9999;
                i = 0;
makeriv:        getsect(rx=nx, ry=ny);
                type[sect.sct_desig]--;
                type[0]++;
                sect.sct_desig = 0;
                putsect(rx, ry);
                i++;
                for( dx = -1; dx <= 1; dx++ ) {
                        for( dy = -1; dy <= 1; dy++ ) {
                                if( dy != 0 || dx != 0 ) {
                                        getsect(rx+dx, ry+dy);
                                        if( sect.sct_lstup  <= e ) {
                                                if( sect.sct_desig == 0 ) continue;
                                                e = sect.sct_lstup;
                                                nx = rx + dx;
                                                ny = ry + dy;
                                        }
                                }
                        }
                }
                if( nx != rx || ny != ry ) goto makeriv;
                printf("River %d is %d long\n", k, i);
        }
        lseek(sectf, 0L, 0);
        for( j=0; j < (long)w_ysize; j++ ) {
                for( i=0; i < (long)w_xsize; i++ ) {
                        read(sectf, &sect, sizeof(sect));
                        sect.sct_lstup = 0;
                        lseek(sectf, -sectsiz, 1);
                        write(sectf, &sect, sizeof(sect));
                }
        }
        lseek(sectf, 0L, 0);
        read(sectf, &sect, sizeof(sect));
        sect.sct_desig = 2;
        sect.sct_effic = 99;
        sect.sct_civil = 127;
        lseek(sectf, 0L, 0);
        write(sectf, &sect, sizeof(sect));
        close(sectf);
        d = (long)w_xsize * (long)w_ysize;
        for( k=0; k < 23; k++ ) {
                if( type[k] <= 0 ) continue;
                printf("%3d %-16.16s (%.1f%%)\n", type[k],
                        dchr[k].d_name, (type[k] * 100.)/d );
        }
        if( testfla ) exit(1);
        close(make(shipfil));
        powf = make(powfil);
        write(powf, powbuf, sizeof(long));
        for( i=maxnoc; i >= 0; i-- ) {
                close(creat(mailbox(i), 0600));
                write(powf, powbuf, sizeof(powbuf));
        }
        close(powf);
        close(make(treatfil));
        close(make(loanfil));
        close(make(newsfil));
}

make(file)
char    *file;
{
        register        fh;

        if( !creamfl ) {
                if( (fh = open(file, O_RDONLY)) >= 0 ) {
                        printf("%s already exists.  Remove it to do creation\n", file);
                        exit(1);
                }
        }
        if( (fh = creat(file, 0600)) < 0 ) {
                printf("Creation of %s failed.\n", file);
        }
        return(fh);
}

cdst(p0, p1)
short   p0[], p1[];
{
        return(dst(p0[0]-p1[0], p0[1]-p1[1]));
}

dst(x, y)
int     x, y;
{
        register        int     dx, dy;

        dx = xwrap(x);
        dy = ywrap(y);
        if( dx < 0 ) dx = -dx;
        if( dy < 0 ) dy = -dy;
        if( dx <= dy ) return(dy + (dx>>1));
        return(dx + (dy>>1));
}

getsect(i, j)
int     i, j;
{
        register        k;
        long    addr,tempx,tempy;

		tempx=(long)w_xsize;
		tempy=(long)w_ysize;
        k = ((tempy + j + capy)%tempy) * tempx + (tempx + i + capx)%tempx;
        addr = (long)k * sizeof(sect);
        lseek(sectf, addr, 0);
        if( read(sectf, &sect, sizeof(sect)) >= sizeof(sect) ) return;
        printf("Ooops, couldn't read sector %d,%d\n", i, j);
        exit(3);
}

putsect(i, j)
int     i, j;
{
        register        k;
        long    addr,tempx,tempy;

		tempx=(long)w_xsize;
		tempy=(long)w_ysize;
        k = ((tempy + j + capy)%tempy) * tempx + (tempx + i + capx)%tempx;

        addr = (long)k * sizeof(sect);
        lseek(sectf, addr, 0);
        write(sectf, &sect, sizeof(sect));
        return;
}
-------* cut here *---------

My cat can quack, can yours?		genghis!sns@csvax.Caltech.Edu
