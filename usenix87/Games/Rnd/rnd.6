.TH rnd 6  12/4/86
.SH NAME
rnd \- Random stuff generator
.SH SYNOPSIS
.B rnd
file1 file2, etc...
.SH DESCRIPTION
.I rnd 
reads a file and writes generated data to the standard output.
If more than one file is specified, the files are used as descriptions
in sequence and merged output is written to the standard output.
Two types of files are recognized: \fBtable\fP files, and \fBsubtable\fP files.
Each file specified on the command line must be a \fBtable\fP file.

A table file can contain several types of information:
.TP 8
\(bu \fBText and Text-formats:\fP
These are simply text that will be
included in the output. There are, however, a few simple rules.
Any text string ending in a ':' (no space afterwards) will NOT
have a newline appended after it. This is to allow a user to
have the output from a subtable placed after a text string.
Other text that does not have a ':' as the last character before
a newline is printed as is.
.TP
\(bu \fBTabs and Formfeeds:\fP
To insert tabs and formfeeds, a \fB\\t\fP (tab)
or a \fB\\l\fP (formfeed ^L) is placed as the ONLY thing on that line. 
There must be no other blank spaces, etc. This is inelegant, but
allows the program to run reasonably fast. If a tab is coded, the
program does NOT automatically generate a newline after it. This
is to allow a user to separate stats with tabs reasonably easily.
.TP
\(bu \fBStat commands:\fP
A stat command goes at the beginning of an 
otherwise empty line, in the format:
.nf

     \fBstat\fP <string> <# of dice> <type of dice>
.fi

\fIrnd\fP will then roll the appropriate number of N-sided dice, and
print the stat on the standard output.
The <string> must not have any spaces in it.

Normal output format is:

.nf
     \fB<string>: <number>\fP
.fi

however if you make the first character of the <string>
a '*' the format will be:

.nf
     \fB<number> <string>\fP
.fi

without the '*'.
This is useful to produce messages like \fB300 gold_pieces\fP or
\fB12 large_diamonds\fP.
.TP
\(bu Subtable commands: a subtable command goes at the beginning of
an otherwise empty line, in the format
.nf

     \fBsubtable\fP <filename> <# of dice> <type of dice>

.fi
\fIrnd\fP will then roll the appropriate number of N-sided dice, and
open the subtable file. A subtable file is constructed as follows:
.nf

     <#upper limit> <command>
     <#upper limit> <command>
     ... etc.
.fi
Where <command> can be text, a stat command, a table command,
or another subtable command.

Subtable files may not contain any extraneous text (unlike table files)
and all the entries must be in order, with the highest numerical entry as the
last line in the file, and the lowest numerical entry as the first.
Each line must contain a number value and a command, or the results
may be unusual. 
.TP
\(bu \fBTable commands:\fP
a table can contain a list of tables as well as
stats, format commands, text, and subtables. Each table is randomized
recursively, until your stack overflows, or it returns, whichever comes
first. Stacking tables deeply is usually not necessary, since several
tables can be called on the command line, and that is much safer.
When a table command is invoked, it must be followed by two numbers
so that the semi-braindead parser recognizes it as a command.

.nf
     \fBtable\fP <filename> <bogus #><bogus #>
.fi

Each table can contain its own list of subtables and stats, as well as text
and format commands. This is lots of fun, since it allows the discerning
DM to make a variety of layered tables and gives excellent control
over how much is generated. For example if you determine that an encounter
consists of monsters, booty, and terrain, you could have a table that
invoked the monster table, then the terrain one, then the booty. In 
this way, you would still have a perfectly usable set of tables for
any time you wanted just a monster, or just terrain. The possibilities
as far as maintaining standard libraries are considerable, obviously.
The primary limitation is your machine's stack and disk space.
.bp
.SH EXAMPLES

$ \fBrnd Pirates\fR

.I rnd 
will read the table named
.B Pirates
and executes all the stats, subtables, and tables contained therein.

\fB(The contents of file "Pirates".)\fR
.nf

--------------------------------------
A sample pirate -----
stat strength 3 6
\\t
stat brains 3 6

possesions:
subtable possesions 1 100

table Anothertable 0 0

---------------------------------------
\\l

.fi
.ad
This would generate a pirate with 3d6 strength and brains, and
would make a 1d100 roll on the possessions table. 
The table "Anothertable" is then opened and treated as a new list of
commands. Note that there are 2 numbers provided with the table command.
This is MANDATORY, and due only to lazy programming. Live with it.
Appropriate tabs and
a formfeed are generated. 

\fB(contents of file "possesions")\fP

.nf
10 Cutlass
20 Fists
30 subtable beverage 1 100
40 Belaying Pin
90 Just his clothes
100 table armor 0 0

.fi
In this example, when the subtable was called, a 1d100 was rolled (be
sure to specify that right!) 0-10 yields a Cutlass, 11-20 Fists, etc.
20-30 will roll on the subtable 'beverage' for a suitable liquid refreshment,
And 91-100 will recurse into the table 'armor' and print out what types
of armor the pirate has.
.SH CAVEATS
.TP 2
\(bu
This program is machine dependent to the degree that your machine likes
recursion.
.TP
\(bu
This program has run on Gould Powernode 9080, Sun workstations, and
my IBM compatible clone (lattice 3.0). On the PCs, usually some provision
will have to be made to increase the stack size. On lattice this is
done by declaring a global "int _stack = 6000;" or about 6 kilobytes.
You decide. No guarantees are made for other compilers/machines, but
anything that is not braindead can handle it. 
.TP
\(bu
Capturing the output: This program is designed for systems with I/O
redirection. If you don't have it, I suggest you frob the code slightly
by changing all printfs to fprintf, etc. For you with I/O redirection,
the initial text, etc, is returned on the standard error, so it will
not kluge up your characters as they are generated. Pipe the output
through your favorite formatter, editor, printer, or null device.
.SH AUTHOR
.nf
      Marcus J Ranum, Gould Inc.
      All rights reserved.
.fi

Don't use this to make money, or sell. Otherwise it may be freely copied,
deleted, and hacked.
Give me credit for the idea, if not the code.
