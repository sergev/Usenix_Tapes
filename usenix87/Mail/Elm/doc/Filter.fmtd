















                             EEEEllllmmmm FFFFiiiilllltttteeeerrrr GGGGuuuuiiiiddddeeee







                _W_h_a_t _t_h_e _f_i_l_t_e_r _p_r_o_g_r_a_m _i_s, _w_h_a_t _i_t _d_o_e_s,
                            _a_n_d _h_o_w _t_o _u_s_e _i_t





                               Dave Taylor

                       Hewlett-Packard Laboratories
                           1501 Page Mill Road
                               Palo Alto CA
                                  94304

               email: taylor@hplabs.HP.COM or hplabs!taylor










                  8888cccc9999 Copyright 1986, 1987 by Dave Taylor























                             EEEEllllmmmm FFFFiiiilllltttteeeerrrr GGGGuuuuiiiiddddeeee

                              (version 1.5)


                               Dave Taylor

                       Hewlett-Packard Laboratories
                           1501 Page Mill Road
                               Palo Alto CA
                                  94304

               email: taylor@hplabs.HP.COM or hplabs!taylor


                              March 13, 1987




               One of the greatest  problems  with  the  burgeoning
       electronic  mail  explosion is that we tend to get mail that
       we don't  care  about.   Amusingly,  perhaps,  we  have  the
       equivalent  of  electronic junk mail.  Not amusing, however,
       is the fact that this can rapidly accumulate and end up tak-
       ing over your mailbox!

               At the same time we often get mail that, while it is
       interesting  and  important,  can easily be filed to be read
       later, without ever actually cluttering up the mailbox.


       This, then, is what _f_i_l_t_e_r does for you!  The _f_i_l_t_e_r program
       allows  you  to  define a set of rules by which all incoming
       mail should be screened, and a subsequent set of actions  to
       perform  based on whether the rules were met or not.  _F_i_l_t_e_r
       also has the ability to mail a summary of  what  actions  it
       performed on the incoming mail as often as you'd like.


       WWWWrrrriiiittttiiiinnnngggg tttthhhheeee RRRRuuuulllleeeessss

       The language for writing  _f_i_l_t_e_r  rules  is  pretty  simple,
       actually.  The fundamental structure is;

               if  (_c_o_n_d_i_t_i_o_n)  then  _a_c_t_i_o_n

       Where _c_o_n_d_i_t_i_o_n is constructed by  an  arbitrary  number  of
       individual   conditions   of   the  form  ``_f_i_e_l_d   _r_e_l_a_t_i_o_n
       _v_a_l_u_e''.  The _f_i_e_l_d value can be;




                                  Page 1







       Filter Guide                                     version 1.5



               subject
               from
               to
               lines
               contains

       where, if ``lines'' is choosen, the _r_e_l_a_t_i_o_n can be  any  of
       the  standard  relationships (`>', `<', `>=', `<=', `!=' and
       `='). If another action is choosen, ``contains'' can be used
       as  the relation, ``='', or, if you'd like, you can skip the
       relationship entirely (e.g. `subject "joe"').  The _v_a_l_u_e  is
       any quoted string that is to be matched against or number if
       ``lines'' is the field being considered.

       Invidivual conditions are joined together by using the  word
       ``and'',  and  the  logic  of  a condition can be flipped by
       using ``not'' as the first word (e.g. `not subject  "joe"').
       We'll see more examples of this later.

       Note that the ``or'' logical conjunction isn't a valid  part
       of the _f_i_l_t_e_r conditional statement.

       Finally, <_a_c_t_i_o_n> can be any of;

               delete

               save   _f_o_l_d_e_r_n_a_m_e

               savecopy  _f_o_l_d_e_r_n_a_m_e

               forward  _a_d_d_r_e_s_s

               execute  _c_o_m_m_a_n_d

               leave

       where they result in the actions;  ddddeeeelllleeeetttteeee deletes  the  mes-
       sage; ssssaaaavvvveeee saves a copy of the message in the specified fol-
       dername; ssssaaaavvvveeeeccccooooppppyyyy does the same as save,  but  also  puts  a
       copy  in  your  mailbox;  ffffoooorrrrwwwwaaaarrrrdddd  sends  the message to the
       specified address; eeeexxxxeeeeccccuuuutttteeee feeds the message to  the  speci-
       fied  command  (or complex sequence of commands) as standard
       input; and lllleeeeaaaavvvveeee leaves the message in your mailbox.

       Foldernames can contain any of a number of macros,  too,  as
       we'll  see  in the example ruleset below.  The macros avail-
       able for the string fields are;







                                  Page 2







       Filter Guide                                     version 1.5



              Macro      Meaning

               %d        day of the month
               %D        day of the week (0-6)
               %h        hour of the day (0-23)
               %m        month of the year (0-11)
               %r        return address of message
               %s        subject of original message
               %S        ``Re: _s_u_b_j_e_c_t _o_f _o_r_i_g_i_n_a_l _m_e_s_s_a_g_e''
               %t        current hour and minute in HH:MM format
               %y        year (last two digits)


       The rules file can also contain comments (any line  starting
       with a `#') and blank lines.

       The file itself needs to reside in your home  directory  and
       be called ._f_i_l_t_e_r-_r_u_l_e_s.  Here's an example;

           #  $HOME/.filter-rules
           #
           #  Filter  rules  for  the  Elm  Filter  program.  Don't  change  without  some
           #  serious  thought.  (remember  -  order  counts)
           #
           #     Dave  Taylor

           #  rule  1
           if  (from  contains  "!uucp")  then  delete

           #  rule  2
           to   "postmaster"   ?   save  "/tmp/postmaster-mail.%d"

           #  rule  3
           if  (to  "culture"  and  lines  >  20)  ?   save  "/users/taylor/Mail/culture"

           #  rule  4
           subject  =  "filter test"   ?   forward  "hpldat!taylor"

           #  rule  5
           if  [  subject  =  "elm"  ]   savecopy  "/users/taylor/Mail/elm-incoming"

           #  rule  6
           subject  =  "display-to-console" ?  execute "cat - > /dev/console"

       (notice the loose syntax - there are lots of valid  ways  to
       specify a rule in the _f_i_l_t_e_r program!!)

       To translate these into English;






                                  Page 3







       Filter Guide                                     version 1.5



         1.  All messages from uucp should be summarily deleted.

         2.  All mail to postmaster should be  saved  in  a  folder
             (file)  called /tmp/posmaster-mail._n_u_m_e_r_i_c-_d_a_y-_o_f-_t_h_e-
             _w_e_e_k

         3.  All mail addressed to `culture' with at least 20 lines
              should  be  automatically  appended  to  the   folder
             /users/taylor/Mail/culture.

         4.  All messages that contain the  subject  `filter  test'
             should  be  forwarded  to  me,  but  via  the  address
             `hpldat!taylor' (to force a non-user forward)

         5.  All messages with a subject  that  contains  the  word
             `elm'     should    be    saved    in    the    folder
             ``/users/taylor/Mail/elm-incoming'' and  also  dropped
             into my mailbox.

         6.  Any message with  the  subject  ``display-to-console''
             will be immediately written to the console.

       Notice that the _o_r_d_e_r of the rules is  very  important.   If
       we,  for example, were to get a message from `uucp' that had
       the subject `filter test', the _f_i_l_t_e_r  program  would  match
       rule  1 and delete the message.  It would never be forwarded
       to `hpldat!taylor'.  It is for this reason that  great  care
       should be taken with the ordering of the rules.

       CCCChhhheeeecccckkkkiiiinnnngggg tttthhhheeee rrrruuuulllleeeessss oooouuuutttt

       The _f_i_l_t_e_r program has a convenient way  of  check  out  the
       rules  you  have  written.   Simply  invoke  it  with the ----rrrr
       (rrrrules) flag;

               % ffffiiiilllltttteeeerrrr ----rrrr

               Rule 1: if (from = "!uucp") then
                         Delete

               Rule 2: if (to = "postmaster") then
                         Save  /tmp/postmaster-mail.2

               Rule 3: if (to = "culture" and lines > 20) then
                         Save  /users/taylor/Mail/culture

               Rule 4: if (subject = "filter test") then
                       Forward  hpldat!taylor

               Rule 5: if (subject="elm") then
                         Copy  and  Save  /users/taylor/Mail/elm-incoming



                                  Page 4







       Filter Guide                                     version 1.5



               Rule 6: if (subject="display-to-console") then
                         Execute "cat - > /dev/console"

       There are a few things to notice - first off, these are  the
       parsed and rebuilt rules, so we can see that they are all in
       a consistent format.  Also, notice on the filename for  rule
       2  that  the program has correctly expanded the ``%d'' macro
       to be the day of the month.


       It is hhhhiiiigggghhhhllllyyyy recommended that you always check your  ruleset
       before actually letting the program use it!

       AAAAccccttttuuuuaaaallllllllyyyy UUUUssssiiiinnnngggg tttthhhheeee PPPPrrrrooooggggrrrraaaammmm

       Now the bad news.  If you aren't running _s_e_n_d_m_a_i_l you cannot
       use  this  program  as currently written.  Why?  Because the
       _f_i_l_t_e_r program expects to be put in your ._f_o_r_w_a_r_d  file  and
       that is something that only _s_e_n_d_m_a_i_l looks at!

       The format for the entry in the ._f_o_r_w_a_r_d  file  (located  in
       your home directory) is simply;

               "|filter"

       Alright, it isn't quite _t_h_a_t simple!  Since _f_i_l_t_e_r  will  be
       invoked  by  processes  that don't know where you are logged
       in, you need to have some way to trap  the  error  messages.
       For  ease  of  use,  it was decided to have all the messages
       written to _s_t_d_e_r_r which means that you have two main choices
       for the actual entry.  Either;

               "|filter  >  /dev/console  2>&1"

       which will log all errors on the system console (each  error
       is  prefixed  with ``filter (_u_s_e_r_n_a_m_e)'' to distinguish it),
       or;

               "|filter  >>  $HOME/.filter_errors  2>&1"

       If you want to have a copy saved  to  a  file.   A  possible
       strategy  would  be to have the errors written to a file and
       to then have a few lines in your ._l_o_g_i_n script like;

               if  (  -f  .filter_errors)  then
                  echo  "  "
                  echo  "Filter  program  errors;"
                  cat  .filter_errors
                  echo  "  "
               endif




                                  Page 5







       Filter Guide                                     version 1.5



       You can also use the ----vvvv flag in combination with  the  above
       to have the errors written to a file and a single line indi-
       cating messages being sent off or saved to  folders  written
       to the console by having your ._f_o_r_w_a_r_d file;

               "|filter  -v  > /dev/console  2>>  $HOME/.filter_errors"

       Suffice to say, you can get pretty tricky  with  all  this!!
       One last point - if you're interested in having it beep (for
       output to the screen, I would think)  you  can  use  the  ----aaaa
       (aaaaudible) flag for any of these invocations!

       SSSSuuuummmmmmmmaaaarrrriiiizzzziiiinnnngggg tttthhhheeee AAAAccccttttiiiioooonnnnssss TTTTaaaakkkkeeeennnn

       The _F_i_l_t_e_r program keeps a log  of  all  actions  performed,
       including what rules it matched against, in your home direc-
       tory in a file called ._f_i_l_t_e_r__l_o_g.  You can either  directly
       operate on this file, or, much more recommended, you can one
       of the two summarize flags to the program and let _i_t do  the
       work for you!

       The difference between the two is best demonstrated by exam-
       ple;

               % ffffiiiilllltttteeeerrrr ----ssss

               Summary of filter activity;

               The default rule of putting mail into your mailbox was used 18 times

               Rule #3: (save in "/users/taylor/Mail/culture") was applied 2 times.

       vs

               % ffffiiiilllltttteeeerrrr ----SSSS

               Mail from root about
                       PUT in mailbox: the default action

               Mail from taylor about Filter Summary
                       PUT in mailbox: the default action

               Mail from hpcea!hpcesea!hpcesed!scott@hplabs.HP.COM
                  about Comments and questions about elm
                       PUT in mailbox: the default action

               [etc etc]

       To actually use either of the summarizing options, there are
       two ways that are recommended;




                                  Page 6







       Filter Guide                                     version 1.5



       The preferred way is to have a line in either  your  _c_r_o_n_t_a_b
       (ask your administrator for help with this) that invokes the
       _f_i_l_t_e_r program as often as you desire with the ----ssss flag.  For
       example, I have a summary mailed to me every morning at 8:00
       am;

           0   8   *   *   *   "/usr/local/bin/filter  -s  |  elm  -s  'Filter  Summary'  taylor"


       An alternative is to have your ._l_o_g_i_n  execute  the  command
       each time.


       Note that if you want to have your  log  files  cleared  out
       each  time  the  summary is generated you'll need to use the
       '-c' flag too.  Also, if you want to keep  a  long  list  of
       actions  performed  you  can  do  this  by  saving it as you
       display it.  A way to do this would be, if you were to  have
       the invocation in your ._l_o_g_i_n script, to use;

               echo  "Filter  Log;"
               filter  -c  -s  |  tee  -a  PERM.filter.log

       which would append a copy of all  the  output  to  the  file
       `PERM.filter.log'  and would avoid you having to read larger
       and larger summaries of what the program had done.

       FFFFuuuurrrrtttthhhheeeerrrr TTTTeeeessssttttiiiinnnngggg ooooffff tttthhhheeee RRRRuuuulllleeeesssseeeetttt

       With the _r_e_a_d_m_s_g command available, it is quite easy to test
       the  rules  you've  written  to  see  if they'll do what you
       desire.

       For example, we can use the ----nnnn flag to _f_i_l_t_e_r,  which  means
       `don't actually do this, just tell me what rule you matched,
       if any, and what action you would have performed'  (you  can
       see  why  a  single letter flag is easier to type in!!), and
       feed it each message in our mailbox by using a command like;

               % sssseeeetttt mmmmeeeessssssssaaaaggggeeee====1111
               % sssseeeetttt ttttoooottttaaaallll____mmmmeeeessssssssaaaaggggeeeessss====````mmmmeeeessssssssaaaaggggeeeessss````

               % wwwwhhhhiiiilllleeee  ((((1111))))
               > iiiiffff (((($$$$mmmmeeeessssssssaaaaggggeeee >>>> $$$$ttttoooottttaaaallll____mmmmeeeessssssssaaaaggggeeeessss)))) eeeexxxxiiiitttt
               > eeeecccchhhhoooo pppprrrroooocccceeeessssssssiiiinnnngggg mmmmeeeessssssssaaaaggggeeee $$$$mmmmeeeessssssssaaaaggggeeee
               > rrrreeeeaaaaddddmmmmssssgggg ----hhhh $$$$mmmmeeeessssssssaaaaggggeeee |||| ffffiiiilllltttteeeerrrr ----nnnn
               > eeeecccchhhhoooo """" """"
               > @@@@ mmmmeeeessssssssaaaaggggeeeessss++++++++
               > eeeennnndddd

       which will then hand each of the messages in your mailbox to



                                  Page 7







       Filter Guide                                     version 1.5



       the  _f_i_l_t_e_r  program and display what action would have been
       taken with that message and why.

       For example, if we do this for a few interesting messages in
       my mailbox, we'd end up with output like;

              Mail from taylor about filter test
                    FORWARDED to hpldat!taylor by rule;
                       subject="filter test"  ? forward "hpldat!taylor"

              Mail from bradley%hplkab@hplabsc about Re:  AI-ED mailing address for HP
                    PUT in mailbox: the default action

              Mail from taylor about display-to-console
                    EXECUTED "cat - > /dev/console"

       (sharp users will notice that this is exactly the same  for-
       mat as the longer summary listing!!)

       WWWWhhhhaaaatttt FFFFoooorrrrwwwwaaaarrrrddddeeeedddd MMMMeeeessssssssaaaaggggeeeessss LLLLooooooookkkk LLLLiiiikkkkeeee

       When a message is forwarded to another user  by  the  _a_c_t_i_o_n
       being specified as ``forward _a_d_d_r_e_s_s'', then the program can
       generate one of two styles of message.  If the message is to
       you,  then it'll simply add it to your mailbox in such a way
       as to ensure that the return address is that of  the  person
       who sent the message and so on.

       If not, then the message is enclosed in  a  message  of  the
       form;

          From taylor Thu Oct  2 15:07:04 1986
          Date: Thu, 2 Oct 86 15:06:58 pdt
          Subject: "filter test"
          From: The filter of taylor@hpldat <taylor>
          To: hpldat!taylor
          X-Filtered-By: filter, version 1.4

          -- Begin filtered message --

              From taylor Thu Oct  2 15:06:41 1986
              Date: Thu, 2 Oct 86 15:06:33 pdt
              From: Dave Taylor <taylor>
              Subject: filter test

              Just a simple test.

          -- End of filtered message --

       The subject of the actual message is the same as the subject
       of  the message being forwarded, but in quotes.  The `From:'



                                  Page 8







       Filter Guide                                     version 1.5



       field indicates how  the  message  was  sent,  and  the  `X-
       Filtered-By:'  identifies  what  version  of filter is being
       used.

       AAAArrrreeeeaaaassss ttttoooo IIIImmmmpppprrrroooovvvveeee

       While the _f_i_l_t_e_r program as presented herein is obviously  a
       nice addition to the set of tools available for dealing with
       electronic mail, there are some key features that are  miss-
       ing and will be added in the future based on demand.

       As I see it, the main things missing are;

         1.  The ability to use regular  expressions  in  the  pat-
             terns. This would be a _v_e_r_y nice feature!

         2.  Perhaps more _a_c_t_i_o_n_s available (but what?)

         3.  Certainly the ability to filter based on any field  or
             combination of fields.


       WWWWaaaarrrrnnnniiiinnnnggggssss aaaannnndddd TTTThhhhiiiinnnnggggssss ttttoooo LLLLooooooookkkk OOOOuuuutttt FFFFoooorrrr

       Since this is a pretty simple program, there are a few  pit-
       falls, some of which have already been mentioned;

       OOOOrrrrddddeeeerrrr counts in the rules.  Beware!

       MMMMaaaattttcccchhhhiiiinnnngggg is pretty simple - make sure your patterns are suf-
       ficiently exclusive before having any destructive rules.


       Finally, as with the rest of the EEEEllllmmmm mail system, I  welcome
       feedback and suggestion on how to improve this program!!



















                                  Page 9




