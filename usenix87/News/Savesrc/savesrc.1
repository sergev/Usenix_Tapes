.ls 1
.vs 11.5
.TH SAVESRC 1 LOCAL
.SH NAME
savesrc \- organize program sources from Usenet
.SH SYNOPSIS
\fBsavesrc\fR destination [source file ...]
.SH DESCRIPTION
\fISavesrc\fR is a shell program designed to simplify the retrieval,
testing, documentation,
and storage of program sources from the Usenet news network, although it
can be used with any source files.
.sp 0.13i
\fISavesrc\fR will read standard input if no source files are given, so
a news article may be piped to it conveniently from newsreaders with this
facility, such as \fIrn(1)\fR.
This makes it much easier to save sources in a standard manner
and test them out while actually reading news, rather than accumulating
messy directories of miscellaneous sources to be organized Real Soon Now.
.sp 0.13i
Basically, \fIsavesrc\fR will take a single program source file or a
shell archive, place it in a designated source directory or sub-directory
thereof, unshar it if necessary, generate a Makefile entry if necessary,
prompt for a half-line description of what the program does, attempt
to compile it, give the user a shell to twiddle it when it doesn't
work, and add entries to a file of notes indicating what it is, where
and who it came from, when it arrived, and whether or not it works.
It will also deal sensibly with header files and manual pages.
.sp 0.13i
\fISavesrc\fR is interactive.
It may be terminated by typing ``q'' in response to any question, but
cannot be aborted with an interrupt.
If panic stikes, \fIquit\fR (normally CTRL-\e) will produce a graceful exit.
.sp 0.2i
\fBDirectory Structures Etc.\fR
.sp 0.13i
\fISavesrc\fR assumes that all sources will be placed in a \fImain
sources directory\fR, or in sub-directories under it.
It will look for an environment variable ``srcdir'' giving the
full pathname of this directory;  the default value is ``$HOME/src''.
.sp 0.13i
Manual page sources are assumed to live in a directory with
subdirectories named ``man1'' through ``man8'', and manual pages
which have been formatted using \fInroff -man\fR are assumed to live in a
directory with subdirectories named ``cat1'' through ``cat8''.
\fISavesrc\fR looks for two environment variables, ``mandir''
and ``catdir'', which give the full pathnames of these directories.
``Mandir'' and ``catdir'' may be the same;  the default value for each
is ``$HOME/man''.
.sp 0.13i
\fISavesrc\fR further assumes that there will be a Makefile in the main sources
directory;  one will be created if it does not exist.
Incidentally, if a ``makefile'' is found anywhere, it is appended to
``Makefile'' and then removed, in the interests of consistency.
(The Makefile is then edited to change all references to ``makefile''
into ``Makefile''.)
.sp 0.13i
A file called ``NOTES'' is also expected in any source directory, and
will be created if it does not exist.
This file contains short notes on what the programs in the directory
do, where and whom they came from (if known), when they were received,
and any other relevant information (such as if they work and actually
seem to be useful).
\fISavesrc\fR will create a basic NOTES entry for any program it deals
with if the user so desires.
The NOTES file is intended to be manipulated by a another program,
\fInote(1L)\fR, but since it is a ordinary ASCII file, it may be
attacked with any of the normal Unix utilities.
.sp 0.13i
The \fBdestination\fR names that \fIsavesrc\fR knows about are ones ending
in ``.?'', ``.fix'', ``.bug'', ``.patch'', ``.[1-8]'', and ``READ*'',
which are assumed to be source (C, YACC, lex, etc.) or header files,
bug fixes, manual pages, or README's.
(The ``.bug'', ``.fix'', and ``.patch'' suffixes exist to
allow convenient saving of bugs, patches, and fixes in a general sources
directory.)
Any other destination name is assumed to be a sub-directory under the main
sources directory, unless it is a full pathname.
.sp 0.2i
\fBSingle Source Programs, Header Files, and README's\fR
.sp 0.13i
\fISavesrc\fR tries to put single-file sources, header files, and README's
in the main sources directory.
If the destination name already exists, the user is given the choice of
overwriting it, appending to it, or specifying a new destination
(which is also checked).
The user is given a chance to edit the file or start up a shell
for further twiddling.
At this point \fIsavesrc\fR will terminate for header files and README's;  for
bugs, fixes, and patches, the user will be offered a shell before \fIsavesrc\fR
terminates.
.sp 0.2i
\fBSource Programs\fR
.sp 0.13i
For sources, the user is prompted for a half-line description of the
program, and a check is made to see if a Makefile entry already exists
for the program.
If not, and the user indicates he wants one, a default entry of the form:
.sp 0.13i
.nf
.in +0.7i
program:	program.o
	cc $(CFLAGS) program.o -o program
.fi
.in -0.7i
.sp 0.13i
is presented for his approval.
If he approves, this is appended to the Makefile.
If not, he is prompted for the complete Makefile entry.
In either case, the Makefile entry is preceded by a blank line and the
half-line program description as a comment.
The user is then given a chance to edit the Makefile.
.sp 0.13i
Next, the user is prompted for adding a basic NOTES entry, asked if the
program should be compiled, offered a shell to twiddle or test it, and
finally prompted for any further NOTES entries (\fIe.g.\fR, ``Compiled
OK but removed /unix when I ran it.
Must remember to sue author.'').
If the program came from a netnews article, the basic NOTES entry will
include the author and the posting path, if possible, as well as the
program name, the current date, and the half-line program description.
(In compiling the program, the command used is in effect ``make \(gabasename
destination .c\(ga''.)
.sp 0.2i
\fBManual Pages\fR
.sp 0.13i
Manual pages are placed in the main sources directory, first checking
that they will not overwrite a previous copy unless the user wishes to.
The user may then edit them.
For manual page sources (as opposed to pre-formatted pages), the user is asked
if he wishes to move them to the appropriate section of the manual
source directory, and if he wants a formatted copy made and filed.
If a formatted copy is made, it will also be shown on the terminal.
If the correct directory for the source or formatted page does not exist,
\fIsavesrc\fR attempts to create it.
For pre-formatted manual pages, the user is given the option of moving
them to the appropriate directory.
(As yet there is no utility to generate source from formatted manual
pages, but stay tuned...)
.sp 0.2i
\fBLarge (Multi-File) C Programs\fR
.sp 0.13i
When \fIsavesrc\fR cannot recognize the destination name as a single source
program, a manual page, a header file, a bug, fix, or patch, or a README,
it looks for a subdirectory
of the main sources directory with that name (unless the destination
is a full pathname, in which case it looks for that directory).
If the directory exists, the user is given the option of working in
that directory, or of specifying a different directory (which is also
checked).
.sp 0.13i
Once the working directory has been found and made the current directory,
the user is prompted for a half-line description of what the program
does.
If no description is wanted (\fIe.g.\fR, a new version is being saved),
just hitting \s8RETURN\s10 will have no ill effects.
.sp 0.13i
The user is asked if he wants to use \fIunshar(1L)\fR to unpack the sources.
If he opts for \fIunshar\fR, he is asked if it worked;  if not, a shell is
started automatically.
If he does not want to use \fIunshar\fR, he may edit the sources or
start a shell, is then shown a listing of the directory, and finally prompted
for a name to copy the temporary file where \fIsavesrc\fR first puts the sources
(``/tmp/newsrc$$'') to.
.sp 0.13i
Once the files are unpacked, \fIsavesrc\fR looks for a README or READ_ME
file, and offers to show it to the user.
If it cannot find one, it asks if the user wants to edit one.
.sp 0.13i
Next, \fIsavesrc\fR deals with any manual pages just as described above,
except that they are copied to the main manual page directories, rather
than moved there.
The rationale for this is that while one does not usually want lots of
manual pages cluttering up a general source directory, for larger
software packages which merit directories of their own it is best
to keep the original distribution together, as this simplifies
packaging for re-distribution.
The option of copying the manual pages to a central location is given
because it is also convenient to have a canonical collection of
manual pages.
.sp 0.13i
The question of a Makefile comes next.
\fISavesrc\fR turns any ``makefile'' into ``Makefile'' as mentioned
before.
If no Makefile is present, the user is asked if one is hiding somewhere
(\fIe.g.\fR, ``Makefile.bsd''), and this is copied to Makefile.
If no Makefile at all can be found, a basic Makefile is generated
automatically, using the one-line program description and simple-mindedly
assuming that all the .c files are compiled up together.
For example, suppose we have a new game of pacman, being placed
in a directory called ``pacman''.
The one-line description we have given it is ``a new, improved version
of pacman'', and we have unshared four files, \fIpac.c\fR, \fIpac.h\fR,
\fIscore.c\fR, and \fItty.c\fR.
The default Makefile will contain:
.sp 0.13i
.ne 14
.in +0.7i
.nf
.ta 0.4i 0.8i
# pacman -- a new, improved version of pacman
.sp 0.2i
CFILES =		pac.c score.c tty.c
.sp 0.13i
OFILES =		pac.o score.o tty.o
.sp 0.13i
CFLAGS =		-O
.sp 0.13i
pacman:	 $(OFILES)
	cc $(CFLAGS) $(OFILES) -o pacman
.sp 0.13i
clean:
	rm -f *.o
.sp 0.2i
.fi
.in -0.7i
(Note that CFLAGS may be set in the environment or adjusted by editing
\fIsavesrc\fR;  its default is ``-O''.)
No attempts to include libraries are made;  the above example would
almost certainly need `` -ltermcap'' added to the ``cc'' line.
.sp 0.13i
The user is next offered a chance to edit the Makefile (which it is
sensible to accept).
.sp 0.13i
Finally, as for a single C program, the user is prompted for adding a
basic NOTES entry, asked if the program should be compiled (using just
``make''), offered a shell to twiddle or test it, and prompted for any
further NOTES entries.
If the program came from a netnews article, the basic NOTES entry will
include the author and the posting path, if possible, as well as the
program name, the current date, and the half-line program description.
.SH EXAMPLES
From \fIrn(1)\fR, ``| savesrc pacman'' will unpack a (presumably shar-ed)
article into $HOME/src/pacman, and prompt the user for the steps
necessary to compile and test it.
.sp 0.13i
``savesrc /usr/joe/mung.c mungstuff'' will save the file ``mungstuff''
as ``/usr/joe/mung.c'', and prompt for compiling etc.
.SH ENVIRONMENT VARIABLES
.ta 1i 3i
.nf
.sp 0.13i
\fBName	Default	Description\fR
.sp 0.13i
VISUAL	/usr/bin/vi	Used to edit files
EDITOR	none	Used if VISUAL is not set
SHELL	/bin/sh	Used to start a shell
PAGER	/usr/local/bin/more	Used to page output
srcdir	$HOME/src	Main sources directory
mandir	$HOME/man	Main manual page source directory
catdir	$HOME/man	Main pre-formatted manual page directory
CFLAGS	-O	Compiler options for Makefile entries
.fi
.SH FILES
/tmp/newsrc$$
.SH SEE ALSO
\fInote(1L), shar(1L), unshar(1L), rn(1), readnews(1)\fR
.SH AUTHOR
Written by Christine Robertson, 1986.
.SH WARNINGS
\fISavesrc\fR assumes that `` [ '' exists as a synonym for \fItest(1)\fR.
If you don't have it, either link \fItest\fR to it, or replace the
`` [ ... ] '' constructs with ``test ...''.
.sp 0.13i
The utilities \fIunshar(1L)\fR and \fInote(1L)\fR are also assumed;  they
may be replaced with ``sh'' and ``cat >> NOTES'', respectively.
.sp 0.13i
If your shell does not support # as the comment character, remove all
the # comments.
.sp 0.13i
This program was written to organize sources in the way the author likes
them.
There is no guarantee \fIyou\fR will like this too.
.SH BUGS
Please send all bug reports to {linus, ihnp4, decvax}!utzoo!toram!chris.
