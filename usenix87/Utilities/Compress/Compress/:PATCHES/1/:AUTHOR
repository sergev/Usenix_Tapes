Path: plus5!wuphys!wucs!we53!ltuxa!cuae2!ihnp4!cbosgd!mirror!sources-request
From: sources-request@mirror.UUCP
Newsgroups: mod.sources
Subject: v06i023:  Xenix patches to compress4.0 (compress.xenix)
Message-ID: <103@mirror.UUCP>
Date: 26 Jun 86 14:50:52 GMT
Sender: rs@mirror.UUCP
Lines: 306
Approved: rs@mirror.UUCP
Posted: Thu Jun 26 09:50:52 1986

Submitted by: condor!genrad!panda!talcott!seismo!vrdxhq!BMS-AT!stuart
Mod.sources: Volume 6, Issue 23
Archive-name: compress.xenix

[  The source that was submitted had the final hunk look like this:
	1380c1443
	< long int num, den;	/* never want 16-bit */
	---
	> count_int num, den;
	1407a1471,1473
	> #endif
	> #ifdef XENIX_16
	> 	fprintf(stderr, "XENIX_16, ");
   My copy, and the one in the mod.sources archive, doesn't have the
   "never want" comment.

   I patched a copy of the source and compiled and ran it.  Both
   the patched version and the "official" version work together,
   and generate identical output from identical input.  This holds
   for my 4.2BSD Vax750; no guarantees on other machines, and I
   don't have Xenix.  --r$]

	I recently received the shell archives for compress and related
utilities.  We are running a 16-bit Xenix machine as well as a 16/32 bit
motorola 6350.  The XENIX_16 code for compress did not work.  The
problem was:
	a) a problem with the large model code optimizer.
	b) the constant (1<<16) as assigned to maxcode evaluates
	   to zero on a 16 bit machine!
After fixing problem b, I removed the XENIX_16 code and instead declared
the large arrays as 'huge'.  This allows a small model program that uses
32-bit pointers only for codetab and htab.  This also removes the kludge
code for multiple arrays.  Defining the big constants as long
is not necessary on our compiler, but doesn't hurt and may help other
16-bit compilers.  I changed the logic slightly in compress() and
decompress() to allow the use of unsigned short for heavily used variables
containing code values.  This makes things about 5% faster on a 16-bit
machine.  Please mail me some comments about whether you appreciate
this mail.

	Stuart D. Gathman <vrdxhq!BMS-AT!stuart>

