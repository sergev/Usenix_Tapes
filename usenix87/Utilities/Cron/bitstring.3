.TH BITSTRING 3  "26 March 1987"
.UC 4
.SH NAME
bit_decl, bit_ref, bit_test, bit_set, bit_clear,
bit_setall, bit_clearall \- bit-string manipulation macros for C
.SH SYNOPSIS
.nf
.B #include <bitstring.h>
.PP
.B bit_decl(Name, Nbits)
.PP
.B bit_ref(Name)
.PP
.B bit_test(Name, BitNum)
.PP
.B bit_set(Name, BitNum)
.PP
.B bit_clear(Name, BitNum)
.PP
.B bit_setall(Name, Nbits)
.PP
.B bit_clearall(Name, Nbits)
.PP
.fi
.SH DESCRIPTION
These functions operate on strings of bits.  These strings are held in
integer arrays, but this detail is transparent in actual use.
.PP
.I Bit_decl
declares a bit string called
.I Name
as a C variable able to contain
.I Nbits
bits.  This is suitable for actually creating the variable.
.I Bit_ref
creates a reference to a bit-string called
.IR Name ;
this is suitable for declaring an external variable, or receiving a
bit string as a function argument.
.PP
.I Bit_test
is an expression that examines bit
.I BitNum
(numbered from 0) of string
.IR Name ,
evaluating to a non-zero if the bit is set, zero otherwise.
.PP
.I Bit_set
and
.I bit_clear
respectively set and clear bit
.I BitNum
(numbered from 0, as above) in string
.IR Name .
.PP
.I Bit_setall
and
.I bit_clearall
respectively set and clear all bits from 0 through
.I Nbits
(which must the actual length) of string
.IR Name .
.SH AUTHOR
.nf
Paul A. Vixie, Esq.
ucbvax!dual!ptsfa!vixie!paul
paul@vixie.UUCP
.fi
.SH EXAMPLE
.nf
#include <bitstring.h>
.PP
main()
{
    bit_decl(foobits, 300)
.PP
    . . .
    barfunc(foobits);
    . . .
}
.PP
barfunc(bits)
    bit_ref(bits)
{
    if (bit_test(bits, 25)) {
        bit_clearall(300)
        bit_set(bits, 26)
    }
}
.PP
.fi
(note: semicolons were not omitted accidentally, above: the macros that
generate declarations or statements have their own semicolons.)
.SH BUGS
Given the level of abstraction, it is possible to store the length of the
string internally, making it possible to do run-time checking on
.IR bit_test ,
.IR bit_set ,
and
.IR bit_clear ,
and making it unneccessary to pass the string length to
.I bit_setall
and
.IR bit_clearall .
This should be done as a compile-time option, determined by the value
of some macro at the point where <bitstring.h> is included.
