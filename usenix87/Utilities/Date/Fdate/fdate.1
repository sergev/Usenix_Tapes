.TH FDATE 1
.if n .ds lq '
.if n .ds rq '
.if t .ds lq `
.if t .ds rq '
.MU
.SH NAME
fdate \- format date to standard output
.SH SYNOPSIS
.B
fdate [-n]
.BR [-F c ]
args
.SH DESCRIPTION
.I Fdate
writes its arguments to standard output
just like
.IR echo (1).
With the option
.B \-n
the newline normally supplied at the end is supressed.
.PP
However, unlike echo,
.I fdate
recognizes certain patterns in its arguments, and replaces them
by various parts of the current date and time.
.PP
Each conversion specification is introduced by
the character
.BR % .
(If the option
.BR \-F c
is used, then the character
.I c
replaces the
.BR % .)
Any other characters are simply copied to the output.
Following the
.BR % ,
there may be
.TP
\-
an optional minus sign
.RB "\*(lq" "\-" "\*(rq"
which specifies
.I "left adjustment"
of the converted value
in the
indicated field;
.TP
\-
an optional digit string specifying a
.I "field width;"
if the converted value has fewer characters
than the field width
it will be blank-padded on the left (or right,
if the left-adjustment indicator has been
given) to make up the field width;
if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
.TP
\-
an optional period
.RB \&\*(lq . \&\*(rq
which serves to
separate the field width from the
next digit string;
.TP
\-
an optional digit string
specifying a
.I maximum
.I width
which specifies
the maximum number of characters
to be printed from this conversion;
.TP
\-
an optional plus sign
.RB \*(lq + \*(rq
which serves to introduce the next digit string;
.TP
\-
an optional digit string
specifying an increment to be applied to the current time.
The increment is in units indicated by the conversion character.
Only
.RB \*(lq y \*(rq,
.RB \*(lq m \*(rq,
.RB \*(lq d \*(rq,
.RB \*(lq H \*(rq,
.RB \*(lq M \*(rq,
and
.RB \*(lq S \*(rq
may have increments, others are ignored.
Increments are applied in increasing order of signifigance, and
all are applied before any output.
.TP
\-
an optional second plus sign
.RB \*(lq + \*(rq
indicating that this conversion is to produce no output.
.TP
\-
a character which indicates the value to be inserted.
.PP
The conversion characters
and the values that replace them are
.TP
.B d
The day of the month (an integer from 1 to 31).
.TP
.B m
The month of the year (an integer from 1 to 12).
.TP
.B y
The current year (relative to the beginning of the century).
.TP
.B D
The day, month and year in the format: dd/mm/yy. If zero fill
was specified, then each of the three fields is guaranteed to
be exactly two digits wide (with a leading zero if necessary).
.TP
.B Y
The day, month, and year in the format: yy/mm/dd. Zero fill operates
in the same way as for
.BR %D .
.TP
.B H
The hour of the day.
.TP
.B M
The minute of the hour.
.TP
.B S
The second of the minute.
.TP
.B X
An approximation to the number of milliseconds past the second of
the minute.
.TP
.B T
The current time in the format: hh:mm:ss. Zero fill operates in the
same way as for
.BR %D .
.TP
.B R
The hour of the day, using a 12 hour clock (an integer between
1 and 12), in place of the 24 hour clock used by
.BR %H .
.TP
.B r
The current time in the format: hh:mm:ss XM, where
.I X
is either
.B A
or
.BR P .
This gives a twelve hour clock, in contrast to the 24 hour clock
obtained through
.BR %T .
Zero fill works in the same manner as for
.BR %D .
.TP
.B w
The day of the week (an integer between 0 and 6).
.TP
.B A
The name of the day of the week.
.TP
.B a
The first three characters of the name of the day of the week
(ie: equivalent to
.BR %.3A ).
.TP
.B L
The name of the current month.
.TP
.B l
The first three characters of the name of the current month.
.TP
.B j
The julian day (day of the year), an integer between 1 and 366.
.TP
.B z
The name of the local timezone (as produced by
.BR timezone (3)).
.TP
.B C
A 24 character string containing the current time as formatted by
.BR ctime (3),
but without the trailing newline or null.
.TP
.B p
Either
.B am
or
.BR pm ,
as appropriate.
.TP
.B P
Either
.B AM
or
.BR PM ,
as appropriate
.RB ( %p 
in capitals).
.TP
.B h
One of the four strings: \*(lqst\*(rq, \*(lqnd\*(rq, \*(lqrd\*(rq, or \*(lqth\*(rq, whichever
is appropriate for the current day of the month.
.TP
.B %
A \*(lq%\*(rq; the field width, justification, fill, and maximum characters
indications are ignored if specified.
.TP
.B n
A newline (widths etc. are ignored).
.TP
.B t
A tab (widths are ignored here too).
.PP
A small field width will never cause truncation of a value, however
a small maximum width value will. A maximum width parameter larger
than the width of the value is ignored, but a large field width
causes padding (on the left or right, with spaces or zeroes).
.PP
.B Examples
.br
To print the date in the same format that
.BR date (1)
uses:
.IP
fdate %.19C %z 19%02y
.PP
To make a C program segment, containing a character string
with the current date (for compilation date stamping):
.RS
.nf
.sp
fdate 'char version [\^] = {%n%t"prog version nn, %0Y %0T"%n};'
.fi
.RE
.PP
To set a shell variable to the current hour of the day:
.IP
var=`fdate %H`
.PP
To run some commands in an hour from now:
.IP
at `fdate %02+1H%02M`
.br
commands
.br
^D
.SH "SEE ALSO"
ctime(3),
date(1),
echo(1),
sh(1)
.SH BUGS
There is no %Z for zodiac signs.
.br
There is no way to go back in time.
(Though if the day, month, etc. are not wanted,
going forward 23 hours and 55 minutes is close enough
to going back 5 minutes).
.br
Going forward a month from January 31st
is not what everybody expects.
.br
Going forward around about the time that daylight saving turns
off and on could also be considered strange.
.br
On Bell System V, the \fB%X\fP conversion always returns 0.
