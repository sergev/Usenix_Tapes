.TH MAKEMAKE 1
.SH NAME
makemake \- construct a makefile from C, Pascal, LEX, or Yacc files.
.SH SYNOPSIS
.B makemake
[-l] targetname files...
.SH DESCRIPTION
.I Makemake
will construct a correct makefile for a single target binary or library.
The -l flag selects that a library should be constructed, rather than
a binary, and the targetname is either the library name or binary name
as appropriate.
.B All
files should be supplied to
.IR makemake ,
including all header files, yacc files, lex files, and any other files
that are appropriate to the program or library.
Normal file naming conventions apply, with .p and .i files being Pascal
source and include files repectively.
.P
The constructed makefile will have text in it which allows the printing,
archiving to tape, and netsending of the source.
Most importantly, "make depend" will construct a dependency list
automatically for the given source, although only C, Yacc, LEX, and Pascal
files will be searched for dependencies.
The dependencies looked for are only the ones that arise from the
syntactic inclusion of one file within another using the "#include"
facility, although "make depend" will correctly construct dependencies
for nested inclusions.
.P
This program is terribly useful for a changing single target software
system like a compiler, graphics package, and similar beasts.
After significant changes to source, making the whole system properly
again becomes as simple as:
.sp
.nf
makemake griffin *.h *.p *.c README testfile
make depend
make install
.fi
.sp
.SH FILES
Makefile
.SH BUGS
Really only works for a single target binary or library.
Cannot cope (I don't think) with the concept of files scattered
over many directories.
