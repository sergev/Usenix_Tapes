Relay-Version: version B 2.10.3 4.3bsd-beta 6/6/85; site plus5.UUCP
Posting-Version: version B 2.10.2 9/18/84 +MMDF+2.11; site ukc.UUCP
Path: plus5!wuphys!wucs!busch!we53!mgnetp!ihnp4!mhuxn!mhuxr!ulysses!allegra!mit-eddie!think!harvard!seismo!mcvax!ukc!rlh
From: rlh@ukc.UUCP (Richard Hellier)
Newsgroups: net.sources
Subject: B tree code in C
Message-ID: <301@ukc.UUCP>
Date: 17 Oct 85 17:23:49 GMT
Date-Received: 19 Oct 85 21:11:18 GMT
References: <608@hercules.UUCP>
Reply-To: rlh@eagle.UUCP (Richard Hellier)
Distribution: net
Organization: U of Kent at Canterbury, Canterbury, UK
Lines: 919

Followup-To:

In article <608@hercules.UUCP> kevinf@hercules.UUCP (Kevin Fetterly) writes:
>I am looking for a commercial or university package of B or B+ support routines
>written in C.  If you know of a package please send mail.
>
Several people have asked for a B-tree package recently so here's a module
I wrote some while back to implement B-trees.  The code is lifted from
Wirth's "Algorithms+Data Structures=Programs" plus B.Kruse, "Data Structures
and Program Design".

I haven't made the module into a library source as the order of the B-tree
is controlled by a #define, for efficiciency.  If you just decided on a
particular type of tree, e.g. 2-3, you could easily make up a library.

The interface to the routines is via a DATUM typedef.  This structure contains
two fields, KEY and INFO, themselves typedefs.  The KEY is of course the key
you want to associate with the data in the INFO field.

In addition to defining your own flavour of these structures, you will need
to define:-


	*		A key comparison routine; A sample one
			is given as KeyCmp().

	*		A "null" datum -- that is, a value that
			can be distinguished from all "legal"
			values.

Anyway, good luck with the code -- let me know what changes you make.

