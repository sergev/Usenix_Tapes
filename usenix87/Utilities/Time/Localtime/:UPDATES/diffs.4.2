*** date.c.4.2	Mon Apr 28 02:32:47 1986
--- date.c.4.2.new	Mon Apr 28 02:33:37 1986
***************
*** 12,18
  #define WTMP "/usr/adm/wtmp"
  
  struct	timeval tv;
- struct	timezone tz;
  char	*ap, *ep, *sp;
  int	uflag;
  

--- 12,17 -----
  #define WTMP "/usr/adm/wtmp"
  
  struct	timeval tv;
  char	*ap, *ep, *sp;
  int	uflag;
  
***************
*** 16,22
  char	*ap, *ep, *sp;
  int	uflag;
  
- char	*timezone();
  static	int	dmsize[12] =
      { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  static char *usage = "usage: date [-u] [yymmddhhmm[.ss]]\n";

--- 15,20 -----
  char	*ap, *ep, *sp;
  int	uflag;
  
  static	int	dmsize[12] =
      { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  static char *usage = "usage: date [-u] [yymmddhhmm[.ss]]\n";
***************
*** 26,31
  	{ "{", "", "", 0 }
  };
  
  char	*ctime();
  char	*asctime();
  struct	tm *localtime();

--- 24,30 -----
  	{ "{", "", "", 0 }
  };
  
+ char	*getenv();
  char	*ctime();
  char	*asctime();
  struct	tm *localtime();
***************
*** 30,35
  char	*asctime();
  struct	tm *localtime();
  struct	tm *gmtime();
  
  main(argc, argv)
  	int argc;

--- 29,35 -----
  char	*asctime();
  struct	tm *localtime();
  struct	tm *gmtime();
+ extern char *tz_abbr;
  
  main(argc, argv)
  	int argc;
***************
*** 39,45
  	int wf, rc;
  
  	rc = 0;
! 	gettimeofday(&tv, &tz);
  	if (argc > 1 && strcmp(argv[1], "-u") == 0) {
  		argc--;
  		argv++;

--- 39,45 -----
  	int wf, rc;
  
  	rc = 0;
! 	gettimeofday(&tv, (struct timezone *)0);
  	if (argc > 1 && strcmp(argv[1], "-u") == 0) {
  		argc--;
  		argv++;
***************
*** 46,51
  		uflag++;
  	}
  	if (argc > 1) {
  		ap = argv[1];
  		wtmp[0].ut_time = tv.tv_sec;
  		if (gtime()) {

--- 46,56 -----
  		uflag++;
  	}
  	if (argc > 1) {
+ 		if (settz(ap = getenv("TZ")) < 0) {
+ 			fprintf(stderr, "Unknown timezone \"%s\"\n",
+ 			    ap ? ap : "null");
+ 			exit(1);
+ 		}
  		ap = argv[1];
  		wtmp[0].ut_time = tv.tv_sec;
  		if (gtime()) {
***************
*** 54,63
  		}
  		/* convert to GMT assuming local time */
  		if (uflag == 0) {
! 			tv.tv_sec += (long)tz.tz_minuteswest*60;
! 			/* now fix up local daylight time */
! 			if (localtime(&tv.tv_sec)->tm_isdst)
! 				tv.tv_sec -= 60*60;
  		}
  		tv.tv_sec = tv.tv_sec;
  		if (settimeofday(&tv, (struct timezone *)0) < 0) {

--- 59,119 -----
  		}
  		/* convert to GMT assuming local time */
  		if (uflag == 0) {
! 			/*
! 			 * Do this by determining what the given time
! 			 * is when converted to local time, and when
! 			 * converted to GMT and taking the difference.
! 			 * This works correctly regardless of whether
! 			 * local time is DST or not.
! 			 * The loop usually runs twice, once to correct the
! 			 * time, and once to check the correction was accurate.
! 			 * An extra iteration can be caused by setting the time
! 			 * just about when DST turns on or off.
! 			 * If we iterate more than a couple of times, then
! 			 * the idiot root moron has asked to set the time to
! 			 * something in the "dead" zone where DST has just
! 			 * turned on, and the times don't exist!
! 			 * The ugly "if" statements are to handle wierd cases
! 			 * that arise setting the time just about midnight on
! 			 * Jan 1 after a year that was a leap year.
! 			 * How close to midnight it has to be depends on how
! 			 * close to Greenwich you are, whether before or after
! 			 * midnight depends on whether you are East or West.
! 			 */
! 			struct tm gmt;
! 			struct tm local;
! 			register long diff;
! 			register int iters = 0;
! 	 
! 			gmt = *gmtime(&tv.tv_sec);
! 			do {
! #define	isleap(yr)	((yr) % 4 == 0 && ((yr) % 100 != 0 || (yr) % 400 == 0))
! 				local = *localtime(&tv.tv_sec);
! 				diff = gmt.tm_year - local.tm_year;
! 				diff *= 365;
! 				if (gmt.tm_year > local.tm_year) {
! 					if (isleap(local.tm_year))
! 						diff++;
! 				} else if (local.tm_year > gmt.tm_year) {
! 					if (isleap(gmt.tm_year))
! 						diff--;
! 				}
! 				diff += gmt.tm_yday - local.tm_yday;
! 				diff *= 24;
! 				diff += gmt.tm_hour - local.tm_hour;
! 				diff *= 60;
! 				diff += gmt.tm_min - local.tm_min;
! 				diff *= 60;
! 				diff += gmt.tm_sec - local.tm_sec;
! 				tv.tv_sec += diff;
! #undef	isleap
! 			} while (diff != 0 && ++iters < 5);
! 			if (iters >= 5) {
! 				fprintf(stderr,
! 				    "date: %.24s is in the time warp!\n",
! 				    asctime(&gmt));
! 				exit(1);
! 			}
  		}
  		tv.tv_sec = tv.tv_sec;
  		if (settimeofday(&tv, (struct timezone *)0) < 0) {
***************
*** 76,85
  		ap = asctime(gmtime(&tv.tv_sec));
  		tzn = "GMT";
  	} else {
! 		struct tm *tp;
! 		tp = localtime(&tv.tv_sec);
! 		ap = asctime(tp);
! 		tzn = timezone(tz.tz_minuteswest, tp->tm_isdst);
  	}
  	printf("%.20s", ap);
  	if (tzn)

--- 132,139 -----
  		ap = asctime(gmtime(&tv.tv_sec));
  		tzn = "GMT";
  	} else {
! 		ap = ctime(&tv.tv_sec);
! 		tzn = tz_abbr;
  	}
  	printf("%.20s", ap);
  	if (tzn)
***************
*** 83,90
  	}
  	printf("%.20s", ap);
  	if (tzn)
! 		printf("%s", tzn);
! 	printf("%s", ap+19);
  	exit(rc);
  }
  

--- 137,144 -----
  	}
  	printf("%.20s", ap);
  	if (tzn)
! 		printf("%s ", tzn);
! 	printf("%s", ap+20);
  	exit(rc);
  }
  
