*** date.c.4.3	Mon Apr 28 02:04:30 1986
--- date.c.4.3.new	Mon Apr 28 02:34:09 1986
***************
*** 25,31
  #define WAITDATEACK	5	/* seconds */
  
  struct	timeval tv, now;
- struct	timezone tz;
  char	*ap, *ep, *sp;
  int	uflag;
  

--- 25,30 -----
  #define WAITDATEACK	5	/* seconds */
  
  struct	timeval tv, now;
  char	*ap, *ep, *sp;
  int	uflag;
  
***************
*** 29,35
  char	*ap, *ep, *sp;
  int	uflag;
  
- char	*timezone();
  static	int	dmsize[12] =
      { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  static char *usage = "usage: date [-u] [yymmddhhmm[.ss]]\n";

--- 28,33 -----
  char	*ap, *ep, *sp;
  int	uflag;
  
  static	int	dmsize[12] =
      { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  static char *usage = "usage: date [-u] [yymmddhhmm[.ss]]\n";
***************
*** 39,44
  	{ "{", "", "", 0 }
  };
  
  char	*ctime();
  char	*asctime();
  struct	tm *localtime();

--- 37,43 -----
  	{ "{", "", "", 0 }
  };
  
+ char	*getenv();
  char	*ctime();
  char	*asctime();
  struct	tm *localtime();
***************
*** 43,48
  char	*asctime();
  struct	tm *localtime();
  struct	tm *gmtime();
  
  char *strcpy();
  char *username, *getlogin();

--- 42,48 -----
  char	*asctime();
  struct	tm *localtime();
  struct	tm *gmtime();
+ extern char *tz_abbr;
  
  char *strcpy();
  char *username, *getlogin();
***************
*** 66,72
  	extern int errno;
  	int bytenetorder(), bytehostorder();
  
! 	(void) gettimeofday(&tv, &tz);
  	now = tv;
  
  	if (argc > 1 && strcmp(argv[1], "-u") == 0) {

--- 66,72 -----
  	extern int errno;
  	int bytenetorder(), bytehostorder();
  
! 	(void) gettimeofday(&tv, (struct timezone *)0);
  	now = tv;
  
  	if (argc > 1 && strcmp(argv[1], "-u") == 0) {
***************
*** 85,90
  		printf("You are not superuser: date not set\n");
  		goto display;
  	}
  	username = getlogin();
  	if (username == NULL)		/* single-user or no tty */
  		username = "root";

--- 85,94 -----
  		printf("You are not superuser: date not set\n");
  		goto display;
  	}
+ 	if (settz(ap = getenv("TZ")) < 0) {
+ 		fprintf(stderr, "Unknown timezone \"%s\"\n", ap ? ap : "null");
+ 		exit(1);
+ 	}
  	username = getlogin();
  	if (username == NULL)		/* single-user or no tty */
  		username = "root";
***************
*** 98,107
  	}
  	/* convert to GMT assuming local time */
  	if (uflag == 0) {
! 		tv.tv_sec += (long)tz.tz_minuteswest*60;
! 		/* now fix up local daylight time */
! 		if (localtime((time_t *)&tv.tv_sec)->tm_isdst)
! 			tv.tv_sec -= 60*60;
  	}
  	
  /*

--- 102,161 -----
  	}
  	/* convert to GMT assuming local time */
  	if (uflag == 0) {
! 		/*
! 		 * Do this by determining what the given time
! 		 * is when converted to local time, and when
! 		 * converted to GMT and taking the difference.
! 		 * This works correctly regardless of whether
! 		 * local time is DST or not.
! 		 * The loop usually runs twice, once to correct the
! 		 * time, and once to check the correction was accurate.
! 		 * An extra iteration can be caused by setting the time
! 		 * just about when DST turns on or off.
! 		 * If we iterate more than a couple of times, then
! 		 * the idiot root moron has asked to set the time to
! 		 * something in the "dead" zone where DST has just
! 		 * turned on, and the times don't exist!
! 		 * The ugly "if" statements are to handle wierd cases
! 		 * that arise setting the time just about midnight on
! 		 * Jan 1 after a year that was a leap year.
! 		 * How close to midnight it has to be depends on how close
! 		 * to Greenwich you are, whether before or after midnight
! 		 * depends on whether you are East or West.
! 		 */
! 		struct tm gmt;
! 		struct tm local;
! 		register long diff;
! 		register int iters = 0;
! 
! 		gmt = *gmtime((time_t *)&tv.tv_sec);
! 		do {
! #define	isleap(yr)	((yr) % 4 == 0 && ((yr) % 100 != 0 || (yr) % 400 == 0))
! 			local = *localtime((time_t *)&tv.tv_sec);
! 			diff = gmt.tm_year - local.tm_year;
! 			diff *= 365;
! 			if (gmt.tm_year > local.tm_year) {
! 				if (isleap(local.tm_year))
! 					diff++;
! 			} else if (local.tm_year > gmt.tm_year) {
! 				if (isleap(gmt.tm_year))
! 					diff--;
! 			}
! 			diff += gmt.tm_yday - local.tm_yday;
! 			diff *= 24;
! 			diff += gmt.tm_hour - local.tm_hour;
! 			diff *= 60;
! 			diff += gmt.tm_min - local.tm_min;
! 			diff *= 60;
! 			diff += gmt.tm_sec - local.tm_sec;
! 			tv.tv_sec += diff;
! #undef	isleap
! 		} while (diff != 0 && ++iters < 5);
! 		if (iters >= 5) {
! 			fprintf(stderr, "date: %.24s is in the time warp!\n",
! 			    asctime(&gmt));
! 			exit(1);
! 		}
  	}
  	
  /*
***************
*** 215,224
  		ap = asctime(gmtime((time_t *)&tv.tv_sec));
  		tzn = "GMT";
  	} else {
! 		struct tm *tp;
! 		tp = localtime((time_t *)&tv.tv_sec);
! 		ap = asctime(tp);
! 		tzn = timezone(tz.tz_minuteswest, tp->tm_isdst);
  	}
  	printf("%.20s", ap);
  	if (tzn)

--- 269,276 -----
  		ap = asctime(gmtime((time_t *)&tv.tv_sec));
  		tzn = "GMT";
  	} else {
! 		ap = ctime((time_t *)&tv.tv_sec);
! 		tzn = tz_abbr;
  	}
  	printf("%.20s", ap);
  	if (tzn)
***************
*** 222,229
  	}
  	printf("%.20s", ap);
  	if (tzn)
! 		printf("%s", tzn);
! 	printf("%s", ap+19);
  }
  
  gtime()

--- 274,281 -----
  	}
  	printf("%.20s", ap);
  	if (tzn)
! 		printf("%s ", tzn);
! 	printf("%s", ap+20);
  }
  
  gtime()
