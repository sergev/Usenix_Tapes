.TH ZONK 2 "UW"
.SH NAME
zonk \- send a signal to all processes owned by a user
.SH SYNOPSIS
.SB
.SF int zonk uid signal
int uid, signal;
.SE
.SH DESCRIPTION
.I Zonk
sends the signal
.I signal
to all processes in the system with effective uid equal to
.IR uid .
This call is very indiscriminatory; it even sends the signal to itself.
.PP
The
.I uid
must be the effective uid of the invoking process,
or the invoking process must have an effective uid of the Super User.
.I Zonk
explicitly checks for a
.I uid
of zero and disallows such a call.
.SH "RETURN VALUE
Upon successful completion, a count of the number of affected
processes is returned.
Otherwise, a value of \-1 is returned and
.I errno
is set to indicate the error.
.PP
A signal number of zero may be used to count processes in the system
owned by the given
.I uid
without sending them any signal.
.SH "ERRORS
.I Zonk
will fail and no signal will be sent if any of the following
occur:
.TP 15
[EPERM]
The sending process is not the super-user and its effective
user id is not the same as \fIuid\fP.
.TP 15
[EINVAL]
.I Uid
is equal to zero, or
.I signal
is not between 0 and 31 inclusive.
.SH "SEE ALSO"
kill(2), signal(2), zonk(1).
.SH BUGS
This should artificially increase the priority of all killed processes,
just in case the system is terribly clogged and needs proc slots
but there is so much happening that it doesn't get around to them for a while.
.PP
This is a Waterloo-specific system call designed originally to send
SIGKILL to processes so that a student could be sure to kill off all
runaway processes.
That problem should be addressed more directly.
