.TH STRING 3C++ "22 August 1985"
.UC 4
.SH NAME
string \- string data class for C++ programs
.SH SYNOPSIS
.ds s \fIstring\fP
.nf
Required include file:
.RS
\fB#include <string.h>\fP
.RE

Compilation command:
.RS
\fBCC\fP  ...  \fB\-lC++\fP
.RE

Variable definition:
.RS
\fBstring\fP \*s [ \fB= \fIchar*\fR | \*s | \fIint\fP ] \fB;\fR
.RE

Available operators:
.RS
.TS
cfI  lfI
c    l.
Operator	Function
_
\&=	assignment
+	concatenation
+=	concatenation & assignment
()	substring selection or assignment
<<	output to an \fIostream\fP
>>	input from an \fIistream\fP
\&==	test for equality
!=	test for non-equality
>	test for greater-than
<	test for less-than
>=	test for greater-than-or-equality
<=	test for less-than-or-equality
.TE
.RE

Available functions:
.RS
int
\*s.strlen()

char*
\*s.charptr()

int
\*s.index(char c)

int
\*s.rindex(char c)

string
\*s.left(int n)

string
\*s.right(int n)
.RE
.fi
.SH DESCRIPTION
The C++ class \*s implements a dynamic string type similar to that
found in such languages as BASIC, Icon and SNOBOL.
Storage is dynamically maintained for \*s variables so that they will
grow and shrink as needed.
.PP
A \*s variable can be created from an array of characters (or a
character pointer), from another \*s, or from an integer.
In the latter case, the value of the \*s is the ASCII representation
of the integer.
Automatic conversion from any of these basic data types to \*s will
be performed whenever possible.
To wit, whenever one operand of an operator is a \*s and the other
is not the C++ compiler will convert the non-\*s operand to \*s if
possible.
When an explicit conversion is desired, the constructor function
.ce
string(\fIargument\fP)
may be invoked.
This will return a new string and allows such constructs as
`string("Hello").left(10)' to be used.
.PP
The following operators work as you would expect:
.ce
= == != < > <= >=
Note that the assignment operator automatically adjusts the length
of the destination \*s and the amount of memory allocated to it.
The operators
.ce
<< and >>
provide output to an \fIostream\fP and input from an \fIistream\fP
as defined in <stream.h>.
.PP
The ``+'' operator provides \*s concatenation.
A new \*s is created with exactly enough space to hold the
combination of the operand \fIstrings\fP.
Note that the expression
.ce
\*s + \fIint\fP
performs string concatenation and not integer addition.
.PP
The ``+='' operator concatenates the right-hand \*s to the left-hand
\*s and assigns the result to the left-hand \*s.
The following two C++ statements perform the same function:
.RS
.nf
str1 += str2;
str1 = str1 + str2;
.fi
.RE
.PP
A substring may be referenced with the expression
.ce
\*s\fB(\fIstart\fB, \fIend\fB)\fR
where \fIstart\fP and \fIend\fP are the indices of the first and
last characters, respectively.
The index of the first character is zero.
The second argument may be omitted (or -1) to indicate the entire
right hand portion of the \*s.
A substring may be replaced with the expression
.ce
\*s\fB(\fIstart\fB, \fIend\fB, \fInewstring\fB)\fR
where \fIstart\fP and \fIend\fP are the indices of the first and
last characters, respectively, and \fInewstring\fP is a replacement
\*s.
The new \*s and the substring need not be the same length.
If they are not then \*s will be lengthened or shortened as required.
.PP
The \fIstrlen\fP member function returns the number of characters in
a \*s.
.PP
The \fIcharptr\fP member function returns the address of the
embedded character array of a \*s.
Note that this function is intended \fBonly\fP to allow use of \*s
variables with older subroutines requiring character arrays.
For this reason, the character arrays embedded with \*s string
variables are always NULL terminated.
It is not safe to use this address to change or access substrings of
a \*s since the member functions of this class freely deallocate and
reallocate the embedded character arrays.
.PP
The \fIindex\fP member function returns the index (subscript) of the
first occurrence of character \fIc\fP in the \*s.
The \fIrindex\fP member function returns the index of the last
occurrence.
.PP
The member functions \fIleft\fP and \fIright\fP return new
\fIstrings\fP of length \fIn\fP with the original \*s left- or
right-justified, respectively.
.SH EXAMPLES
The following are legal statements or expressions using
\*s variables, functions, and operators:
.RS
.nf
.ta 3i
string foo = "Foo";
string bar;
int ivar;

cout << foo;	/* prints ``Foo'' */
cout << foo << "\en";	/* prints ``Foo\en'' */

bar = foo + " bar";	/* assigns ``Foo bar'' to bar */

cout << bar + 2;	/* prints ``Foo bar2'' */

i = bar.strlen();	/* assigns 7 to ivar */

printf ("%s", foo.charptr());	/* prints foo */

foo = bar(1, 4);	/* assigns "oo b" to bar */
bar(1, 4, " Hello! ");	/* changes bar to "F Hello! ar" */

foo = "a";	/* assigns ``a'' to foo */
bar = "b";	/* assigns ``b'' to bar */
(a == b)	/* evaluates to 0 */
(a < b)	/* evaluates to 1 */
.SH FILES
/usr/include/CC/string.h
.br
/usr/include/CC/stream.h
.SH "SEE ALSO"
The C++ documentation from AT&T.
.SH AUTHOR
Arthur Zemon, FileNet Corp.
.SH BUGS
The current implementation was not built with run-time efficiency in
mind.
There is undoubtedly much room for improvement.
.PP
The \*s library beats the default memory allocation routines
(\fBnew\fP and \fBdelete\fP, which in turn call \fImalloc(3)\fP and
\fIfree(3)\fP) to death.
.PP
Since there are some inconsistencies in the code generated by the
current C++ compiler, a small amount of heap space is often ``lost''
during the life of a program.
.PP
The current C++ compiler will not allow static \*s variables.
