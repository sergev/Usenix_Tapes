/* This file contains the definitions and documentation for the
   machine modes used in the the GNU compiler.
   Copyright (C) 1987 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.  No author or distributor
accepts responsibility to anyone for the consequences of using it
or for whether it serves any particular purpose or works at all,
unless he says so in writing.  Refer to the GNU CC General Public
License for full details.

Everyone is granted permission to copy, modify and redistribute
GNU CC, but only under the conditions described in the
GNU CC General Public License.   A copy of this license is
supposed to have been given to you along with GNU CC so you
can know your rights and responsibilities.  It should be in a
file named COPYING.  Among other things, the copyright notice
and this notice must be preserved on all copies.  */


/* This file defines all the MACHINE MODES used by GNU CC.

   A machine mode specifies a size and format of data
   at the machine level.

   Each RTL expression has a machine mode.

   At the syntax tree level, each ..._TYPE and each ..._DECL node
   has a machine mode which describes data of that type or the
   data of the variable declared.  */

/* The first argument is the internal name of the machine mode
   used in the C source.
   By convention these are in UPPER_CASE, except for the word  "mode".

   The second argument  is the name of the machine mode in the
   external ASCII format read by for both the rtl and tree.
   By convention these names in UPPER_CASE.

   Third argument states the kind of representation:
   MODE_INT - integer
   MODE_FLOAT - floating
   MODE_COMPLEX_INT - pair of integers
   MODE_COMPLEX_FLOAT - pair of floats
   MODE_FUNCTION - Algol or Pascal function-variable incl. static chain
   MODE_RANDOM - anything else

   Fourth argument is the size of the object, in bytes.
   It is zero when the size is meaningless or not determined.

   Fifth arg is size of subunits of the object, in bytes.
   It is same as the fourth argument except for complexes and EPmode,
   since they are really made of two equal size subunits.  */

/* VOIDmode is used when no mode needs to be specified,
   as for example on CONST_INT RTL expressions.  */
DEF_MACHMODE (VOIDmode, "VOID", MODE_RANDOM, 0, 0)

DEF_MACHMODE (QImode, "QI", MODE_INT, 1, 1)		/* signed types */
DEF_MACHMODE (HImode, "HI", MODE_INT, 2, 2)
DEF_MACHMODE (SImode, "SI", MODE_INT, 4, 4)
DEF_MACHMODE (DImode, "DI", MODE_INT, 8, 8)
DEF_MACHMODE (TImode, "TI", MODE_INT, 16, 16)
DEF_MACHMODE (QFmode, "QF", MODE_FLOAT, 1, 1)
DEF_MACHMODE (HFmode, "HF", MODE_FLOAT, 2, 2)		/* floating types */
DEF_MACHMODE (SFmode, "SF", MODE_FLOAT, 4, 4)
DEF_MACHMODE (DFmode, "DF", MODE_FLOAT, 8, 8)
DEF_MACHMODE (TFmode, "TF", MODE_FLOAT, 16, 16)
DEF_MACHMODE (CQImode, "CQI", MODE_COMPLEX_INT, 2, 1)
DEF_MACHMODE (CHImode, "CHI", MODE_COMPLEX_INT, 4, 2)	/* complex ints */
DEF_MACHMODE (CSImode, "CSI", MODE_COMPLEX_INT, 8, 4)
DEF_MACHMODE (CDImode, "CDI", MODE_COMPLEX_INT, 16, 8)
DEF_MACHMODE (CTImode, "CTI", MODE_COMPLEX_INT, 32, 16)
DEF_MACHMODE (CQFmode, "CQF", MODE_COMPLEX_FLOAT, 2, 1)
DEF_MACHMODE (CHFmode, "CHF", MODE_COMPLEX_FLOAT, 4, 2)	/* complex floats */
DEF_MACHMODE (CSFmode, "CSF", MODE_COMPLEX_FLOAT, 8, 4)
DEF_MACHMODE (CDFmode, "CDF", MODE_COMPLEX_FLOAT, 16, 8)
DEF_MACHMODE (CTFmode, "CTF", MODE_COMPLEX_FLOAT, 32, 16)

/* BImode is used only in FIELD_DECL nodes for bit fields
   whose size and alignment are not such as to fit any other mode.  */
DEF_MACHMODE (BImode, "BI", MODE_INT, 0, 0)	/* signed bit field */

/* BLKmode is used for structures, arrays, etc.
   that fit no more specific mode.  */
DEF_MACHMODE (BLKmode, "BLK", MODE_RANDOM, 0, 0)

/* Function-variable that includes a static chain.  */
DEF_MACHMODE (EPmode, "EP", MODE_RANDOM, 8, 4)

/* The symbol Pmode stands for one of the above machine modes (usually SImode).
   The tm file specifies which one.  It is not a distinct mode.  */

/*
Local variables:
mode:c
version-control: t
End:
*/
