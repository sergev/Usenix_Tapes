/* This file contains the definitions and documentation for the
   machine modes used in the the GNU compiler.
   Copyright (C) 1987 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.  No author or distributor
accepts responsibility to anyone for the consequences of using it
or for whether it serves any particular purpose or works at all,
unless he says so in writing.  Refer to the GNU CC General Public
License for full details.

Everyone is granted permission to copy, modify and redistribute
GNU CC, but only under the conditions described in the
GNU CC General Public License.   A copy of this license is
supposed to have been given to you along with GNU CC so you
can know your rights and responsibilities.  It should be in a
file named COPYING.  Among other things, the copyright notice
and this notice must be preserved on all copies.  */

 
/* The third argument can be:
   "x" for an exceptional code (fits no category).
   "s" for a statement code.
   "t" for a type object code.

   "c" for codes for constants.
   "d" for codes for declarations (also serving as variable refs).
   "r" for codes for references to storage.
   "e" for codes for other kinds of expressions.  */

/* Any erroneous construct is parsed into a node of this type.
   This type of node is accepted without complaint in all contexts
   by later parsing activities, to avoid multiple error messages
   for one error.
   No fields in these nodes are used except the TREE_CODE.  */
DEFTREECODE (ERROR_MARK, "error_mark", "x", 0)

/* Used to represent a name (such as, in the DECL_NAME of a decl node).
   Internally it looks like a STRING_CST node.
   There is only one IDENTIFIER_NODE ever made for any particular name.
   Use `get_identifier' to get it (or create it, the first time).  */
DEFTREECODE (IDENTIFIER_NODE, "identifier_node", "x", 7)

/* Has the TREE_VALUE and TREE_PURPOSE fields.  */
/* These nodes are made into lists by chaining through the
   TREE_CHAIN field.  The elements of the list live in the
   TREE_VALUE fields, while TREE_PURPOSE fields are occasionally
   used as well to get the effect of Lisp association lists.  */
DEFTREECODE (TREE_LIST, "tree_list", "x", 2)

/* C++: Use for overloaded operators.  Holds the operator we wish to
   overload.  After its arguments are counted, we can give it a name.
   Operand 0 is the token itself.  Operand 1 is the TREECODE of
   the token, which may be useful if the token is unambiguous.  */
DEFTREECODE (OP_EXPR, "operator placeholder", "x", 2)

/* Use for specifying type conversion functions.  Operand 1
   is the outer type, while operand 1 may contain an abstract
   declarator.  When these two are put together, we can
   call `groktypename' (or its equivalent) to get the _TYPE
   node which is then converted to a name representing the type we
   are defining the conversion for.  */
DEFTREECODE (TYPE_EXPR, "typename placeholder", "x", 2)

/* Each data type is represented by a tree node whose code is one of
   the following:  */
/* Each node that represents a data type has a component TYPE_SIZE
   containing a tree that is an expression for the size in some units.
   The TYPE_SIZE_UNIT component is the number of bits in a unit.
   The TYPE_MODE contains the machine mode for values of this type.
   The TYPE_POINTER_TO field contains a type for a pointer to this type,
     or zero if no such has been created yet.
   The TYPE_NEXT_VARIANT field is used to chain together types
     that are variants made by type modifiers such as "const" and "volatile".
   The TYPE_MAIN_VARIANT field, in any member of such a chain,
     points to the start of the chain.
   The TYPE_NAME field contains info on the name used in the program
     for this type (for GDB symbol table output).  It is either a
     TYPE_DECL node, for types that are typedefs, or an IDENTIFIER_NODE
     in the case of structs, unions or enums that are known with a tag,
     or zero for types that have no special name.  */
/* The TREE_CHAIN of a ..._TYPE node is normally used to put
   every type onto permanent_type_chain or temporary_type_chain (see tree.c).
   One exception is for ENUMERAL_TYPE, RECORD_TYPE and UNION_TYPE
   nodes used as forward-references to names; see below.  */

DEFTREECODE (VOID_TYPE, "void_type", "t", 0)	/* The void type in C */

/* Integer types in all languages, including char in C.  */
/* Has components TYPE_MIN_VALUE, TYPE_MAX_VALUE (expressions, inclusive)
   and TYPE_PRECISION (number of bits used by this type).
   In the case of a subrange type in Pascal, the TREE_TYPE
   of this will point at the supertype (another INTEGER_TYPE).
   Otherwise, the TREE_TYPE is zero.  */
DEFTREECODE (INTEGER_TYPE, "integer_type", "t", 0)

/* C's float and double.  Different floating types are distinguished
   by machine mode and by the TYPE_SIZE and the TYPE_PRECISION.  */
DEFTREECODE (REAL_TYPE, "real_type", "t", 0)

/* Complex number types.  The TREE_TYPE field is the data type
   of the real and imaginary parts.  */
DEFTREECODE (COMPLEX_TYPE, "complex_type", "t", 0)

/* C enums.  The type node looks just like an INTEGER_TYPE node.
   The symbols for the values of the enum type are defined by
   CONST_DECL nodes, but the type does not point to them;
   however, the TREE_VALUES is a list in which each elements' TREE_PURPOSE
   is a name and the TREE_VALUE is the value (an INTEGER_CST node).  */
/* A forward reference `enum foo' when no enum named foo is defined yet
   has zero (a null pointer) in its TYPE_SIZE.  The tag name is in
   the TYPE_NAME field.  If the type is later defined, the normal
   fields are filled in.
   RECORD_TYPE and UNION_TYPE forward refs are treated similarly.  */
DEFTREECODE (ENUMERAL_TYPE, "enumeral_type", "t", 0)

/* Pascal's boolean type (true or false are the only values);
   no special fields needed.  */
DEFTREECODE (BOOLEAN_TYPE, "boolean_type", "t", 0)

/* CHAR in Pascal; not used in C.
   No special fields needed.  */
DEFTREECODE (CHAR_TYPE, "char_type", "t", 0)

/* All pointer-to-x types have code POINTER_TYPE.
   The TREE_TYPE points to the node for the type pointed to.  */
DEFTREECODE (POINTER_TYPE, "pointer_type", "t", 0)

/* C++: All reference-to-x types have code REFERENCE_TYPE.
   The TREE_TYPE points to the node for the type referenced. */
DEFTREECODE (REFERENCE_TYPE, "reference_type", "t", 0)

/* C++: a pointer to member has a MEMBER_TYPE as its target type.
   Not yet implemented this way.  */
DEFTREECODE (MEMBER_TYPE, "member_type", "t", 0)

/* Used for Pascal; details not determined right now.  */
DEFTREECODE (FILE_TYPE, "file_type", "t", 0)

/* Types of arrays.  Special fields:
   TREE_TYPE		  Type of an array element.
   TYPE_DOMAIN		  Type to index by.
			    Its range of values specifies the array length.
   TYPE_SEP		  Expression for units from one elt to the next.
   TYPE_SEP_UNIT	  Number of bits in a unit for previous.
   TYPE_POINTER_TO	  It is safe to assume, for an array type,
   that TYPE_POINTER_TO (TREE_TYPE (array_type)) is always nonzero
   and holds the type to coerce a value of that array type to in C.

   TYPE_NELTS		  For C++, holds the number of elements (as an
			  expressions) contained in the array.  */
/* Array types in C or Pascal */
DEFTREECODE (ARRAY_TYPE, "array_type", "t", 0)

/* Types of sets for Pascal.  Special fields are the same as
   in an array type.  The target type is always a boolean type.  */
DEFTREECODE (SET_TYPE, "set_type", "t", 0)

/* Not known whether Pascal really needs this
   or what it should contain.  */
DEFTREECODE (STRING_TYPE, "string_type", "t", 0)

/* Struct in C, or record in Pascal.  */
/* Special fields:
   TYPE_FIELDS  chain of FIELD_DECLs for the fields of the struct.
   A few may need to be added for Pascal.  */
/* See the comment above, before ENUMERAL_TYPE, for how
   forward references to struct tags are handled in C.  */
DEFTREECODE (RECORD_TYPE, "record_type", "t", 0)

/* Union in C.  Like a struct, except that the offsets of the fields
   will all be zero.  */
/* See the comment above, before ENUMERAL_TYPE, for how
   forward references to union tags are handled in C.  */
DEFTREECODE (UNION_TYPE, "union_type", "t", 0)	/* C union type */

/* Class in C++.  Like a struct, except that function declarations
   are accepted and can be overloaded automatically.
   TYPE_FN_FIELDS is a list a method names which are FUNCTION_DECLS.

   TYPE_BASELINK is the pointer to the base class of this type.
   Note that when multiple inheritence is implemented, this may
   need some real work.
   TYPE_TAGS is a TREE_LIST of tags which must go into scope
   when this class does.  This has the effect of enabling local
   typedefs.

   Note that because CLASS_TYPE and RECORD_TYPE are intimately related
   in C++, it does not make sense to define _TYPE nodes which actually
   distinguish them.  We therefore keep this treecode around only for
   front-end processing, which is the only place that CLASS_TYPE
   and RECORD_TYPE should be distinguished anyway.  `build_struct'
   and `build_struct_xref' ensure that nodes which come in as a
   request for CLASS_TYPE are created with RECORD_TYPE instead,
   with the appropriate distinctions made for visibility of
   the fields.  */
DEFTREECODE (CLASS_TYPE, "class_type", "t", 0)	/* C++ class type */

/* Type of functions.  Special fields:
   TREE_TYPE		    type of value returned.
   TYPE_ARG_TYPES      list of types of arguments expected.
	this list is made of TREE_LIST nodes.
   Types of "Procedures" in languages where they are different from functions
   have code FUNCTION_TYPE also, but then TREE_TYPE is zero or void type.  */
DEFTREECODE (FUNCTION_TYPE, "function_type", "t", 0)

/* Types which have not yet been instantiated.  This can happen
   when performing operations on methods or overloaded functions
   where the context can fill in type information.  For C++.  */
DEFTREECODE (UNKNOWN_TYPE, "unknown_type", "t", 0)

/* All statement types have fields STMT_SOURCE_FILE and STMT_SOURCE_LINE.  */
/* Consecutive statements within a compound statement are chained together
   through the TREE_CHAIN field.  */

/* A label definition, encapsulated as a statement.
   STMT_BODY is the LABEL_DECL node for the label that appears here.  */
DEFTREECODE (LABEL_STMT, "label_stmt", "s", 1)

/* GOTO, in any language.  STMT_BODY is a LABEL_DECL node.  */
DEFTREECODE (GOTO_STMT, "goto_stmt", "s", 1)

/* RETURN, in any language.
   Evaluates the expression STMT_BODY, then returns from the current function.
   Presumably STMT_BODY is an assignment that stores into the
   RESULT_DECL that hold the value to be returned.
   STMT_BODY may be zero.  */
DEFTREECODE (RETURN_STMT, "return_stmt", "s", 1)

/* Statement that evaluates an expression.  STMT_BODY is the expression.  */
DEFTREECODE (EXPR_STMT, "expr_stmt", "s", 1)

/* Pascal WITH statement.
   Contains a chain of variables (..._DECL nodes) in the STMT_VARS
   and a chain of statements (the STMT_BODY).
   STMT_SUPERCONTEXT points to the containing declaration scope.  */
DEFTREECODE (WITH_STMT, "with_stmt", "s", 5)

/* Declare variables whose scope is less than a function.
   This is used for C brace-pairs that contain declarations.
   Contains a chain of variables (..._DECL nodes) in the STMT_VARS
   and a chain of statements (the STMT_BODY).
   STMT_SUPERCONTEXT points to the containing declaration scope.
   STMT_BIND_SIZE is an expression for the size of local storage here.
   STMT_TYPE_TAGS is a list (chain of TREE_LIST nodes)
    pairing struct, union and enum tag names with the types they mean,
    for tags defined in this context.  */
DEFTREECODE (LET_STMT, "let_stmt", "s", 5)

/* if-then-else statements in C and other languages.
   STMT_COND is the condition (an expression).
   STMT_THEN is the then-branch (a statement or chain of statements).
   STMT_ELSE is the else-branch (a statement or chain of statements).  */
DEFTREECODE (IF_STMT, "if_stmt", "s", 3)

/* if-else-exit; used in building parts of iterations.
   STMT_BODY is the condition (an expression).
   Exit if the iteration if the condition is FALSE.  */
DEFTREECODE (EXIT_STMT, "exit_stmt", "s", 1)

/* STMT_CASE_INDEX is an expression for the value to dispatch on.
   STMT_CASE_LIST is a list (a chain of TREE_LIST nodes)
    of the branches of the dispatch.
   Each such TREE_LIST node has the case it is for (a constant expression)
   as the TREE_PURPOSE
   and the label to go to (a LABEL_DECL) as the TREE_VALUE. 

   Normally, the labels reside inside a COMPOUND_STMT
   which contains ths CASE_STMT as its first statement.  */
DEFTREECODE (CASE_STMT, "case_stmt", "s", 3)

/* STMT_BODY contains a chain of statements to be executed repeatedly.  */
DEFTREECODE (LOOP_STMT, "loop_stmt", "s", 1)

/* Contains as its STMT_BODY a chain of substatements.  */
DEFTREECODE (COMPOUND_STMT, "compound_stmt", "s", 1)

/* Contains as its STMT_BODY a string of assembly code.  */
DEFTREECODE (ASM_STMT, "asm_stmt", "s", 1)

/* Expressions */

/* First, the constants.  */

/* Contents are in TREE_INT_CST_LOW and TREE_INT_CST_HIGH fields,
   32 bits each, giving us a 64 bit constant capability.
   Note: constants of type char in Pascal are INTEGER_CST,
   and so are pointer constants such as nil in Pascal or NULL in C.
   `(int *) 1' in C also results in an INTEGER_CST.  */
DEFTREECODE (INTEGER_CST, "integer_cst", "c", 2)

/* Contents are in TREE_REAL_CST field.  Also there is TREE_CST_RTL.  */
DEFTREECODE (REAL_CST, "real_cst", "c", 3)

/* Contents are in TREE_REALPART and TREE_IMAGPART fields,
   whose contents are other constant nodes.
   Also there is TREE_CST_RTL.  */
DEFTREECODE (COMPLEX_CST, "complex_cst", "c", 3)

/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields.
   Also there is TREE_CST_RTL.  */
DEFTREECODE (STRING_CST, "string_cst", "c", 3)

/* Declarations.  All references to names are represented as ..._DECL nodes.
   The decls in one binding context are chained through the TREE_CHAIN field.
   Each DECL has a DECL_NAME field which contains an IDENTIFIER_NODE.
    (Some decls, most often labels, may have zero as the DECL_NAME).
   DECL_CONTEXT points to the node representing the context in which
    this declaration has its scope.  For FIELD_DECLs, this is the
    RECORD_TYPE or UNION_TYPE node that the field belongs to;
    for other kinds of decl nodes, this is a LET_STMT node or the ROOT_NODE.
   The TREE_TYPE field holds the data type of the object, when relevant.
    LABEL_DECLs have no data type.  For TYPE_DECL, the TREE_TYPE field
    contents are the type whose name is being declared.
   The DECL_ALIGN, DECL_SIZE, DECL_SIZE_UNIT
    and DECL_MODE fields exist in decl nodes just as in type nodes.
    They are unused in LABEL_DECL, TYPE_DECL and CONST_DECL nodes.

   DECL_OFFSET holds an integer number of bits offset for the location.
   DECL_VOFFSET holds an expression for a variable offset; it is
   to be multiplied by DECL_VOFFSET_UNIT (an integer).
   These fields are relevant only in FIELD_DECLs and PARM_DECLs.

   DECL_INITIAL holds the value to initialize a variable to,
   or the value of a constant.  For a function, it holds the body
   (a node of type LET_STMT representing the function's binding contour
   and whose body contains the function's statements.)

   PARM_DECLs use a special field:
   DECL_ARG_TYPE is the type in which the argument is actually
    passed, which may be different from its type within the function.

   FUNCTION_DECLs use four special fields:
   DECL_ARGUMENTS holds a chain of PARM_DECL nodes for the arguments.
   DECL_RESULT holds a RESULT_DECL node for the value of a function,
    or it is 0 for a function that returns no value.
    (C functions returning void have zero here.)
   DECL_FUNCTION_CODE is a code number that is nonzero for
    built-in functions.  Its value is an enum built_in_function
    that says which built-in function it is.
   DECL_BLOCK_SYMTAB_ADDRESS records (after the symtab data for the function's
    body has been output) the address in the symtab file of the
    `struct block' for the function's top-level binding context.
    This must be stored in the symtab structure for the function name.
   Also, TREE_UNSIGNED (function_decl) is nonzero if the ({...})
    construct is used in the function.

   DECL_SOURCE_FILE holds a filename string and DECL_SOURCE_LINE
   holds a line number.  */

DEFTREECODE (FUNCTION_DECL, "function_decl", "d", 0)
DEFTREECODE (LABEL_DECL, "label_decl", "d", 0)
DEFTREECODE (CONST_DECL, "const_decl", "d", 0)
DEFTREECODE (TYPE_DECL, "type_decl", "d", 0)
DEFTREECODE (VAR_DECL, "var_decl", "d", 0)
DEFTREECODE (PARM_DECL, "parm_decl", "d", 0)
DEFTREECODE (RESULT_DECL, "result_decl", "d", 0)
DEFTREECODE (FIELD_DECL, "field_decl", "d", 0)
DEFTREECODE (FRIEND_DECL, "friend_decl", "d", 0)

/* References to storage.  */

/* Value is reference to particular overloaded class method.
   Operand 0 is the class name (an IDENTIFIER_NODE);
   operand 1 is the field (also an IDENTIFIER_NODE).  */
DEFTREECODE (SCOPE_REF, "scope_ref", "r", 2)

/* Value is structure or union component.
   Operand 0 is the structure or union (an expression);
   operand 1 is the field (a node of type FIELD_DECL).  */
DEFTREECODE_X (COMPONENT_REF, "component_ref", "r", 2, "->")

/* This is for operator overloading.  It allows the not-yet-defined
   operator ->()() to be defined.  */
DEFTREECODE_X (METHOD_REF, "method_ref", "r", 3, "->()")

/* C unary `*' or Pascal `^'.  One operand, an expression for a pointer.  */
DEFTREECODE_X (INDIRECT_REF, "indirect_ref", "r", 1, "(unary *)")

/* Pascal `^` on a file.  One operand, an expression for the file.  */
DEFTREECODE (BUFFER_REF, "buffer_ref", "r", 1)

/* Array indexing in languages other than C.
   Operand 0 is the array; operand 1 is a list of indices
   stored as a chain of TREE_LIST nodes.  */
DEFTREECODE_X (ARRAY_REF, "array_ref", "r", 2, "[]")

/* Constructor: return an aggregate value made from specified components.
   In C, this is used only for structure and array initializers.
   The first "operand" is really a pointer to the RTL,
   for constant constructors only.
   The second operand is a list of component values
   made out of a chain of TREE_LIST nodes.  */
DEFTREECODE (CONSTRUCTOR, "constructor", "e", 2)

/* The expression types are mostly straightforward,
   with the fourth argument of DEFTREECODE saying
   how many operands there are.
   Unless otherwise specified, the operands are expressions.  */

/* Contains two expressions to compute, one followed by the other.
   the first value is ignored.  The second one's value is used.  */
DEFTREECODE (COMPOUND_EXPR, "compound_expr", "e", 2)

/* Assignment expression.  Operand 0 is the what to set; 1, the new value.  */
DEFTREECODE_X (MODIFY_EXPR, "modify_expr", "e", 2, "=")

/* Initialization expression.  Operand 0 is the what to initialize;
   Operand 1 is the initializer.  */
DEFTREECODE (INIT_EXPR, "init_expr", "e", 2)

/* Use these for overloading `new' and `delete'.  */
DEFTREECODE_X (NEW_EXPR, "new_expr", "e", 2, "new")
DEFTREECODE_X (DELETE_EXPR, "delete_expr", "e", 2, "delete")

/* Conditional expression ( ... ? ... : ...  in C).
   Operand 0 is the condition.
   Operand 1 is the then-value.
   Operand 2 is the else-value.  */
DEFTREECODE_X (COND_EXPR, "cond_expr", "e", 3, "... ? ... : ...")
DEFTREECODE_X (X_COND_EXPR, "x_cond_expr", "e", 2, "... ?: ...")

/* Function call.  Operand 0 is the function.
   Operand 1 is the argument list, a list of expressions
   made out of a chain of TREE_LIST nodes.
   There is no operand 2.  That slot is used for the
   CALL_EXPR_RTL macro (see preexpand_calls).  */
DEFTREECODE_X (CALL_EXPR, "call_expr", "e", 3, "()")

/* Simple arithmetic.  Operands must have the same machine mode
   and the value shares that mode.  */
DEFTREECODE_XY (PLUS_EXPR, "plus_expr", "e", 2, "+", "+=")
DEFTREECODE_XY (MINUS_EXPR, "minus_expr", "e", 2, "-", "-=")
DEFTREECODE_XY (MULT_EXPR, "mult_expr", "e", 2, "*", "*=")

/* Division for integer result that rounds the quotient toward zero.  */
/* Operands must have the same machine mode.
   In principle they may be real, but that is not currently supported.
   The result is always fixed point, and it has the same type as the
   operands if they are fixed point.   */
DEFTREECODE_XY (TRUNC_DIV_EXPR, "trunc_div_expr", "e", 2, "/", "/=")

/* Division for integer result that rounds the quotient toward infinity.  */
DEFTREECODE_XY (CEIL_DIV_EXPR, "ceil_div_expr", "e", 2,
		"(ceiling /)", "(ceiling /=)")

/* Division for integer result that rounds toward minus infinity.  */
DEFTREECODE_XY (FLOOR_DIV_EXPR, "floor_div_expr", "e", 2,
		"(floor /)", "(floor /=)")

/* Division for integer result that rounds toward nearest integer.  */
DEFTREECODE_XY (ROUND_DIV_EXPR, "round_div_expr", "e", 2,
		"(round /)", "(round /=)")

/* Four kinds of remainder that go with the four kinds of division.  */
DEFTREECODE_XY (TRUNC_MOD_EXPR, "trunc_mod_expr", "e", 2, "%", "%=")
DEFTREECODE_XY (CEIL_MOD_EXPR, "ceil_mod_expr", "e", 2,
		"(ceiling %)", "(ceiling %=)")
DEFTREECODE_XY (FLOOR_MOD_EXPR, "floor_mod_expr", "e", 2,
		"(floor %)", "(floor %=)")
DEFTREECODE_XY (ROUND_MOD_EXPR, "round_mod_expr", "e", 2,
		"(round %)", "(round %=)")

/* Division for real result.  The two operands must have the same type.
   In principle they could be integers, but currently only real
   operands are supported.  The result must have the same type
   as the operands.  */
DEFTREECODE (RDIV_EXPR, "rdiv_expr", "e", 2)

/* Conversion of real to fixed point: four ways to round,
   like the four ways to divide.
   CONVERT_EXPR can also be used to convert a real to an integer,
   and that is what is used in languages that do not have ways of
   specifying which of these is wanted.  Maybe these are not needed.  */
DEFTREECODE (FIX_TRUNC_EXPR, "fix_trunc_expr", "e", 1)
DEFTREECODE (FIX_CEIL_EXPR, "fix_ceil_expr", "e", 1)
DEFTREECODE (FIX_FLOOR_EXPR, "fix_floor_expr", "e", 1)
DEFTREECODE (FIX_ROUND_EXPR, "fix_round_expr", "e", 1)

/* Conversion of an integer to a real.  */
DEFTREECODE (FLOAT_EXPR, "float_expr", "e", 1)

/* Exponentiation.  Operands may have any types;
   constraints on value type are not known yet.  */
DEFTREECODE (EXPON_EXPR, "expon_expr", "e", 2)

/* Unary negation.  Value has same type as operand.  */
DEFTREECODE_X (NEGATE_EXPR, "negate_expr", "e", 1, "-")

DEFTREECODE_X (MIN_EXPR, "min_expr", "e", 2, "<?")
DEFTREECODE_X (MAX_EXPR, "max_expr", "e", 2, ">?")
DEFTREECODE_X (ABS_EXPR, "abs_expr", "e", 1, "abs")
DEFTREECODE_X (FFS_EXPR, "ffs_expr", "e", 1, "ffs")

/* Shift operations for shift and rotate.
   Shift is supposed to mean logical shift if done on an
   unsigned type, arithmetic shift on a signed type.
   The second operand is the number of bits to
   shift by, and must always have mode SImode.
   The result has the same mode as the first operand.  */
DEFTREECODE_XY (LSHIFT_EXPR, "alshift_expr", "e", 2, "<<", "<<=")
DEFTREECODE_XY (RSHIFT_EXPR, "arshift_expr", "e", 2, ">>", ">>=")
DEFTREECODE (LROTATE_EXPR, "lrotate_expr", "e", 2)
DEFTREECODE (RROTATE_EXPR, "rrotate_expr", "e", 2)

/* Bitwise operations.  Operands have same mode as result.  */
DEFTREECODE_XY (BIT_IOR_EXPR, "bit_ior_expr", "e", 2, "|", "|=")
DEFTREECODE_XY (BIT_XOR_EXPR, "bit_xor_expr", "e", 2, "^", "^=")
DEFTREECODE_XY (BIT_AND_EXPR, "bit_and_expr", "e", 2, "&", "&=")
DEFTREECODE_X (BIT_ANDTC_EXPR, "bit_andtc_expr", "e", 2, "&~")
DEFTREECODE_X (BIT_NOT_EXPR, "bit_not_expr", "e", 1, "~")

/* Combination of boolean values or of integers considered only
   as zero or nonzero.  ANDIF and ORIF allow the second operand
   not to be computed if the value of the expression is determined
   from the first operand.  AND and OR always compute the second
   operand whether its value is needed or not (for side effects).  */
DEFTREECODE_X (TRUTH_ANDIF_EXPR, "truth_andif_expr", "e", 2, "&&")
DEFTREECODE_X (TRUTH_ORIF_EXPR, "truth_orif_expr", "e", 2, "||")
DEFTREECODE_X (TRUTH_AND_EXPR, "truth_and_expr", "e", 2, "strict &&")
DEFTREECODE_X (TRUTH_OR_EXPR, "truth_or_expr", "e", 2, "strict ||")
DEFTREECODE_X (TRUTH_NOT_EXPR, "truth_not_expr", "e", 1, "!")

/* Relational operators.
   `EQ_EXPR' and `NE_EXPR' are allowed for any types.
   The others are allowed only for integer (or pointer or enumeral)
   or real types.
   In all cases the operands will have the same type,
   and the value is always the type used by the language for booleans.  */
DEFTREECODE_X (LT_EXPR, "lt_expr", "e", 2, "<")
DEFTREECODE_X (LE_EXPR, "le_expr", "e", 2, "<=")
DEFTREECODE_X (GT_EXPR, "gt_expr", "e", 2, ">")
DEFTREECODE_X (GE_EXPR, "ge_expr", "e", 2, ">=")
DEFTREECODE_X (EQ_EXPR, "eq_expr", "e", 2, "==")
DEFTREECODE_X (NE_EXPR, "ne_expr", "e", 2, "!=")

/* Operations for Pascal sets.  Not used now.  */
DEFTREECODE_X (IN_EXPR, "in_expr", "e", 2, "in")
DEFTREECODE_X (SET_LE_EXPR, "set_le_expr", "e", 2, "subset")
DEFTREECODE_X (CARD_EXPR, "card_expr", "e", 1, "#")
DEFTREECODE_X (RANGE_EXPR, "range_expr", "e", 2, "..")

/* Represents a conversion of type of a value.
   All conversions, including implicit ones, must be
   represented by CONVERT_EXPR nodes.  */
DEFTREECODE (CONVERT_EXPR, "convert_expr", "e", 1)

/* Represents a conversion expected to require no code to be generated.  */
DEFTREECODE (NOP_EXPR, "nop_expr", "e", 1)

/* Represents something we computed once and will use multiple times.
   First operand is that expression.  Second is the RTL,
   nonzero only after the expression has been computed.
   TREE_UNSIGNED in a SAVE_EXPR is nonzero if that SAVE_EXPR
   has been seen already in assign_vars_1.  */
DEFTREECODE (SAVE_EXPR, "save_expr", "e", 2)

/* Represents something whose RTL has already been expanded
   as a sequence which should be emitted when this expression is expanded.
   The first operand is the-the RTL to emit (which is a SEQUENCE).
   The second is the RTL expression for the result.  */
DEFTREECODE (RTL_EXPR, "rtl_expr", "e", 2)

/* & in C.  Value is the address at which the operand's value resides.
   Operand may have any mode.  Result mode is Pmode.  */
DEFTREECODE_X (ADDR_EXPR, "addr_expr", "e", 1, "(unary &)")

/* & (reference) in C++.  Value is the value of the reference.
   Operand type is preserved, but we know that it is no longer
   an lvalue.  */
DEFTREECODE (REFERENCE_EXPR, "reference_expr", "e", 1)

/* A wrapper in C++.  Operand 0 is the type that the wrapper
   belongs to (if non-virtual).  Operand 1 is the function
   being wrapped.  An anti-wrapper means do no wrap the function
   (if it would be wrapped by default).  */
DEFTREECODE (WRAPPER_EXPR, "wrapper_expr", "e", 2)
DEFTREECODE (ANTI_WRAPPER_EXPR, "anti_wrapper_expr", "e", 2)

/* Operand is a function constant; result is a function variable value
   of typeEPmode.  Used only for languages that need static chains.  */
DEFTREECODE (ENTRY_VALUE_EXPR, "entry_value_expr", "e", 1)

/* Given two real or integer operands of the same type,
   returns a complex value of the corresponding complex type.  */
DEFTREECODE (COMPLEX_EXPR, "complex_expr", "e", 2)

/* Complex conjugate of operand.  Used only on complex types.
   The value has the same type as the operand.  */
DEFTREECODE (CONJ_EXPR, "conj_expr", "e", 1)

/* Used only on an operand of complex type, these return
   a value of the corresponding component type.  */
DEFTREECODE (REALPART_EXPR, "realpart_expr", "e", 1)
DEFTREECODE (IMAGPART_EXPR, "imagpart_expr", "e", 1)

/* Nodes for ++ and -- in C.
   The second arg is how much to increment or decrement by.
   For a pointer, it would be the size of the object pointed to.  */
DEFTREECODE_X (PREDECREMENT_EXPR, "predecrement_expr", "e", 2, "--")
DEFTREECODE_X (PREINCREMENT_EXPR, "preincrement_expr", "e", 2, "++")
DEFTREECODE_X (POSTDECREMENT_EXPR, "postdecrement_expr", "e", 2, "--")
DEFTREECODE_X (POSTINCREMENT_EXPR, "postincrement_expr", "e", 2, "++")

/* The end of legal tree codes. */
DEFTREECODE (END_OF_TREE_CODES, "??end of tree codes", "x", 0)

/*
Local variables:
mode:c
version-control: t
End:
*/
