.TH BUTTON 3I "15 June 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
ButtonState, Button, TextButton, PushButton, RadioButton, CheckBox \- interactive buttons
.SH SYNOPSIS
.B #include <InterViews/button.h>
.SH DESCRIPTION
.B Button
is a class of interactors that can set the value of a piece of state.
.B ButtonState
is a class of objects that contain a value and a list of buttons
that potentially can set the value.
A value is either an integer or arbitrary pointer.
.PP
.B TextButton
is a subclass of
.B Button
that has an associated text label to be displayed inside
or to the right of the button.
.B PushButton,
.B RadioButton,
and
.B CheckBox
are subclasses of
.B TextButton
that provide particular displays for buttons.
A button is highlighted if the button is ``chosen'', meaning
the button state's value is equal to the button's value.
.PP
Normally, when a button is pressed
the associated state's value
is set to the button's value.
The exception is a checkbox, which toggles between
its value and the current value of the button state.
When pressed, a checkbox will set the state to its value
if it is already chosen and set the state to its previous value
if it is not chosen.
.PP
A button can have a list of attached buttons.
When a button is not chosen its attached buttons are ``disabled'',
meaning they ignore all input events.
.SH BUTTONSTATE OPERATIONS
.TP
.B "ButtonState()"
.ns
.TP
.B "ButtonState(int)"
.ns
.TP
.B "ButtonState(void*)"
Define a button state optionally with an initial value.
.TP
.B "void SetValue(int)"
.ns
.TP
.B "void SetValue(void*)"
Set the value of a button state and notify all the buttons
associated with the state.
.TP
.B "void GetValue(int&)"
.ns
.TP
.B "void GetValue(void*&)"
Get the value of a button.
.TP
.B "void Attach(Button*)"
.ns
.TP
.B "void Detach(Button*)"
Modify the list of buttons associated with a button state.
.SH BUTTON OPERATIONS
.TP
.B "void PushButton(const char*, ButtonState*, int, Painter*)"
.ns
.TP
.B "void PushButton(const char*, ButtonState*, void*, Painter*)"
.ns
.TP
.B "void RadioButton(const char*, ButtonState*, int v, Painter*)"
.ns
.TP
.B "void RadioButton(const char*, ButtonState*, void* v, Painter*)"
.ns
.TP
.B "void CheckBox(const char*, ButtonState*, int offv, Painter*)"
.ns
.TP
.B "void CheckBox(const char*, ButtonState*, void* offv, Painter*)"
Define a new button with a given label, associated state,
value, and output painter.
.TP
.B "void SetDimensions(int width, int height)"
Specify the natural size of the button.
The default size is a function of the size of the text.
.TP
.B "void Attach(Button*)"
.ns
.TP
.B "void Detach(Button*)"
Modify the list of buttons associated with the button.
.TP
.B "void Enable()"
.ns
.TP
.B "void Disable()"
Start or stop listening to input events.
Disabled buttons typically ``gray out'' their text by drawing
a half-filled rectangle in the background.
.TP
.B "void Choose()"
.ns
.TP
.B "void UnChoose()"
Mark the button as chosen (not chosen), and enable (disable) all
its associated buttons.
.TP
.B "void Handle(Event&)"
If the event type is DownEvent,
the button will read events until an UpEvent occurs and then
call Press if the button is enabled.
.TP
.B "virtual void Press()"
Take the appropriate action for the button being pressed.
The default is to set the associated state
to the button's value.
.TP
.B "virtual void Check()"
Take the appropriate action for the associated state being set.
The default is to
get the value of the associated button and call Choose or UnChoose
depending on whether it matches the button's value.
.SH SEE ALSO
Interactor(2I), Painter(2I), Sensor(2I)
