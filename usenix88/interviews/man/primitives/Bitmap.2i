.TH BITMAP 2I "11 December 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
Bitmap \- bitmap manipulation
.SH SYNOPSIS
.B #include <InterViews/bitmap.h>
.SH DESCRIPTION
A \fIBitmap\fP provides bit mapped output for an interactor.
Bitmaps can be constructed using the X bitmap program or
from a data array.  Operations include
general transformations, several special case
transformations, and bit manipulations.
.SH PUBLIC OPERATIONS
.TP
.B "Bitmap(const char* filename)"
Create a bitmap from the \fIfilename\fP.
The file format is the same as used by X.
.TP
.B "Bitmap(short* data, int width, int height)"
Create a bitmap from the data specified.
.TP
.B "Bitmap(Bitmap*)"
Create a copy of the given bitmap.
.TP
.B "void Draw(Canvas*)"
Draw the bitmap on the Canvas with the bottom left corner of the bitmap at
the current origin.  The current foreground Color is used for `1' bits,
the current background Color for `0' bits.
.TP
.B "void SetColors(Color* f, Color* b)"
.ns
.TP
.B "Color* GetFgColor()"
.ns
.TP
.B "Color* GetBgColor()"
Set or get the current foreground and background Colors.
.TP
.B "void Transform(Transformer*)"
.ns
.TP
.B "void Scale(float x, float y)"
.ns
.TP
.B "void Rotate(float angle)"
Transform the bitmap in place.  \fIScale\fP and \fIRotate\fP provide
convenient interfaces to common transformations.
.TP
.B "void SetOrigin(int x0, int y0)"
.ns
.TP
.B "void GetOrigin(int& x0, int& y0)"
Set or get the current origin.
.TP
.B "void FlipHorizontal()"
.ns
.TP
.B "void FlipVertical()"
.ns
.TP
.B "void Rotate90()"
Special case transformations that do not use the more general
\fITransformer(2I)\fP operations and therefore are faster.
.TP
.B "void Invert()"
.ns
.TP
.B "boolean Peek(int x, int y)"
.ns
.TP
.B "void Poke(boolean bit, int x, int y)"
Operations for manipulating the contents of the bitmap.  \fIInvert\fP flips
all the bits, while \fIPeek\fP and \fIPoke\fP provide access to individual
bits.
.SH "SEE ALSO"
Transformer(2I)
