.TH PAINTER 2I "15 June 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
Painter \- graphics context and operations
.SH SYNOPSIS
.B #include <InterViews/painter.h>
.SH DESCRIPTION
.B Painter
is a class that provides a basic set of graphics operations.
The state of a painter object includes
a brush,
foreground and background colors, fill pattern and mode,
text font, output origin and current position, and transformation matrix.
All drawing operations must be passed the canvas on which
to perform the operation.
.SH STATE OPERATIONS
.TP
.B "Painter()"
Create a new painter with a default state.
See the operations below that modify the state for the default values.
.TP
.B "Painter(Painter*)"
Create a new painter with a copy
of the given painter's state.
.TP
.B "void SetBrush(Brush*)"
.ns
.TP
.B "Brush* GetBrush()"
Set or return the painter's brush.
Default is the predefined brush ``single''.
.TP
.B "void SetColors(Color* fg, Color* bg)"
.ns
.TP
.B "Color* GetFgColor()"
.ns
.TP
.B "Color* GetBgColor()"
Set or return the painter's colors.
If either argument to SetColors is nil,
then the corresponding color is not changed.
Defaults are ``black'' for foreground and ``white'' for background.
.TP
.B "void SetFont(Font*)"
.ns
.TP
.B "Font* GetFont()"
Set or return the painter's text font.
Default is the predefined font ``stdfont''.
.TP
.B "void SetPattern(Pattern*)"
.ns
.TP
.B "Pattern* GetPattern()"
.ns
.TP
.B "void FillBg(boolean mode)"
.ns
.TP
.B "boolean BgFilled()"
Set or return the painter's fill pattern and mode.
If the mode is \fItrue\fP,
fill operations will set pixels corresponding
to ones in the current fill pattern to the foreground color and
pixels corresponding to zeros to the background color.
If \fIfalse\fP, then only foreground pixels will be set.
Default pattern is ``solid''; default mode is \fItrue\fP.
.TP
.B "void SetOrigin(int x0, int y0)"
.ns
.TP
.B "void GetOrigin(int& x0, int& y0)"
Set or return the origin by which all coordinates are offset.
Default is (0,\ 0).
.TP
.B "void Translate(float dx, float dy)"
.ns
.TP
.B "void Rotate(float angle)"
.ns
.TP
.B "void Scale(float x, float y)"
.ns
.TP
.B "void SetTransformer(Transformer*)"
.ns
.TP
.B "Transformer* GetTransformer()"
Coordinates passed to drawing operations are transformed
according to the current origin, translation (cumulative),
rotation, and scale factor.
Internally, a transformation matrix is stored that
can be directly set and accessed using
SetTransformer and GetTransformer.
The default transformer is nil, meaning no transformations are performed.
.TP
.B "void SetPlaneMask(int mask)"
Set which bit planes are affected by drawing operations.
If the Kth bit of \fImask\fP is set,
then display operations will draw on plane K.
.TP
.B "void Clip(Canvas*, Coord x1, Coord y1, Coord x2, Coord y2)"
.ns
.TP
.B "void NoClip()"
Clip restricts output operations
to the specified region of the canvas.
NoClip removes the restriction so that operations affect
the entire canvas.
Only one clipping region may be in effect at a time.
.TP
.B "void MoveTo(Coord x, Coord y)"
Set the current output position.
The output position is used and updated by Text and ArcTo.
.SH DRAWING OPERATIONS
.TP
.B "void Arc(Canvas*, Coord x0, y0, x1, y1, x2, y2, x3, y3)"
.ns
.TP
.B "void ArcTo(Canvas*, Coord x1, y1, x2, y2, x3, y3)"
Paint a Bezier arc on the canvas from the first point
to the last point (but not going through the intermediate control
points).  The curve will lie within the polygon formed by the four points.
ArcTo uses the current position for the first point.
.TP
.B "void BSpline(Canvas*, Coord x[], y[], int n)"
.ns
.TP
.B "void ClosedBSpline(Canvas*, Coord x[], y[], int n)"
.ns
.TP
.B "void FillBSpline(Canvas*, Coord x[], y[], int n)"
Draw the B-spline defined by the \fIn\fP control vertices.
If closed or filled, the last point is connected to the first point.
.TP
.B "void Circle(Canvas*, Coord x, y, int r)"
.ns
.TP
.B "void FillCircle(Canvas*, Coord x, y, int radius)"
Draw a circle with center (\fIx\fP,\ \fIy\fP) and radius \fIr\fP.
.TP
.B "void Ellipse(Canvas*, Coord x, y, int xr, int yr)"
.ns
.TP
.B "void FillEllipse(Canvas*, Coord x, y, int xr, int yr)"
Draw an ellipse with center (\fIx\fP,\ \fIy\fP), horizontal radius
\fIxr\fP, and vertical radius \fIyr\fP.
.TP
.B "void Line(Canvas*, Coord x1, y1, x2, y2)"
.ns
.TP
.B "void MultiLine(Canvas*, Coord x[], y[], int n)"
.ns
.TP
.B "void Polygon(Canvas*, Coord x[], y[], int n)"
.ns
.TP
.B "void FillPolygon(Canvas*, Coord x[], y[], int n)"
Draw a path using the current brush and colors.
The Line operation draws a vector between two points (inclusive);
MultiLine draws a number of connected vectors;
Polygon draws a closed set of vectors;
FillPolygon fills the area inside a polygon using the current
fill pattern and colors.
.TP
.B "void Point(Canvas*, Coord x, y)"
.ns
.TP
.B "void MultiPoint(Canvas*, Coord x[], y[], int n)"
Set a point or set of points to the current foreground color.
.TP
.B "void Rect(Canvas*, Coord x1, y1, x2, y2)"
.ns
.TP
.B "void FillRect(Canvas*, Coord x1, y1, x2, y2)"
.ns
.TP
.B "void ClearRect(Canvas*, Coord x1, y1, x2, y2)"
Draw a rectangle with opposite corners specfied by (\fIx1\fP,\ \fIy1\fP) and
(\fIx2\fP,\ \fIy2\fP).
FillRect fills the rectangle using the current pattern and colors;
ClearRect fills the rectangle with the background color.
.TP
.B "void Text(Canvas*, const char* str)"
.ns
.TP
.B "void Text(Canvas*, const char* str, int n)"
Draw a string or substring of text.
If background fill mode is on, then the characters are drawn
in the foreground color and other the pixels within character boundaries
are set to the background color.
If background fill mode is off, only the foreground pixels are set.
.TP
.B "void Read(Canvas*, void*, Coord x1, y1, x2, y2)"
.ns
.TP
.B "void Write(Canvas*, const void*, Coord x1, y1, x2, y2)"
.ns
.TP
.B "void Copy(Canvas* src, Coord x1, y1, x2, y2, Canvas* dst, Coord x0, y0)"
Read gets a region of a canvas into memory.
Write puts data in memory to a region of a canvas.
Copy reads a region of one canvas and writes the data into
a region of another canvas (or within
a canvas if \fIsrc\fP and \fIdst\fP are the same).
The point (\fIx0\fP,\ \fIy0\fP) is the lower-left corner
of the destination region.
The representation of pixels is workstation-dependent.
.SH SEE ALSO
paint(2I), Canvas(2I), Workstation(2I)
