.TH SCENE 2I "15 June 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
Scene, MonoScene \- composite interactors
.SH SYNOPSIS
.B #include <InterViews/scene.h>
.SH DESCRIPTION
.B Scene
is the base class for all interactors
that are defined in terms of one or more instances of other interactors.
.B MonoScene
is a subclass for scenes that contain a single instance.
A monoscene's shape is copied from its component and
the component's canvas is given the same size and location
as the monoscene's canvas.
.SH PUBLIC OPERATIONS
.TP
.B "Scene(Sensor*, Painter*)"
.ns
.TP
.B "MonoScene(Sensor*, Painter*)"
Construct a new scene with the given sensor for \fIinput\fP and
painter for \fIoutput\fP.
.TP
.B "void Insert(Interactor*)"
.ns
.TP
.B "void Insert(Interactor*, Coord x, Coord y)"
.ns
.TP
.B "virtual void DoInsert(Interactor*, boolean, Coord& x, Coord& y, Shape*)"
Add an interactor to the scene, optionally at a specific position relative
to the lower-left corner of the scene.
The scene uses the interactor's desired shape, if it has non-zero width,
to size the interactor.
The base scene class always calls DoInsert from Insert;
thus subclasses only implement DoInsert and users only call Insert.
In the case of a monoscene, the current interior interactor
is replaced by the given interactor.
.TP
.B "void Propagate(boolean)"
.ns
.TP
.B "void Change(Interactor*)"
.ns
.TP
.B "virtual void DoChange(Interactor*, Shape*)"
Change notifies a scene that a given interactor has changed
its desired shape.
If the propagate flag associated with the scene is true, Change will call
DoChange and then Change(this) on the scene's parent.
If the propagate flag is false, Resize will be called instead.
The propagate flag is true by default and
can be set with the Propagate operation.
.TP
.B "void Move(Interactor*, Coord x, Coord y)"
.ns
.TP
.B "virtual void DoMove(Interactor*, Coord& x, Coord& y)"
Request that an interactor be moved to the given coordinates.
As with Insert and Change, users call Move and subclasses implement DoMove.
.TP
.B "void Remove(Interactor*)"
.ns
.TP
.B "virtual void DoRemove(Interactor*)"
Delete an interactor from a scene.
Users call Remove and subclasses implement DoRemove.
.TP
.B "void Lower(Interactor*)"
Put the interactor's canvas below all others in the scene,
potentially obscuring it.
.TP
.B "void Raise(Interactor*)"
Put the interactor's canvas above all others in the scene,
making it fully visible.
.SH PROTECTED OPERATIONS
.TP
.B "void Place(Interactor*, Coord x1, Coord y1, Coord x2, Coord y2, boolean = true)"
Assign an interactor's canvas to be a given region of the scene's canvas.
Unless the optional sixth parameter is false,
the interactor will be mapped.
.TP
.B "void Map(Interactor*, boolean = true)"
Make the interactor visible on the display if and when the scene is visible.
Unless the optional second parameter is false,
the interactor will be raised to the top of the scene.
.TP
.B "void Unmap(Interactor*)"
Make the interactor not be visible on the display if and
when the scene is visible.
.TP
.B "void UserPlace(Interactor*)"
Have the user rubberband a region of the scene and assign
the interactor's canvas to it.
.SH SEE ALSO
Canvas(2I), Interactor(2I), Shape(2I)
