.TH SENSOR 2I "11 December 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
Sensor, Event \- input events for interactors
.SH SYNOPSIS
.B #include <InterViews/sensor.h>
.SH DESCRIPTION
A sensor specifies a set of interesting input events.
An event is described by the \fIEvent\fP structure.
The \fItarget\fP field of an event
indicates the interactor whose current sensor
is interested in the event.
The \fItimestamp\fP field indicates when the event occured, and
the (\fIx\fP,\ \fIy\fP) fields contain the coordinates of
the input pointing device relative to the target interactor.
The \fIeventType\fP field specifies what kind of event occurred.
The following types of events are possible:
.TP
.B MotionEvent
The position of the pointing device changed.
.TP
.B DownEvent
.ns
.TP
.B UpEvent
The \fIbutton\fP field identifies a button that was pressed or released.
The constants LEFTMOUSE, MIDDLEMOUSE, and RIGHTMOUSE identify
up to three buttons on the pointing device.
The fields \fIleftmouse\fP, \fImiddlemouse\fP, and \fIrightmouse\fP
are \fItrue\fP if the corresponding button is currently down as well
(so chording can be handled).
.TP
.B KeyEvent
A key is pressed.
Since many keyboards do not support up events for arbitrary keys;
no event is generated when the key is released.
The \fIbutton\fP field contains the key code.
The \fIkeystring\fP field points to
a string of length \fIlen\fP that represents
the ASCII mapping of the key.
The fields \fIcontrol\fP, \fImeta\fP, \fIshift\fP, and \fIshiftlock\fP
are \fItrue\fP if the corresponding key is currently down.
.TP
.B OnEvent
.ns
.TP
.B OffEvent
The pointing device enters or leaves the canvas associated with
the target interactor.
.TP
.B ChannelEvent
Data is available on the file descriptors identified
in the \fIchannel\fP field.
The field is a bitset, with bit 0 set if data is ready
on file descriptor 0, bit 1 set if data ready on file descriptor 1, etc.
.TP
.B TimerEvent
The time limit defined by the sensor has expired without any
input events occurring.
.PP
The following operations on events can be used
to map coordinates from the target interactor to some other interactor:
.TP
.B "void GetAbsolute(Coord& x, Coord& y)"
.ns
.TP
.B "void GetAbsolute(World*&, Coord& x, Coord& y)"
GetAbsolute computes the event coordinates relative to the root scene and
optionally assigns a pointer to that root scene.
.PP
Several sensors are predefined as global variables.
The sensor ``allEvents'' is interested in all workstation events
(excludes ChannelEvent and TimerEvent);
``noEvents'' is not interested in any events;
``updownEvents'' is interested in UpEvents and DownEvents;
and ``onoffEvents'' is interested in OnEvents and OffEvents.
.SH PUBLIC OPERATIONS
.TP
.B Sensor()
Create a new sensor that is not interested in any events.
.TP
.B Sensor(Sensor*)
Create a sensor whose interests are the same as the given sensor.
.TP
.B "void Catch(EventType)"
.ns
.TP
.B "void CatchButton(EventType, int)"
.ns
.TP
.B "void CatchChannel(int)"
.ns
.TP
.B "void CatchTimer(int sec, int usec)"
Express interest in an event.
CatchButton can be used for keys as well as buttons,
though it is necessary to know the key code.
Not all types of events make sense for all the operations;
for example, Catch(ChannelEvent) is not meaningful.
Such requests are silently ignored.
.TP
.B "void Ignore(EventType)"
.ns
.TP
.B "void IgnoreButton(EventType, int)"
.ns
.TP
.B "void IgnoreChannel(int)"
Remove interest in an event.
Ignore means no interest in any events of a particular kind;
thus Ignore(DownEvent) means pressing any button will not generate an event.
.TP
.B "void CatchRemote()"
.ns
.TP
.B "void IgnoreRemote()"
Express or remove interest in access to the structure
of an interactor's canvas.
Only a world view should use these operations, as such access
is reported using the WorldView::InsertRemote and WorldView::ChangeRemote
operations.
.SH SEE ALSO
Interactor(2I), World(2I), WorldView(2I)
