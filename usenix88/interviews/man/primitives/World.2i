.TH WORLD 2I "15 June 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
World \- root scene
.SH SYNOPSIS
.B #include <InterViews/world.h>
.SH DESCRIPTION
A world represents a root scene that contains all interactors
on a particular display.
It is essentially the connection to a window server for a particular display.
Therefore, a world
must be created before any other InterViews objects are created.
The world implements scene operations such as Insert, Raise, and Lower
on the associated display.
Thus, an interactor can be placed as a top-level window on the screen
by inserting it into the world.
.SH PUBLIC OPERATIONS
.TP
.B "World(const char* prog = nil, const char* display = nil)"
Create a world.
If \fIprog\fP is specified, then it is used by GetDefault
to find parameter values by name from the file ``.Xdefaults''.
If \fIdisplay\fP is omitted, then the DISPLAY environment variable
is used to connect to the appropriate window server.
The format of the display string is the same as in X.
.TP
.B "void Delete()"
Close the connection to the server.
.TP
.B "void SetCurrent()"
Set the current world.  Some routines use global state associated
with a world object.  Creating a world automatically sets
the state to be for the new world.
.TP
.B "void AsyncRead()"
.ns
.TP
.B "void SyncRead()"
AsyncRead instructs the window server to send events as soon as they occur;
SyncRead requests that events only be sent
in response to an input request.
Synchronous events are usually more efficient because motion events
can be squashed in the server, but some applications require
asynchronous operation.
The default is synchronous, though the X server does not currently support
this mode of operation and therefore input always behaves asynchronously.
.TP
.B "int Fileno()"
Return the file descriptor of the connection to the window server.
.TP
.B "char* GetDefault(const char*)"
.ns
.TP
.B "char* GetGlobalDefault(const char*)"
Return the string associated with the given name in .Xdefaults
or 0 if no match is found.
GetDefault looks for a string of the form \fIprog.name\fP,
while GetGlobalDefault looks for \fI.name\fP.
.TP
.B "unsigned ParseGeometry(char* spec, Coord& x, Coord& y, int& w, int& h)"
Interpret an X geometry specification (e.g., =80x24+1+1), returning
a bit mask identifying which fields were specified.
.TP
.B "int NButtons()"
Return the number of buttons on the input pointing device
associated with the world.
.TP
.B "int NPlanes()"
Return the number of user-accessible bit planes the workstation display has.
.TP
.B "int PixelSize()"
Return the natural size in bits for storing a pixel.
.TP
.B "int Width()"
.ns
.TP
.B "int Height()"
Return the width and height in pixels of the screen.
.TP
.B "Coord InvMapX(Coord x)"
.ns
.TP
.B "Coord InvMapY(Coord y)"
Translate a coordinate to a device-dependent value.
Different workstations may have different origins
(e.g., lower left versus upper left).
.TP
.B "void RingBell(int vol)"
Ring the workstation bell with a volume as a percentage
of the possible range, with
0 the quietest and 100 the loudest.
.TP
.B "void SetAutoRepeat(boolean on)"
Turn on or off autorepeat for the keyboard.
.TP
.B "void SetFeedback(int threshold, int scale)"
Set the amount of magnification to give the user's movements
with the pointing device.
The \fIthreshold\fP is the minimum distance after which to scale the
movement and the \fIscale\fP is the factor by which to magnify the movement.
.TP
.B "void SetKeyClick(int vol)"
Set the volume of the audible keyclick as a percentage
of the possible range, with
0 the quietest and 100 the loudest.
.SH SEE ALSO
Interactor(2I), Scene(2I)
