.TH PAINT 2I "15 June 1987" "InterViews" "InterViews Reference Manual"
.SH NAME
paint \- Brush, Color, Font, and Pattern for a Painter
.SH SYNOPSIS
.B #include <InterViews/paint.h>
.SH DESCRIPTION
These classes control how
graphics operations are performed.
A
.B Brush
defines the thickness and pattern for drawing lines.
A
.B Color
defines a mix of rgb (red, green, and blue) intensities.
A
.B Font
defines the representation of characters on the screen.
A
.B Pattern
defines how to fill areas during appropriate graphics operations.
.PP
A number of global variables are defined
as pointers to common instances of these classes.
The brush ``single''
is for drawing solid lines that are one pixel wide.
The colors ``black'' and ``white'' are for zero and full intensity
output, respectively.
The font ``stdfont''
is a small, fixed-width font that
.I Painter
operations
use by default.
The patterns ``solid'' and ``clear'' are for filling all or none
of the pixels in a particular area.
The patterns ``lightgray'', ``gray'', and ``darkgray'' are
for filling one-eighth, one-half, or seven-eighths
of the pixels in an area.
.SH BRUSH OPERATIONS
.TP
.B "Brush(int linestyle, int width = 1)"
Define a brush with a given 32-bit pattern and width.
Wide brushes are not particularly portable to different graphics systems;
therefore filled rectangles or polygons should be used where possible.
.TP
.B "int Width()"
Return the brush's width in pixels.
.SH COLOR OPERATIONS
.TP
.B "Color(const char* name)"
Define a color with intensities associated with \fIname\fP
as defined in ``/usr/lib/rgb''.
.TP
.B "Color(int red, int green, int blue)"
Define a color with the specified red, green, and blue intensities.
Zero represents no intensity; 65535 represents full intensity.
.TP
.B "Color(int entry)"
Define a color with intensities associated with a color map entry.
.TP
.B "Color(int entry, int red, int green, int blue)"
Define a color with the given intensities and whose hardware color map
entry has the given index.
.TP
.B "void Intensities(int& red, int& green, int& blue)"
Get the intensities used for the color.
.TP
.B "int PixelValue()"
Return the color's index in the hardware color map.
.TP
.B "boolean Valid()"
Return whether the color is meaningful.
This call is useful for checking whether constructing a color
with a name was successful.
.SH FONT OPERATIONS
.TP
.B "Font(const char* str)"
.ns
.TP
.B "Font(const char* str, int length)"
Define a font associated with the given string or substring.
.TP
.B "int Baseline()"
Return the font's baseline in pixels.
.TP
.B "boolean FixedWidth()"
Return whether the font contains fixed width characters.
.TP
.B "int Height()"
Return the font's height in pixels.
.TP
.B "boolean Valid()"
Return whether the font is meaningful.
.TP
.B "int Width(const char* string)"
.ns
.TP
.B "int Width(const char* string, int len)"
Return the width in pixels that the string or substring
would have if it were displayed.
.TP
.B "int Index(const char* string, int offset, boolean between)"
.ns
.TP
.B "int Index(const char* string, int len, int offset, boolean between)"
Return the index in a string or substring of the character
that would be \fIoffset\fP pixels from the left
if the string were displayed.
If \fIbetween\fP is \fIfalse\fP, the index of the character that contains
\fIoffset\fP is returned;
otherwise the index of the character following the between-character space
that is nearest \fIoffset\fP is returned.  In either case a
negative offset will return an
index of zero and an offset beyond the end of the string or substring will
return an index equal to the length of the string.
.SH PATTERN OPERATIONS
.TP
.B "Pattern(int b[patternHeight])"
Define a pattern from the array \fIb\fP.
For each element of \fIb\fP,
the least significant
.I patternWidth
bits are used.
If a bit is one, then the foreground color will be used when filling.
Otherwise, the background color will be used.
Regardless of machine architecture, bits are interpreted left-to-right
(this is the opposite bit order from X,
which uses VAX format).
.TP
.B "Pattern(int i)"
Create a \fIPattern\fP by interpreting the least signficant 16 bits of \fIi\fP
as a 4x4 bitmap and replicating it to make a full
.I patternWidth
by
.I patternHeight
array.
.SH SEE ALSO
Painter(2I)
