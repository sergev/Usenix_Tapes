definition module main;

import 
    vdi,
    genlists,
    system;

export qualified
    MAXCOMPLEXITY, BLACK, WHITE, GenericList, Word,
    XCoord, YCoord, ColorValue, RenderingFunction, PatternData,
    Pattern, LineStyle, Font, PictureObjectType, AttribType,
    RenderingStyle, PaintType, ConcatOrder, PointType, Attributes,
    LineType, CircleType, EllipseType, EllipseSplineX, EllipseSplineY,
    RectType, RectPolyX, RectPolyY, VertexArray, TextType,
    FloatPointType, BoundingBox, BboxPtr, TransformMatrix, XformPtr,
    Picture, PictureRecord, XMAXSCREEN, YMAXSCREEN, solidPattern,
    clearPattern, vertPattern, horizPattern, majorDiagPattern, minorDiagPattern,
    thickVertPattern, thickHorizPattern, thickMajorDiagPattern, thickMinorDiagPattern, stipplePattern1,
    stipplePattern2, stipplePattern3, stipplePattern4, stipplePattern5, stipplePattern6,
    identityMatrix, originX, originY, InitGraphics, ExitGraphics,
    DefPattern, DefLineStyle, LoadFont, GetFontHeight;

const MAXCOMPLEXITY = 5;
(* public *) const BLACK = vdi.BLACK;
(* public *) const WHITE = vdi.WHITE;
(* public *) type GenericList = genlists.GenericList;
(* public *) type Word = system.Word;
(* public *) type XCoord = vdi.XCoord;
(* public *) type YCoord = vdi.YCoord;
(* public *) type ColorValue = vdi.ColorValue;
(* public *) type RenderingFunction = vdi.RenderingFunction;
(* public *) type PatternData = vdi.PatternData;
(* public *) type Pattern = vdi.Pattern;
(* public *) type LineStyle = vdi.LineStyle;
(* public *) type Font = vdi.Font;
(* public *) type
    PictureObjectType = (PointObj, CircleObj, EllipseObj, RectObj, 
    			 PolygonObj, BSplineObj, ClosedBSplineObj,
			 LineObj, TextObj, PictureList, None);
type
    AttribType = (
        FontAttrib, Color, BkgndColor, Paint, PatternAttrib, 
	Rendering, LineStyleAttrib, CurPos
    );
(* public *) type
    RenderingStyle = (Fill, Stroke);
(* public *) type
    PaintType = (Opaque, Transparent, Xor);
type
    ConcatOrder = (Before, After);
type
    PointType = record
        x : XCoord;
	y : YCoord;
    end;
type
    Attributes = record
	font	   : integer;
	color      : ColorValue;
	bkgndColor : ColorValue;
	paintType  : PaintType;
	pattern    : integer;
	rendering  : RenderingStyle;
	lineStyle  : integer;
	curPos     : PointType;
	origin	   : PointType;
	userData   : Word;
    end;
type
    LineType = record
	p1, p2  : PointType;
    end;
type
    CircleType = record
	center  : PointType;
     	radius	: integer;
    end;
type
    EllipseType = record
        center : PointType;
	r1, r2 : integer;
    end;
type EllipseSplineX = array [1..8] of XCoord;
type EllipseSplineY = array [1..8] of YCoord;
type
    RectType = record
	lowLeft, upRight : PointType;
    end;
type RectPolyX = array [1..5] of XCoord;
type RectPolyY = array [1..5] of YCoord;
type
    VertexArray = record
        x : dynarray of XCoord;
	y : dynarray of YCoord;
    end;
type
    TextType = record
	start	    : PointType;
	chars       : dynarray of char;
    end;			        
type
    FloatPointType = record
        x, y : real;
    end;
type
    BoundingBox = record
        lowLeft, upRight : PointType;
	center : FloatPointType;
    end;
type BboxPtr = pointer to BoundingBox;
type TransformMatrix = array [1..3], [1..2] of real;
type XformPtr = pointer to TransformMatrix;
(* public *) type Picture = pointer to PictureRecord;
type
    PictureRecord = record
        altered    : boolean;
	enabled	   : boolean;
	destroyed  : boolean;
	redraw     : boolean;
	attrib	   : Attributes;
	bbox	   : BoundingBox;
	xform      : XformPtr;
	parent     : Picture;
	eraseMask  : Picture;
	complexity : [0..MAXCOMPLEXITY];

        case objType : PictureObjectType of
	    PointObj:    point    : PointType    |
	    LineObj:	 line	  : LineType     |
	    CircleObj:	 circle	  : CircleType   |
	    EllipseObj:  ellipse  : EllipseType  |
	    RectObj:	 rect	  : RectType     |
	    PolygonObj,
	    BSplineObj,
	    ClosedBSplineObj:
	    		 vertex	  : VertexArray  |
 	    TextObj:	 text	  : TextType     |
	    PictureList: pictList : GenericList
        end;
    end;
(* public *) var XMAXSCREEN : XCoord;
(* public *) var YMAXSCREEN : YCoord;
(* public *) var solidPattern : Pattern;
(* public *) var clearPattern : Pattern;
(* public *) var vertPattern : Pattern;
(* public *) var horizPattern : Pattern;
(* public *) var majorDiagPattern : Pattern;
(* public *) var minorDiagPattern : Pattern;
(* public *) var thickVertPattern : Pattern;
(* public *) var thickHorizPattern : Pattern;
(* public *) var thickMajorDiagPattern : Pattern;
(* public *) var thickMinorDiagPattern : Pattern;
(* public *) var stipplePattern1 : Pattern;
(* public *) var stipplePattern2 : Pattern;
(* public *) var stipplePattern3 : Pattern;
(* public *) var stipplePattern4 : Pattern;
(* public *) var stipplePattern5 : Pattern;
(* public *) var stipplePattern6 : Pattern;
var identityMatrix : TransformMatrix;
var originX : XCoord;
var originY : YCoord;
(* public *) procedure InitGraphics();
(* public *) procedure ExitGraphics();
(* public *) procedure DefPattern(var p : PatternData) : Pattern;
(* public *) procedure DefLineStyle(const i : integer) : LineStyle;
(* public *) procedure LoadFont(const aoc : array of char) : Font;
(* public *) procedure GetFontHeight(n : integer) : integer;

end main.
