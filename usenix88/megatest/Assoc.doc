//
// Class Assoc is a generic associative-array class.
// Class Name_table is a somewhat less generic derived class which
// maps null-terminated strings to arbitrary things.
//
// There is also an iterator class for the arrays.
//
// These classes use open hash-tables.   The "keys" are typed a char*, but 
// as far as Assoc is concerned, they could be anything.
// 
// Virutal functions:
//
//    copy_key(char*)     Makes a copy of the key, to be stored in the hash-
//                          table for future comparison
//    delete_key(char*)   Deletes the key when no longer needed
//    equiv(char*,char*)  Returns 1 iff the keys are equivalent.
//    hash(char*)         Used by hashing algorithm. 
//                          Requirement: hash(key1)==hash(key2) if
//                          equiv(key1,key2) is true
//    init(VOID *)        Initializes an entry which has not been
//                          previously referenced
//
// See definitions of Assoc and Name_table in Assoc.C and Assoc.H
// for the default function definitions of these virtual functions.
//
// The macro NAME_TABLE defines three derived classes of Name_table.  
// For example,
//
// NAME_TABLE(Identifier, struct id_rec )
// 
// defines classes "Identifier_table", "Identifier_entry", and 
// "Identifier_iterator".
//
// You can use an object of type "Identifier_table" as though it were 
// an array of struct id_rec's :
//
// table["foo"] = some_struct_id_rec;
//
// Identifier_entry has methods index() and value() which return the
// key associated with an entry, and the contents of the entry, respectively.
//
// Identifier_iterator will iterate through all the entries in the table.
//
// See assoc_demo.C.
// 
