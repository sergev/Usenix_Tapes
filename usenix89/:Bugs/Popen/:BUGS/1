Path: plus5!wuphys!wucs!we53!ltuxa!cuae2!ihnp4!mhuxn!mhuxr!ulysses!bellcore!decvax!decwrl!pyramid!hplabs!ucbvax!nike!sri-spam!argv
From: argv@sri-spam.ARPA (AAAARRRRGGGGv)
Newsgroups: net.sources.bugs
Subject: Re: new version of popen(3)
Message-ID: <5503@sri-spam.ARPA>
Date: 8 Apr 86 18:19:21 GMT
References: <201@dcc1.UUCP> <752@puff.UUCP>
Distribution: net
Organization: SRI International, Menlo Park, CA
Lines: 43
Summary: new popen; an alternative
Posted: Tue Apr  8 12:19:21 1986

In article <752@puff.UUCP>, tom@puff.wisc.edu (Thomas Scott Christiansen)
submitted code to open a process for reading and writing.
The problem I have with the code submitted is that socketpair
is not portable across all UNIX and vfork only works on virtual memory
machines..  The following is offered only as an alternative rather than
a replacement.

/* rwpopen -- open a process for reading and writing */
#include <stdio.h>
#define TRUE 1
#define FALSE 0

rwpopen(cmd, write_fp, read_fp)
char *cmd;
FILE **write_fp, **read_fp;
{
    int pid;
    int write_pipe[2], read_pipe[2];

    if (pipe(write_pipe) < 0)
	return(FALSE);
    if (pipe(read_pipe) < 0)
	return(FALSE);
    *write_fp = fdopen(write_pipe[1], "w");
    *read_fp = fdopen(read_pipe[0], "r");
    /* unbuffer the writing so that the read can read something. */
    setbuf(*write_fp, NULL);
    if (!(pid = fork())) {
	close(write_pipe[1]);
	dup2(write_pipe[0], 0);
	/* if you want stderr to go to the read pipe as well as stdout:
	   dup2(read_pipe[1], 2); */
	close(read_pipe[0]);
	dup2(read_pipe[1], 1);
	execl(cmd, cmd, 0);
	_exit(1);
    }
    if (pid == -1)
	return(FALSE);
    close(write_pipe[0]);
    close(read_pipe[1]);
    return(TRUE);
}
