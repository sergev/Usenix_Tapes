*** vaxuba/uba.c.4.3	Thu Jun  5 04:19:32 1986
--- vaxuba/uba.c	Tue Feb 10 21:14:26 1987
***************
*** 33,36 ****
--- 33,38 ----
  #define	spluba	spl7		/* IPL 17 */
  
+ #define	BDPMASK	0xf0000000	/* see ubavar.h */
+ 
  /*
   * Do transfer on device argument.  The controller
***************
*** 38,66 ****
   * We queue for resource wait in the uba code if necessary.
   * We return 1 if the transfer was started, 0 if it was not.
!  * If you call this routine with the head of the queue for a
!  * UBA, it will automatically remove the device from the UBA
!  * queue before it returns.  If some other device is given
!  * as argument, it will be added to the request queue if the
!  * request cannot be started immediately.  This means that
!  * passing a device which is on the queue but not at the head
!  * of the request queue is likely to be a disaster.
   */
! ubago(ui)
  	register struct uba_device *ui;
  {
  	register struct uba_ctlr *um = ui->ui_mi;
  	register struct uba_hd *uh;
  	register int s, unit;
  
  	uh = &uba_hd[um->um_ubanum];
  	s = spluba();
! 	if (um->um_driver->ud_xclu && uh->uh_users > 0 || uh->uh_xclu)
  		goto rwait;
! 	um->um_ubinfo = ubasetup(um->um_ubanum, um->um_tab.b_actf->b_actf,
! 	    UBA_NEEDBDP|UBA_CANTWAIT);
  	if (um->um_ubinfo == 0)
  		goto rwait;
  	uh->uh_users++;
! 	if (um->um_driver->ud_xclu)
  		uh->uh_xclu = 1;
  	splx(s);
--- 40,93 ----
   * We queue for resource wait in the uba code if necessary.
   * We return 1 if the transfer was started, 0 if it was not.
!  *
!  * The onq argument must be zero iff the device is not on the
!  * queue for this UBA.  If onq is set, the device must be at the
!  * head of the queue.  In any case, if the transfer is started,
!  * the device will be off the queue, and if not, it will be on.
!  *
!  * Drivers that allocate one BDP and hold it for some time should
!  * set ud_keepbdp.  In this case um_bdp tells which BDP is allocated
!  * to the controller, unless it is zero, indicating that the controller
!  * does not now have a BDP.
   */
! ubaqueue(ui, onq)
  	register struct uba_device *ui;
+ 	int onq;
  {
  	register struct uba_ctlr *um = ui->ui_mi;
  	register struct uba_hd *uh;
+ 	register struct uba_driver *ud;
  	register int s, unit;
  
  	uh = &uba_hd[um->um_ubanum];
+ 	ud = um->um_driver;
  	s = spluba();
! 	/*
! 	 * Honor exclusive BDP use requests.
! 	 */
! 	if (ud->ud_xclu && uh->uh_users > 0 || uh->uh_xclu)
  		goto rwait;
! 	if (ud->ud_keepbdp) {
! 		/*
! 		 * First get just a BDP (though in fact it comes with
! 		 * one map register too).
! 		 */
! 		if (um->um_bdp == 0) {
! 			um->um_bdp = uballoc(um->um_ubanum,
! 				(caddr_t)0, 0, UBA_NEEDBDP|UBA_CANTWAIT);
! 			if (um->um_bdp == 0)
! 				goto rwait;
! 		}
! 		/* now share it with this transfer */
! 		um->um_ubinfo = ubasetup(um->um_ubanum,
! 			um->um_tab.b_actf->b_actf,
! 			um->um_bdp|UBA_HAVEBDP|UBA_CANTWAIT);
! 	} else
! 		um->um_ubinfo = ubasetup(um->um_ubanum,
! 			um->um_tab.b_actf->b_actf, UBA_NEEDBDP|UBA_CANTWAIT);
  	if (um->um_ubinfo == 0)
  		goto rwait;
  	uh->uh_users++;
! 	if (ud->ud_xclu)
  		uh->uh_xclu = 1;
  	splx(s);
***************
*** 71,80 ****
  		dk_wds[unit] += um->um_tab.b_actf->b_actf->b_bcount>>6;
  	}
! 	if (uh->uh_actf == ui)
  		uh->uh_actf = ui->ui_forw;
! 	(*um->um_driver->ud_dgo)(um);
  	return (1);
  rwait:
! 	if (uh->uh_actf != ui) {
  		ui->ui_forw = NULL;
  		if (uh->uh_actf == NULL)
--- 98,107 ----
  		dk_wds[unit] += um->um_tab.b_actf->b_actf->b_bcount>>6;
  	}
! 	if (onq)
  		uh->uh_actf = ui->ui_forw;
! 	(*ud->ud_dgo)(um);
  	return (1);
  rwait:
! 	if (!onq) {
  		ui->ui_forw = NULL;
  		if (uh->uh_actf == NULL)
***************
*** 96,99 ****
--- 123,128 ----
  		uh->uh_xclu = 0;
  	uh->uh_users--;
+ 	if (um->um_driver->ud_keepbdp)
+ 		um->um_ubinfo &= ~BDPMASK;	/* keep BDP for misers */
  	ubarelse(um->um_ubanum, &um->um_ubinfo);
  }
***************
*** 273,277 ****
  		wakeup((caddr_t)&uh->uh_mrwant);
  	}
! 	while (uh->uh_actf && ubago(uh->uh_actf))
  		;
  }
--- 302,306 ----
  		wakeup((caddr_t)&uh->uh_mrwant);
  	}
! 	while (uh->uh_actf && ubaqueue(uh->uh_actf, 1))
  		;
  }
