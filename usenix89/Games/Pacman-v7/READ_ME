This is the first source distribution of the game "pm".  This game should
run under Version 7, BSD4.2, BSD4.3, BSD2.8, BSD2.9.  A BSD4.3 version has
not been tested, but binary distribution bug reports have indicated some
problems in "flsbuf.c" that I think are now corrected.

This version still does busy looping.  An implementation of msleep() was
tried that used setitimer() for sleeping, but this did not work satisfactorly.
If someone else is able to make a better version of msleep(), I would
appreciate it if they could send me the source.  However, thus far I have
found the current msleep() to be the most portable between different
operating system versions (it is the original UNIX Version 7 version).
Note the define "MYTIMER" turns on the busy looping and off the setitimer(2).


Wed Oct 30 00:23:20 PST 1985

This is the first binary distribution of the game "pm", a UNIX version
of the arcade game Pacman.  A source distribution will be made within
the next couple of months via netnews.  Please send all bug reports to
me (...!ucbvax!ucdavis!deneb!ccohesh001) so that they can be incorporated
into the first source distribution.

This binary distribution will only run under UNIX 4.2BSD.  A binary for
UNIX 2.9BSD can be provided upon request.

Since I am the main source of distribution, please mail all suggestions
or comments to me.

			Peter Costantinidis, Jr.
			...!ucbvax!ucdavis!deneb!ccohesh001


The following may not make much sense unless you have a source distribution:

Mon Aug 30 11:18:09 PDT 1982

Look an pending(), it's sole purpose is to tell if the user has
typed anything, and if so, then read it, if not, then go on.  If
you don't have a similar function, then you are screwed!!!

The purpose of delay() is to slow the CPU down so that the terminal can
keep up.  I load in my own copy of flsbuf (stdio) that counts the number
of characters that are printed.  I make sure that the CPU waits long
enough to make sure that they all got printed (a simple function of the
baud rate will tell you how long you need to wait).

If you want a list of commands, type in a '?'.  If you want
the Wizard's commands, look in the define file.  If you want the
Wizard's password, decrypt the one in the define file or make your own.
If (argv[0] == "tester") then you are wizard automatically (this
should probably be kept secret).

Pm "remembers" the uids of everyone who has played.  These are maintained
in the pm_user file by setting the bit corresponding to the uid.  If a
player has not played before, they are given an opening message (printed
out by the inappropriately named function directions()), and will then
never see it again.

If you don't have curses, then give up!

One problem encountered during the development of this program was curses.
The one I was using had problems and you may notice code that might not be
useful any longer (assuming your version of curses doesn't have these bugs).

The game looks best if the `maze' ('#' characters) are in inverse video.
If your termcap defines standout to be high intensity, the board would
probably look best if you tweeked the code and made the maze normal (i.e.
not in standout) and everything else in high intensity (standout).

I would like to thank Rick Heli, a member of UCD's Computer Center staff
for his help in the documentation of this program.
