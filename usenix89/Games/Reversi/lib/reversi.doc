






                    _T_h_e _G_a_m_e _o_f _R_e_v_e_r_s_i


     _R_e_v_e_r_s_i is an old english game, recently "invented"  in
Japan  under the name Othello. It is played on an 8x8 board,
with pieces which are black on one side  and  white  on  the
other.   Except  for  the initial 4 moves, which must all be
made in the centre 4 squares, a legal move consists of plac-
ing  a  piece  of  one's  own  colour  on the board so as to
"sandwich" a row (orthogonal or diagonal) of pieces  of  the
opposite  colour  between  the piece just placed and another
piece of the same colour.   All  pieces  so  sandwiched  are
flipped over to reveal the colour on the other side.

     The object is to have more pieces than the opponent  at
the  end of the game (i.e. when the board is full or neither
side has a legal move).  If you have no legal move, you sim-
ply miss a turn.  Black moves first.

     To specify a move, type its  coordinates  in  the  form
<letter><digit>.

     There are also a number of  other  commands.   Some  of
these  cause  evaluations to be printed out - in this case a
negative value means white is winning, a positive one  means
black  is  winning.   Some commands take an optional integer
argument to specify a depth - the  default  is  the  current
depth of search.

    Commands:
    ____________________________________________________
    ? or h      Print help
    q           Quit the current game.
    p           Print the position.
    t           Switch tracing on or off - with  tracing
                on  the  program's estimate of the value
                of the position is printed each time  it
                moves.
    e           Print the static evaluation of the posi-
                tion;  this  is  a  very unsophisticated
                type of evaluation.
    v<n>        Print the dynamic evaluation of the  po-
                sition,  using  a search depth of n (the
                default is the current depth).  This in-
                volves  the  program  searching possible
                lines of play up to  n  moves  ahead  in
                order to evaluate the position.



















    m<n>        Suggest a move; the program uses its own
                search  strategy  with  depth n (default
                the current  depth)  to  find  the  move
                which  it  would  play in its opponent's
                position.
    s<n>        Set the current search depth to n moves.
                If  n  is  missing, the current depth is
                printed.   At  present,  n  may  not  be
                greater  than  6; it is set initially to
                2.  A beginner should  set  n  to  1  at
                first.
    l<n>        Set the current level of  aspiration  to
                n; the higher the value of n, the higher
                will be the program's standards for  ac-
                cepting  a  move  as  playable.  If n is
                missing, the current level  is  printed.
                At present, n may not be greater than 6;
                it is initially 3.   A  beginner  should
                play  with  n  set  to  1, and an expert
                should not normally set n greater than 5
                (at  level 6, the program not only tries
                to win, but tries to win by the greatest
                possible margin).
    r           Switch remarks on or off;  with  remarks
                on, the program will make comments (usu-
                ally rude) about the state of play.
    u           Undo the last move you made -  this  is,
                of course, cheating unless you genuinely
                mistyped it!
    >           Save the position on a file  -  you  are
                prompted for the filename.
    <           Restore a position from file.


     All settings (tracing, search  depth,  level,  remarks)
are preserved from one game to the next.























