The following is a very "short" program that will find all the
 C identifiers in a program that are longer then 8 characters
 long.  It will output them to a header file.  It is done
 in two passes.  The first pass finds the identifiers and then
 second pass does something with them.  Currently it will
 create a set of defines for the identifiers.  If you wish
 you can change identp2.c to have it make a set of sed or
 ed commands that will substitute the identifiers.


I hope this helps and that it ends the current problems with
 long identifiers. I wrote pass1 in lex and then included a
 lex'ed copy for those without lex.  It "should" compile
 without any problem.  It had made one identifer longer then 8
 characters but I used ed and substituted a shorter identifer
 for it using the output of the shortc.  I hope it works.

				--Josh Siegel

P.S.  the shell script "shortc" is a hack. All it does it pass
 	stuff to the shortp1 and shortp2.  I would be interested
 	in any better ideas somebody might have.

Files:

Makefile		A short makefile
README			This file
identp1.h		A header file that lets you set the MaxCharacters
shortc*			The shell script that drives it all
shortc.1		A manual page for shortc
shortp1.c		The C code for the first pass of shortc
shortp1.l		The Lex source code for the first pass
shortp2.c		The second pass.  This is the one you change.
