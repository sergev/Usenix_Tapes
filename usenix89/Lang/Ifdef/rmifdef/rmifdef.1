.TH RMIFDEF 1 local
.SH NAME
rmifdef \- remove ifdefs from file
.SH SYNOPSIS
.B rmifdef
[
.I flags
] [
.I files
]
.SH DESCRIPTION
.I Rmifdef
reads the specified files (standard input default) and produces on standard
output the same files with #ifdef and #ifndef lines removed.
If the
.B \-w
option is given, the input files will be overwritten.
With the
.BI \-D name
and
.BI \-U name
options you can specify which identifiers are to be considered defined or
undefined respectively.
If no
.B \-a
option is given,
.I rmifdef
will ask for each identifier it doesn't know yet if it should be considered
defined or undefined.
If the answer is
.I y
or
.IR n ,
the identifier will be remembered and the lines after the #ifdef or #ifndef
will be retained or removed according to the answer.
If the answer is something else
.RI ( e . g .
an empty line) the identifier will be remembered and the #ifdef or #ifndef
line and the following lines will be kept.
If the
.B \-a
option is given the lines will be kept if the identifier is unknown.
.SH EXAMPLE
If the input file looks like
.br
	#ifdef m68000
.br
	short i;
.br
	#else
.br
	int i;
.br
	#endif
.br
	#ifdef BSD
.br
	blah
.br
	#else
.br
	blech
.br
	#endif
.br
	\&...
.br
and you invoke it like this:
.br
	rmifdef -a -DSYS5 -Dm68000 <x.c >x.c.new
.br
the output would be
.br
	short i;
.br
	#ifdef BSD
.br
	blah
.br
	#else
.br
	blech
.br
	#endif
.br
	\&...
.br
If you invoke it like this:
.br
	rmifdef -a -UBSD -Dm68000 <x.c >x.c.new
.br
the output would be:
.br
	short i;
.br
	blech
.br
	\&...
.SH BUGS
.I Rmifdef
doesn't look at #defines in the file.
.br
You have to specify each and every identifier that is used in an #ifdef
or #ifndef if you want to remove all #ifdefs.
.SH AUTHOR
Sjoerd Mullender, Vrije Universiteit, Amsterdam
.br
sjoerd@vu44.uucp
