
2 CLEAR 5000
5 DEFINT A-Z
10 A0=100:A1=200:A2=100:A3=50:A4=8:A5=300:A6=1000:REM  SIZES                       A0=ELEMENTS,A1=SIGNALS,A2=EXTERNALS,A3=OUTPUTS,A4=TYPES,                        A5=SCHED. EVENTS,A6=SELECTIVE TRACE POINTERS
20 DIM D(A1),E(A2,6),H(A5,2),L(A0,8),O(A1),P(A1),S(A6),V(A1)
25 REM DATA STRUCTURE: D=DELAYS,E=EXTERNALS,H=SCHEDULE TREE,                       L=LOGIC,O=OUTPUTS,P=PRIOR VALUES,S=SELECTIVE TRACE,V=VALUES
26 REM TRUTH TABLES: I=INVERTER,M=MUX,Q(0,.)=TG,Q(1,.)=AND,                        Q(2,.)=OR,Q(3,.)=XOR,R=SET/RESET,U=UNDEFINED INPUT VALUES,                      W=WIRE
27 DIM I(3),M(2,2,2),Q(3,2,2),R(2,2,2),U(4),W(3,3)
30 DIM E$(A2),I$(10),N$(A1),O$(6),P$(4),T$(8)
35 REM STING VALUES: E$=EXTERNALS,I$=TEMP INPUTS,N$=SIGNALS,                       O$=TEMP OUTPUTS,P$=PRINT SYMBOLS,T$=TYPES
50 GOTO 9000: REM PUT PROCESSING IN HIGH MEMORY, TO SPEED UP                       SUBROUTINE CALLS
99 REM SELECTIVE TRACE, BUILD LIST OF ELEMS TO BE SIMULATED
100 S1=S(H1):S2=S(H1+1):S0=S(N1+1):V(H1)=H2:C0=1
110 IF S1=S2 THEN RETURN
120 L0=S(S1):GOSUB 200:S1=S1+1:GOTO 110:REM MARK ELEMENTS
200 IF S9=0 THEN 250:REM BUILD LIST OF ELEM. TO BE SIMD.
210 F0=-1:FOR S3=S8+1 TO S9:IF S(S0+S3)=L0 THEN F0=1:S3=S9
220 NEXT S3:IF F0=1 THEN RETURN:REM ALREADY ON LIST
250 S9=S9+1:IF S0+S9<A6 THEN S(S0+S9)=L0:RETURN
260 PRINT "INSUFFICIENT ROOM IN SELECTIVE TRACE",                   " INCREASE A6":STOP
300 IF H2=P(H1) THEN RETURN:REM CHECK CHANGE AND SCHEDULE
310 P(H1)=H2:IF H0=T0 THEN GOSUB 100:RETURN:REM UNLESS SCHED        NOW
320 GOSUB 3000:RETURN
500 IF H3=H4 THEN T1=T9:RETURN: REM GET SCHED EVENTS FM TREE
510 H6=H3:GOSUB 3100:T1=H(H7,0):IF T1>T0 THEN RETURN
520 H1=H(H7,1):H2=H(H7,2):GOSUB 3200:REM GET DATA AND DELETE
530 GOSUB 100:GOTO 500:REM UPDATE VALUE AND MARK DRIVEN ELEMS.
800 Q2=V(Q0):IF Q0=0 THEN Q2=I(V(Q1))
810 RETURN
900 GOSUB 950:T0=T1:IF T0>T2 THEN T0=T2:REM UPDATE SIM TIME
910 IF T0>T3 THEN T0=T3
920 RETURN
950 IF H3=H4 THEN T1=T9:RETURN
960 H6=H3:GOSUB 3100:T1=H(H7,0):RETURN
1000 V(0)=U(L9):H2=V(L(L0,1)):REM AND,OR,XOR FUNCTIONS
1010 FOR I=1 TO 5:H2=Q(L9,H2,V(L(L0,1))):NEXT I:GOSUB 1050:          IF L3=1 THEN GOTO 1010:REM DO 5 INPUTS, CHECK FOR CONTINUE
1020 RETURN
1050 L3=0:L0=L0+1:IF L0<=N0 AND L(L0,0)=0 THEN L3=1: REM SUB TO      CHECK FOR CONTINUE ELEMENT AS NEXT LOGIC ELEMENT
1060 RETURN: REM SETS L3 TO 1 IF CONTINUE
1300 V(0)=U(0):H2=Q(0,V(L(L0,1)),V(L(L0,2))):RETURN:REM TG
1400 V(0)=3:H2=3: REM WIRE GATE
1410 FOR I=1 TO 5:H2=W(H2,V(L(L0,I))):NEXT I:L0=L0+1:                IF L0<=N0 AND L(L0,0)=0 THEN 1410:REM CHECK FOR CONTINUE
1420 IF H2=3 THEN GOSUB 800:H2=Q2:REM ALL HIGHZ
1430 RETURN
1500 V(0)=2:D0=V(L(L0,1)):D1=V(L(L0,2)):D2=V(L(L0,3)):REM MUX
1510 V(0)=1:D3=V(L(L0,4)):D4=V(L(L0,5)):REM ALLOWS SET,RESET
1520 H2=R(M(D0,D1,D2),D3,D4):RETURN
1600 V(0)=2:D0=V(L(L0,1)):D1=V(L(L0,2)):GOSUB 800:D5=Q2:REM DFF
1610 V(0)=1:D2=L(L0,8):D3=V(L(L0,4)):D4=V(L(L0,5)):REM               D0=DATA, D1=CLK,D2=LATCH, D3=SET, D4=RESET, D5=PRIOR Q
1620 L(L0,8)=R(M(D0,D2,D1),D3,D4):H2=R(M(D5,D2,D1),D3,D4):           RETURN      :REM LATCH, Q
1700 V(0)=2:GOSUB 800:D5=Q2:D0=M(V(L(L0,1)),I(V(L(L0,2))),D5):       D1=I(V(L(L0,3))):GOSUB 1610:RETURN:                             REM JK=J*Q- + K-*Q + J*K-
3000 H6=H4:REM TREE PROCESSING- SORTED INSERTION ********
3010 IF H0=>H(H6,0) THEN 3050:REM FOUND INSERTED SPOT
3020 GOSUB 3100:FOR H8=0 TO 2:H(H7,H8)=H(H6,H8):NEXT H8:REM          MOVE
3025 IF H(H7,1)=0 THEN STOP
3030 H6=H6-1:IF H6<0 THEN H6=A5:REM DECREMENT H6
3040 GOTO 3010
3050 GOSUB 3100:H(H7,0)=H0:H(H7,1)=H1:H(H7,2)=H2:REM ADD ENTRY
3060 H6=H4:GOSUB 3100:H4=H7:RETURN:REM INC. END OF TREE
3100 H7=H6+1:IF H7>A5 THEN H7=0:REM INC. H6 INTO H7 *******
3110 IF H(H7,0)=-999 THEN PRINT "OUT OF ROOM IN SCHEDULER":STOP
3120 RETURN
3200 IF H3=H4 THEN 3220:REM DELETE 1ST ENTRY FROM TREE *******
3210 H(H3,0)=0:H3=H3+1:IF H3>A5 THEN H3=0
3220 H(H3,0)=-999:RETURN:REM 1ST ENTRY IS MARKED WITH A -999
4000 S7=S(N1+1):S8=1:REM SIMULATE GATES **********************
4010 L0=S(S7+S8):L9=L(L0,0):Q0=L(L0,6):Q1=L(L0,7)
4020 ON L9 GOSUB 1000,1000,1000,1300,1400,1500,1600,1700
4030 IF Q0<>0 THEN H1=Q0:H0=T0+D(Q0):GOSUB 300:REM STORE Q
4040 IF Q1<>0 THEN H1=Q1:H0=T0+D(Q1):H2=I(H2):GOSUB 300:REM Q-
4050 S8=S8+1:IF S8<=S9 THEN 4010
4060 S9=0:S8=0:RETURN
5000 IF T0<>T2 THEN RETURN:REM PROCESS EXTS ******************
5010 T2=T9
5020 FOR I=0 TO N2:H0=E(I,6):IF H0=T0 THEN GOSUB 5100:E(I,6)=H0:     REM  PROCESS EXTS SCHED FOR THIS TIME            (&UPDATE SCHED TIME)
5030 IF H0<T2 THEN T2=H0:REM KEEP TRACK OF EARLIEST NEXT 
5040 NEXT I
5080 RETURN
5100 H2$=MID$(E$(I),E(I,5),1):H2=VAL(H2$):H1=E(I,1):GOSUB 300:       REM PUT VALUE IN V, IF CHANGED
5110 E(I,5)=E(I,5)+1:H0=H0+E(I,3):IF H0>E(I,4) THEN H0=T9:           RETURN     :REM UPDATE STRING POINTER AND END TIME
5120 IF E(I,5)<=LEN(E$(I)) THEN RETURN
5130 REM END OF STRING, CHECK FOR CYCLICS
5140 IF E(I,0)=0 THEN H0=T9:RETURN
5150 E(I,5)=1:RETURN
5990 REM DO SIMULATION **************************************
6000 IF T0=T1 THEN GOSUB 500:REM GET SCHED. CHANGES
6010 IF T0=T2 THEN GOSUB 5000:REM GET EXT CHANGES
6020 IF S9>0 THEN GOSUB 4000:REM DO SIMULATION OF GATES
6030 IF T0=T3 THEN GOSUB 7000:REM DO PRINTOUT
6040 GOSUB 900:REM UPDATE NEXT SIMULATION TIME
6045 IF T1=T9 AND T2=T9 THEN GOSUB 7000:R0$="P":RETURN: REM          STOP (AFTER FINAL PRINTOUT) IF ALL ACTIVITY HAS ENDED
6050 R0$=INKEY$:IF R0$="" THEN 6000:REM LOOP UNTIL USER INPUT
6080 RETURN
6990 REM PRINTOUT ROUTINE **********************************
7000 IF P0=0 THEN GOSUB 7500:REM PRINT HEADER FOR EACH NEW PG
7010 IF C0=0 THEN GOTO 7060:REM CREATE LINE (UNLESS NO CHANGE)
7020 P0$="":V(0)=4:FOR P1=0 TO N3:P0$=P0$+P$(V(O(P1))):NEXT P1
7060 PRINT T0,P0$:IF P9=1 THEN LPRINT T0,P0$
7070 C0=0:P0=P0+1:IF P0=>P8 THEN P0=0
7080 T3=T3+M1:RETURN
7500 P4=1:PRINT :IF P9=1 THEN LPRINT CHR$(12)
7510 FOR I=1 TO 6
7530 IF O$(I)<>STRING$(LEN(O$(I)),B0$) THEN PRINT " ",O$(I):         IF P9=1 THEN LPRINT " ",O$(I)
7540 NEXT I
7550 P4=P4+1:IF P6=1 THEN P6=0:GOTO 7510
7560 C0=1:RETURN
8990 REM MAIN PROCESSING *************************************
9000 PRINT "INITIALIZING ARRAYS AND VARIABLES":GOSUB 10000
9010 PRINT "READING INPUT DATA":GOSUB 20000
9020 PRINT "CHECKING FOR ERRORS":GOSUB 25000
9030 IF E0>0 THEN PRINT "ERRORS ON INPUT":STOP
9040 PRINT "INITIALIZING FOR SIMULATION":GOSUB 14000
9050 GOSUB 29000:REM GET CONTROL INFORMATION
9060 PRINT "STARTING SIMULATION":GOSUB 6000:REM DO SIMULATION
9070 REM RETURNS IF USER INPUT
9075 IF R0$="P" THEN PRINT:PRINT "SIMULATION COMPLETED": INPUT       "ENTER R (RESTART) OR Q (QUIT)";R0$
9080 IF R0$="R" THEN 9040:REM RESTART
9090 IF R0$="C" THEN 9050:REM CHANGE (SAMPLE POINTS,ETC)
9100 IF R0$<>"Q" THEN 9060:REM CONTINUE
9180 CLOSE:STOP
9990 REM INITIALIZE ARRAYS AND VARIABLES **********************
10000 FOR I=0 TO 8:READ T$(I):NEXT I:REM TYPES
10010 DATA *,AND,OR,XOR,TG,WIRE,MUX,DFF,JKFF
10020 FOR I=0 TO 3:FOR J=0 TO 2:FOR K=0 TO 2:READ Q(I,J,K):NEXT       K:NEXT J:READ U(I):NEXT I:REM COMB. GATES TRUTH TABLES
10030 DATA 3,0,2,3,1,2,3,2,2,2:REM TG
10040 DATA 0,0,0,0,1,2,0,2,2,1:REM AND
10050 DATA 0,1,2,1,1,1,2,1,2,0:REM OR
10060 DATA 0,1,2,1,0,2,2,2,2,0:REM XOR
10070 FOR I=0 TO 3:FOR J=0 TO 3:READ W(I,J):NEXT J:NEXT I:READ        U(4):REM WIRE
10080 DATA 0,2,2,0,2,1,2,1,2,2,2,2,0,1,2,3,3:REM WIRE
10090 FOR I=0 TO 2:READ I(I):NEXT I:REM INVERTER
10100 DATA 1,0,2:REM INVERTER
10110 FOR I=0 TO 2:FOR J=0 TO 2:FOR K=0 TO 2:READ R(I,J,K):NEXT       K:NEXT J:NEXT I:REM RESET-SET TRUTH TABLE
10120 DATA 2,1,2,0,0,0,2,2,2, 2,1,2,0,1,2,2,1,2,                      2,1,2,0,2,2,2,2,2      :REM RESET-SET
10130 FOR I=0 TO 4:READ P$(I):NEXT I:REM PRINT SYMBOLS
10140 DATA 0,1,?,Z," "
10150 IF T9=0 THEN T9=32767
10190 READ X:DATA 1234:IF X<>1234 THEN PRINT                          "ERROR INITIALIZING DATA":STOP:REM                               CHECK FOR CORRECT READS
10200 FOR I=0 TO 2:FOR J=0 TO 2:FOR K=0 TO 2:REM MUX
10210 M(I,J,K)=Q(2,Q(2,Q(1,I,I(K)),Q(1,J,K)),Q(1,I,J)):REM            MUX(I,J,K)=(I*K-) + (J*K) + (I*J)
10220 NEXT K:NEXT J:NEXT I
10230 N0=-1:N1=0:N2=-1:N3=-1:REM # ELEMS,SIGS,EXTS,SAMPS
10240 B0$=" ":C0$=",":N$(0)="":REM BLANK NAME IS NULL-SIG(0)
10250 P9=0:P8=40:INPUT "WANT HARD COPY OUTPUT";I0$:IF I0$="Y"         THEN P9=1
10290 RETURN
13990 REM INITIALIZE FOR SIMULATION ***************************
14000 T0=0:T1=0:S8=0:S9=0:REM INIT. TIME AND STT LINKS
14010 FOR I=0 TO N0:L(I,8)=2:NEXT I:REM INITIALIZE STORAGE SIGS
14020 H(H3,0)=0:H0=0:H2=2:H3=0:H(H3,0)=-999:H4=0:                     FOR H1=1 TO N1:GOSUB 300 :NEXT H1:REM                           SCHEDULE EACH SIGNAL TO GO TO X AT TIME 0
14030 T2=T9:FOR I=0 TO N2:E(I,5)=1:E(I,6)=E(I,2):IF E(I,6)<T2         THEN T2=E(I,6):REM INITIALIZE EXTS
14040 NEXT I
14090 RETURN
19990 REM READ INPUT DATA *************************************
20000 GOSUB 21000:REM READ LOGIC
20005 'GOSUB 30100:REM DEBUG DUMP
20010 GOSUB 22000:REM READ EXTS
20015 'GOSUB 30500:REM DEBUG DUMP
20020 GOSUB 23000:REM READ OUTPUTS
20025 'GOSUB 30600:REM DEBUG DUMP
20030 GOSUB 30000:REM PRINT OUT LOGIC NET LIST
20080 RETURN
20510 RETURN
20600 REM READ AND ECHO INPUT
20601 READ I0$:PRINT I0$;C0$;:IF P9=1 THEN LPRINT I0$;C0$;
20603 IF MID$(I0$,1,3)<>"REM" AND MID$(I0$,1,1)<>"'" THEN 20606
20605 RX=1:PRINT:IF P9=1 THEN LPRINT
20606 IF RX=1 THEN RX=0:GOTO 20600
20610 RETURN
20700 FOR I0=1 TO I9:GOSUB 20600:I$(I0)=I0$:NEXT I0
20710 PRINT:IF P9=1 THEN LPRINT 
20720 RETURN
20990 REM READ IN LOGIC ELEMENTS *****************************
21000 GOSUB 20600:IF I0$="END" THEN GOSUB 20710:RETURN: REM GET       TYPE
21010 T0$=I0$:I9=8:GOSUB 20700:REM READ SIGNALS, DELAY
21020 GOSUB 21200:IF F0=-1 THEN PRINT                                 "UNRECOGNIZED LOGIC TYPE": GOTO 21000:REM LOOK UP TYPE
21030 N0=N0+1:L(N0,0)=F0:REM ADD LOGIC TYPE
21040 FOR I=1 TO 7:N0$=I$(I):GOSUB 21300:REM LOOK UP AND              ADD SIG
21050 L(N0,I)=F0:S(F0)=S(F0)+1:NEXT I:REM KEEP TRACK OF LOAD          OF SIGNAL
21060 D0=VAL(I$(8)):IF I$(8)="" THEN D0=1:REM DEFAULT TO UNIT         DELAY
21070 D(L(N0,6))=D0:D(L(N0,7))=D0:REM STORE DELAY
21080 GOTO 21000
21200 F0=-1: REM LOOK UP LOGIC TYPE
21210 FOR I0=0 TO A4:IF T0$=T$(I0) THEN F0=I0:I0=A4
21220 NEXT I0:RETURN
21300 GOSUB 21400:IF F0<>-1 THEN RETURN:REM LOOKUP AND ADD SIG        NAME
21310 N1=N1+1:N$(N1)=N0$:F0=N1:RETURN
21400 F0=-1: REM LOOK UP SIGNAL NAME
21410 FOR I0=0 TO N1:IF N0$=N$(I0) THEN F0=I0:I0=N1
21420 NEXT I0:RETURN
21990 REM READ IN EXT DESCRIPTION *****************************
22000 GOSUB 20600:IF I0$="END" THEN GOSUB 20710:RETURN
22010 T0$=I0$:I9=5:GOSUB 20700:REM READ IN LINE
22020 IF T0$<>"A" AND T0$<>"P" THEN PRINT "UNRECOGNIZED TYPE"         :GOTO 22000
22030 N2=N2+1:E(N2,0)=0:IF T0$="P" THEN E(N2,0)=1:REM STORE           TYPE
22040 N0$=I$(1):GOSUB 21300:E(N2,1)=F0:REM ADD SIG NUMBER
22050 FOR I=2 TO 4:E(N2,I)=VAL(I$(I)):NEXT I
22060 E$(N2)=I$(5):IF E(N2,4)=0 THEN E(N2,4)=E(N2,2)+E(N2,3)*         (LEN(E$(N2))-1):IF E(N2,0)=1 THEN E(N2,4)=T9
22070 GOTO 22000
22990 REM READ MONITOR POINTS ********************************
23000 GOSUB 20600:IF I0$="END" THEN GOSUB 20710:RETURN:REM READ       SIGNAL NAME
23010 N0$=I0$:GOSUB 23500:GOTO 23000:REM ADD NAME TO LIST AND         LOOP
23100 INPUT "WANT TO ADD MONITOR POINTS (Y OR N)";I0$:                IF I0$="N" THEN RETURN
23110 INPUT "ENTER SIGNAL NAME, (OR 'END')";I0$:IF I0$="END"          THEN RETURN
23120 N0$=I0$:GOSUB 23500:GOTO 23110
23500 IF N3>A3 THEN PRINT "INSUFFICIENT DISPLAY SPACE",               "CHANGE A3 ":RETURN
23510 GOSUB 21400:IF F0=-1 THEN PRINT "NO SUCH SIGNAL":RETURN
23520 N3=N3+1:O(N3)=F0
23530 N0$=MID$(N$(F0),1,6):IF LEN(N0$)<6 THEN                         N0$=N0$+STRING$(6-LEN(N0$),B0$)
23540 FOR I=1 TO 6:O$(I)=O$(I)+MID$(N0$,I,1):NEXT I
23550 RETURN
25000 GOSUB 26000:REM ERROR CHECKER, SET UP SEL. TRACE ******
25010 FOR I=0 TO N1:V(I)=0:NEXT I:REM V WILL CONTAIN COUNT
25020 FOR I=0 TO N0:IX=I:FOR J=6 TO 7:X0=L(I,J):GOSUB 26100:          NEXT J:   NEXT I:REM MARK OUTS
25030 FOR X0=1 TO N1:IF V(X0)>1 THEN GOSUB 25300:REM                  WIRED OUTS.
25040 NEXT X0
25050 FOR I=0 TO N2:X0=E(I,1)
25060 IF V(X0)>0 THEN GOSUB 25400:REM WIRED EXT AND OUTS.
25070 IF V(X0)=0 THEN V(X0)=-1
25080 NEXT I
25090 FOR X0=1 TO N1:IF V(X0)=0 THEN GOSUB 25500: REM UNDEF. 
25100 IF V(X0)=-1 THEN V(X0)=0:REM CLEAR EXT FLAG
25110 NEXT X0
25115 FOR I=0 TO N0:IF L(I,0)<>0 THEN IX=I:REM CHK FOR CONT
25120 FOR J=1 TO 5:X0=L(I,J):GOSUB 26100:NEXT J:  NEXT I:             REM  FINISH UP SELECTIVE TRACE 
25130 GOSUB 25200:REM PRINT OUT LOAD TABLE
25180 RETURN
25200 PRINT:PRINT "LOAD TABLE"
25206 IF P9=1 THEN LPRINT:LPRINT "LOAD  TABLE"
25210 FOR I=1 TO N1:PRINT N$(I),:IF P9=1 THEN LPRINT N$(I),
25220 FOR I1=S(I) TO S(I+1)-1
25230 PRINT S(I1);:IF P9=1 THEN LPRINT S(I1);
25240 NEXT I1:PRINT:IF P9=1 THEN LPRINT
25250 NEXT I:RETURN
25300 E0=E0+1:ER$="ERROR -- SAME SIGNAL APPEARS AS AN OUTPUT OF       MULTIPLE GATES":PRINT ER$:IF P9=1 THEN LPRINT ER$
25310 FOR I1=1 TO V(X0):L0=S(S(X0+I1-1)):GOSUB 30060:REM PRINT         OUT LOGIC ENTRIES
25320 NEXT I1:RETURN
25400 ER$ = "WARNING -- SAME SIGNAL  APPEARS AS AN EXT                AS WELL AS THE OUTPUT OF A GATE":PRINT ER$:IF P9=1 THEN         LPRINT ER$
25410 GOSUB 25700:GOSUB 25310:RETURN
25500 PRINT "UNDEFINED SIGNAL: ";N$(X0):IF P9=1 THEN LPRINT           "UNDEFINED SIGNAL: ";N$(X0)
25510 RETURN
25700 PRINT E(I,0);N$(E(I,1));E(I,2);E(I,3);E(I,4);E$(I)
25710 RETURN
26000 I1=N1+2:REM ALLOCATE S ARRAY FOR SELECTIVE TRACE ******
26010 FOR I2=1 TO N1:I3=I1:I1=I1+S(I2):S(I2)=I3:NEXT I2
26020 S(N1+1)=I1:RETURN
26100 IF X0<>0 THEN S(S(X0)+V(X0))=IX:V(X0)=V(X0)+1
26110 RETURN
29000 INPUT "ENTER SAMPLE START, INCREMENT";M0,M1:T3=M0
29005 IF T3<T0 THEN PRINT "CAN'T SAMPLE BEFORE CURRENT TIME":         GOTO 29000
29010 INPUT "WANT HARD COPY PRINTOUT?";I0$
29020 P9=0:IF I0$="Y" THEN P9=1
29030 GOSUB 23100
29080 RETURN
30000 PRINT:PRINT "LOGIC NET LIST":IF P9=1 THEN LPRINT:LPRINT         "LOGIC NET LIST"
30010 PRINT "#";TAB(6);"TYPE";TAB(11);:IF P9=1 THEN                   LPRINT "#";TAB(6);"TYPE";TAB(11);
30020 FOR I=1 TO 5:PRINT "IN";I;TAB(11+7*I);:IF P9=1 THEN                          LPRINT "IN";I;TAB(11+7*I);
30025 NEXT I
30030 PRINT "OUT";TAB(53);"OUT-";TAB(60);"DELAY":IF P9=1 THEN        LPRINT "OUT";TAB(53);"OUT-";TAB(60);"DELAY"
30040 FOR L0=0 TO N0:GOSUB 30060:NEXT L0:RETURN
30060 PRINT L0;TAB(6);T$(L(L0,0));TAB(11);:IF P9=1 THEN               LPRINT L0;TAB(6);T$(L(L0,0));TAB(11);
30070 FOR I9=1 TO 7:PRINT N$(L(L0,I9));TAB(11+7*I9);:                  IF P9=1 THEN LPRINT N$(L(L0,I9));TAB(11+7*I9);
30080 NEXT I9:D0=D(L(L0,6)):IF L(L0,6)=0 THEN D0=D(L(L0,7))
30090 PRINT D0:IF P9=1 THEN LPRINT D0
30095 RETURN
30100 REM DEBUG DUMP OF LOGIC DESCRIPTION
30110 FOR I=0 TO N0:GOSUB 30200:NEXT I
30120 RETURN
30200 FOR J=0 TO 7:PRINT L(I,J);:NEXT J:PRINT                         D(L(I,6));D(L(I,7))
30210 PRINT T$(L(I,0));" ";
30220 FOR J=1 TO 7:PRINT N$(L(I,J));" ";:NEXT J:PRINT
30230 RETURN
30500 REM DUMP OUT EXT
30510 FOR I=0 TO N2:GOSUB 25700:NEXT I:RETURN
30600 FOR I=0 TO N3:PRINT N$(O(I));B0$;:NEXT I:PRINT
30610 RETURN:REM                                                   SAMPLE INPUT DATA, PARALLEL TO SERIAL TO PARALLEL CONVERTER
40000 REM PAR-SER, SER-PAR CONVERTERS
40005 REM PAR-SER
40010 DATA DFF,B4,CLOCK,,,,Q4,,
40020 DATA MUX,B3,Q4,L',,,D3,,
40030 DATA DFF,D3,CLOCK,,,,Q3,,
40040 DATA MUX,B2,Q3,L',,,D2,,
40050 DATA DFF,D2,CLOCK,,,,Q2,,
40060 DATA MUX,B1,Q2,L',,,D1,,
40070 DATA DFF,D1,CLOCK,,,,Q1,,
40080 DATA MUX,B0,Q1,L',,,D0,,
40090 DATA DFF,D0,CLOCK,,,,SERIAL,,
40100 DATA AND,LOAD,,,,,,L',
40110 REM SER-PAR
40120 DATA AND,CLOCK,,,,,,CLOCK',
40130 DATA DFF,SERIAL,CLOCK',,,,R4,,
40140 DATA DFF,R4,CLOCK',,,,R3,,
40150 DATA DFF,R3,CLOCK',,,,R2,,
40160 DATA DFF,R2,CLOCK',,,,R1,,
40170 DATA DFF,R1,CLOCK',,,,R0,,
40180 DATA END
40300 REM EXTERNALS
40310 DATA P,CLOCK,0,10,359,01
40320 DATA A,B0,0,120,359,101
40330 DATA A,B1,0,120,359,011
40340 DATA A,B2,0,120,359,111
40350 DATA A,B3,0,120,359,100
40360 DATA A,B4,0,120,359,010
40370 DATA A,LOAD,0,15,20,10
40371 DATA A,LOAD,120,15,140,10
40372 DATA A,LOAD,240,15,260,10
40380 DATA END
40400 REM OUTPUTS
40410 DATA LOAD,CLOCK,,B0,B1,B2,B3,B4,,SERIAL,,R0,R1,R2,R3,R4
40420 DATA END
