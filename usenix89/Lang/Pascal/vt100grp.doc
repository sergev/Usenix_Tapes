vt100grp.i:

Vt100grp.i is a file of Graphics procedures for the VT100 terminal.

To use these procedures, put the following line in the procedure 
section of your Pascal Program.

#include "/Full Path/vt100grp.i" 

When you Compile your Pascal program you will get a few warning 
messages about procedures that are never used.  You may ignore
these messages.  Obviously not every graphics procedure is going
to be used by all programs.

Following is a brief description on how to use the procedures.

For more Information you may wish to consult the VT100 users guide.


CursorBack(x :integer);
Move Cursor Back "x" Columns. If you try to move the Cursor back
past Column 1 the Cursor stays at Column 1. 


CursorDown(x :integer);
Move Cursor Down "x" Rows. If you try to move the Cursor Down past
row 24 the Cursor stays at row 24. 

CursorUp(x :integer);
Move Cursor up "x" Rows. If you try to move the Cursor Up past
row 1 the Cursor stays at row 1.

CursorForward(x :integer);
Move Cursor forward "x" Columns. If you try to move the Cursor Foward
pas Column 80/132 the Cursor stays at column 80/132.

ClearHome;
Clears Screen then move cursor to Row 1 Column 1.

Procedure Clear(x :integer);
Erases all or part of the screen depending on the value of x.
If X = 0 then  erase from the active position to the end of the screen.
If X = 1 then erase from the start of the screen to the active position.
If X = 2 then erase the whole display.
In all cases the position of the cursor is not changed.

Procedure LineClear(x :integer);
Erases all or part of the line depending on the value of x.
If X = 0 then erase from the active position to the end of the line.
If X = 1 then erase from the start of the line to the active position.
If X = 2 then erase the whole line.
In all cases the position of the cursor is not changed.

Procedure Inverse;
Once invoked all characters sent to the screen are shown as black 
on white (Inverse video).  This attribute remanes in effect until 
the procedure Normal is invoked. 

Procedure Bold;
Same as Inverse except characters are bold instead of inverse.

Procedure UnderScore;
Same as Inverse except characters are underlined instead of inverse.

Procedure Blink;
Same as Inverse except characters are Blinking instead of inverse.

Procedure Normal;
Once invoked all characters sent to the screen are shown
white on black non blinking and not underlined or bold.

Procedure Double;
All characters on the current line are printed double wide.  
This procedure must be invoked for every line that is to be
printed double wide. 

Procedures DoubleHighUpper; and DoubleHighLower;
These procedures cause the line containing the active position to 
become the top or bottom half of a double-high double-wide line.
These procedures must be used in pairs on adjacent lines and the
same character output must be sent to both lines.
Example:
	DoubleHighUpper;
	write('This is a double-high double-wide line');
	DoubleHighLower;
	write('This is a double-high double-wide line');

Procedure GraphicOn;
Turns on the vt100 Graphic character set.

Procedure GraphicOff;
turns off the vt100 Graphic character set.

Procedure Position(x,y :integer);
Place the cursor at column "x", row "y".


Procedure Hline(x,y,length,scanline :integer);
Draws a horizontal line from Position(x,y) "length" characters long
on vertical scanline "scanline".

Procedure Line(scanline :integer);
The line on which the cursor is on becomes a Horizontal Line 
on vertical scanline "scanline". 

Procedure Vline(x,y,length :integer);
This procedure draws a vertical line starting from Position(x,y)
down "length" rows. 

Procedure Box(x,y,High,Wide :integer);
Draws a box with Position(x,y) being the upper left corner of the
box;, down "High" rows and "Wide" columns.
The Cursor is placed at Position(x+1,y+1);

Procedure StoreCursor;
Tells the terminal to store the present cursor postion.

Procedure RestoreCursor;
Restore the Cursor to the position saved by procedure StoreCursor.

Procedure SetScrollRegion(t,b :integer);
Sets the scrolling region at "t" top row and
"b" bottom row;

Procedure ResetScroll;
Sets the scrolling to default state (rows 1 through 24).

Procedure LoadLED(x :integer);
Turns on or off the four LEDs L1, L2, L3, L4 on the keyboard.
If x = 0 turn off All LEDs
If x = 1 Turn on LED L1
If x = 2 Turn on LED L2
If x = 3 Turn on LED L3
If x = 4 Turn on LED L4
