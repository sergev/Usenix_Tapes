





                                       FILECRC

                                   13 August 1986
                                    Ted H. Emigh


               FILECRC is a program to help detect when files have been
          corrupted.  FILECRC creates a list of all the files on the
          default drive along with creation date, file size, and a CRC
          (cyclic redundancy check) for each file.  When FILECRC is run
          again the new list is compared with the old list.  For any file,
          it is possible that:

          1)   The file is completely unchanged from the previous time.
               The file name (and directory entry) are the same at the two
               times, and it has not been modified.

          2)   The file has been modified in the normal manner, so that the
               directory entry has a new time of creation.  Files of this
               sort are counted, but no special treatment is given to them.

          3)   The file has been deleted in the time since the first time
               FILECRC was run.  Files of this sort are counted, but no
               special treatment is given to them.

          4)   A new file has appeared that was not on the disk at the time
               of the previous run of FILECRC.  Files of this sort are
               counted, and a list is placed in the file FILES$$$.NEW.
               While it is usual to find new files on the disk, this gives
               an easy way to keep track of what files are new, and where
               they are located.  This is important when using public
               domain programs to make sure they are not creating new files
               without you knowing about it.

          5)   The directory entry for a file is the same for both of the
               times the program was run, but the file was modified in some
               way.  This should not occur in normal practice, so the
               program writes a message to the terminal, and a list of
               these files is placed in the file FILES$$$.MOD.  This can
               occur when you use NORTON UTILITIES, or other such programs
               to modify the disk directly, bypassing the normal DOS
               handling of the files.  It also can happen when programs
               'run wild' (this is what prompted me to write this program
               in the first place).

               Running the program prior to each backup will assure you
          that you are not backing up files that have been corrupted.
          Also, in program development, running the program before and
          after a test run of your program can assure you that your program
          has not messed up the disk.



                                          1












                                   RUNNING FILECRC

               There are three files associated with FILECRC:
          FILECRC.COM -- The main program.
          COMPARE.CHN -- The comparison program overlay.
          COMPARE.COM -- A stand-alone version of the comparison program.

               FILECRC is run without command line parameters (although
          output redirection is permitted).  It will create CHECK$$$.NEW
          (or CHECK$$$.CRC if the file does not exist in the default
          directory), which is a list of all the files on the default disk
          in all directories.  FILECRC displays the directory names as it
          goes through them.  FILECRC will then call COMPARE, which will
          compare the files in CHECK$$$.NEW with those in CHECK$$$.CRC,
          noting any differences.  When COMPARE is finished, the old file
          list now will be called CHECK$$$.OLD, and the newly created one
          will be called CHECK$$$.CRC.

               COMPARE can be run as a stand alone program by typing

          COMPARE [NEWLIST.FIL [OLDLIST.FIL]]

               If NEWLIST.FIL is given, this will be used instead of
          CHECK$$$.NEW,and if given, OLDLIST.FIL will be used instead of
          CHECK$$$.CRC.  For example,
          COMPARE CHECK
          will check the file CHECK with CHECK$$$.CRC.  If NEWLIST.FIL is
          given, CHECK$$$.CRC will not be renamed.

               Any files created since the previous time FILECRC was run
          will be listed in the file FILES$$$.NEW, and any files that have
          been modified in a "NON DOS" manner will be listed in the file
          FILE$$$.MOD.




















                                          2












                                  PROGRAMMING NOTES


               FILECRC is written using Turbo Pascal, Version 3.0 for
          MSDOS.  It has been tested on an IBM PC/AT using DOS 3.10.  This
          program is not meant to represent the epitome of programming
          skill, but it works.  Any improvements and suggestions are
          welcome, particularly if you can improve the speed.  On my PC/AT
          with some 730 files occupying 18MB the program takes about 6
          minutes to complete.  I am convinced that FILECRC.COM cannot be
          improved significantly on speed (take that as a challenge,if you
          wish), but COMPARE.CHN and COMPARE.COM are relatively inefficient
          (but then of the 6 minutes, 5-1/2 minutes are spent in
          FILECRC.COM).  Programming notes in the programs are sparse, but
          I specifically set separate routines for handling each of the the
          file comparison types in COMPARE (use the procedures file_new,
          file_updated, file_OK, and bad_CRC if you would like to do
          something special for each file comparison type).

          FILECRC will work with any number of files or directories.  As
          written, COMPARE has a maximum of 200 directories and 1900 files
          with any number of files within any particular directory.  The
          maximum length of the directory name string is 64 characters.  I
          have used the program on subdirectories up to 10 levels deep
          without any problems.  These values for the number of directories
          and the number of files uses up just about as much memory as
          TURBO Pascal allows, so an increase in these numbers would
          necessitate a redesign of the program.

          Special thanks go to David Dantowitz of Digital Equipment
          Corporation (Dantowitz%eagle1.dec@decwrl) for providing the CRC
          routines (generate_table_256 and crc_string_256) and the routines
          for getting a directory (get_DTA, set_DTA, find_first, and
          find_next).  Of course, he takes no responsibility for the way I
          used his code.

          Ted H. Emigh
          Department of Genetics
          North Carolina State University
          Box 7614
          Raleigh, NC   27695-7614

          emigh@ecsvax.uucp
          NEMIGH@TUCC.BITNET









                                          3






