Path: plus5!wuphys!wucs!we53!ltuxa!cuae2!ihnp4!cbatt!clyde!caip!seismo!mcvax!unido!siedap!tim
From: tim@siedap.UUCP
Newsgroups: net.sources
Subject: FSLS - List big files in file system - (nf)
Message-ID: <14600002@siedap.UUCP>
Date: 3 Sep 86 11:33:00 GMT
Lines: 625
Nf-ID: #N:siedap:14600002:000:16692
Nf-From: siedap!tim    Sep  3 12:33:00 1986
Posted: Wed Sep  3 06:33:00 1986


THIS PROGRAM FINDS LARGE FILES IN A GIVEN (BSD) FILE SYSTEM
===========================================================

None of the standard programs (ls, find, du, quot) seem to  do
exactly  this,  so  I  wrote  'fsls'  to  do the job. It calls
'ncheck(8)' for the given file system, captures the result  in
a  temporary file, calls stat for each file listed and outputs
a line in the 'ls -l' format for each file with at  least  the
given number of blocks allocated. 

If anyone knows how to do this with standard programs,  please
tell  me how I could have saved time. If anyone improves fsls,
please let me have the mods. 

Replies to : { mcvax / seismo } !unido!ztivax!siedap!tim

The program contains some pieces of code which may be  usefull
for other applications : 

    + How to establish a block device from a mount name
      (using both fstab and mtab)

    + Subroutines mypwuid and mypwgid which only call their
      library equivalents ONCE for a given integer id (the
      known ones are chained into an malloc'd list)

    + Subroutine to run another program as a sub-process

This is NOT a shell archive - just chop out  the  manual  page
and  the  program  which follow. No defines or anything needed
when compiling fsls, but it MUST be installed with set-uid  to
'root', or it can't run ncheck. 

------- 8< ------- 8< ------- 8< ------- 8< ------- 8< -------

FSLS(1)                                                FSLS(1)

NAME
     fsls - list files of given file system in 'ls -l' format

SYNOPSIS

     fsls [-s<n>] file-system-mount-name [output-file]

DESCRIPTION

     Fsls can be used to locate large files in  a  given  file
     system.  Find(1) has a size option, but this is only true
     when the file has exactly that number of blocks (not when 
     it has at least that  many  blocks).  Furthermore  'find'
     doesn't  stop at file system boundaries - bad if you want
     to look at '/'. Du(1) shares this problem, furthermore it 
     doesn't report any file names. Quot(8)  restricts  itself
     to one file system, but none of it's options allow a list 
     including  file sizes, let alone restricted by file size.

     So when I couldn't find a program-written file which  had
     filled up our root file system, I wrote the first version 
     of  what  I later generalised and polished to be fsls. It
     calls ncheck(8) with stdout  redirected  to  a  temporary
     file,  and then reads this file and performs a stat(2) on
     each of the files listed. Using the  info  from  stat,  a
     line is output giving information about the file. 

     The -s option if used limits the output to files with  at
     least  the given number of BLOCKS actually allocated [the
     field used is (struct stat).st_blocks] so the  number  of
     (kilo)bytes  depends on the file system's block size. The
     output format is similar to 'ls -l', but since it was not 
     neccessary to be compatible, fsls is more explicit  about
     the  type  of file. Output is to stdout, unless an output
     file is given as second argument. 

FILES

     /tmp/fsls<pid> for holding output of ncheck

SEE ALSO

     du(1) ls(1) ncheck(8) quot(8)

AUTHOR

     Tim Reeves , Siemens AG , Munich

BUGS

     Doesn't check for inconsistency output forms from ncheck.
     Directory contents hidden by mounting are reported as :
	      "Can't read ..."
     Could do with more options to limit output,
	      e.g. -u<user>, -n<wildcard-name>

