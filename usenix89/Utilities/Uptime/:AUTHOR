Path: plus5!wuphys!wucs!we53!ltuxa!cuae2!clyde!rutgers!uwvax!uwmacc!uwmcsd1!shop
From: shop@uwmcsd1.UUCP (Thomas Krueger)
Newsgroups: net.sources
Subject: repaired uptime.c
Message-ID: <1502@uwmcsd1.UUCP>
Date: 12 Nov 86 20:44:25 GMT
Distribution: usa
Organization: Computing Services Electronics Shop, UW Milwaukee
Lines: 115
Posted: Wed Nov 12 14:44:25 1986

This is a new SYSV uptime.c that works on AT&T PC7300 SYSVR3 and 
Convergent CTIX SYS5R3.



From uwm-evax!uwmcsd1!dsl68k!booth!root Thu Oct  9 22:09:35 1986
Received: by evax.milw.wisc.edu (5.51/5.6)
	id AA29251; Thu, 9 Oct 86 22:09:30 CDT
Received: by evax.milw.wisc.edu (5.51/5.6)
	id AA29243; Thu, 9 Oct 86 22:09:22 CDT
Received: by csd1.milw.wisc.EDU; id AA23848; Thu, 9 Oct 86 22:04:32 cdt
From: <uwm-evax!uwmcsd1!dsl68k!booth!root>
Received: by dsl68k.milw.wisc.edu; id AA00260; Thu, 9 Oct 86 22:07:32 cdt
Date: Thu, 9 Oct 86 22:07:32 cdt
Message-Id: <8610100307.AA00260@dsl68k.milw.wisc.edu>
To: dsl68k!uwm-evax!tjk
Subject: uptime.c
Status: R

	Here is the correct version of uptime.c which you send
over before.  It befuddles me that this error was allowed to happen
as you would expect someone to try it out!  The function times()
will return an error and as a result everything will zero.
	The error occurs in line number 39 which reads:

  	uptime = (times(tbuf) / HZ);

It should read:

  	uptime = (times(&tbuf) / HZ);

The difference is that times() expects the address of tbuf.

-- 
Thomas Krueger				...ihnp4!uwmcsd1!shop	or
University of Wisconsin Milwaukee	shop@csd1.milw.wisc.edu
Computing Services Electronics Shop
3200 N. Cramer St.			(414) 963-5172
Milwaukee Wi 53211

/*
 *	uptime.c -- Print how long the system has been up 
 *				System V Implmenentation
 *
 *	8/19/86	- Version 1.0
 *		(sjm@dayton)	Steven McDowall
 *
 *	9/19/86 - Version 1.1
 *	  Get boot time much faster from times() call
 *		(pej@cuuxb)		Paul Jatkowski
 *
 *	cc -O -o uptime uptime.c
 */

# include <sys/types.h>			/* system types */
# include <sys/param.h>			/* for HZ */
# include <sys/times.h>
# include <time.h>

#define	MINUTES	60
#define HOURS	(MINUTES * 60)
#define DAYS	(HOURS * 24)

int		memfd;

main(argc, argv)
int  argc;
char *argv[];
{
	time_t	uptime, times();
	struct  tm  *ts;
	struct	tms tbuf;
	void	ptime();

	
/* 	Get the number of clock cycles the system has been running
	and divide by the clock rate (HZ) to get seconds		 */

  	uptime = (times(&tbuf) / HZ);

/* 	Print out information in one of 2 formats			 */

	if (argc > 1)				/* assume we want boot date */
	{
		uptime = time((long *) 0) - uptime;
		ts = localtime(&uptime);
		printf("System was last booted on %s", asctime(ts));
	}
	else					/* we want old uptime format */
		ptime(uptime);

}
/* 	main 								*/
/* 	Print the time in a nice format 				*/

void ptime(secs)
time_t secs;
{
short	days, hours, minutes;

secs -= (days = secs / DAYS) * DAYS;
secs -= (hours = secs / HOURS) * HOURS;
secs -= (minutes = secs / MINUTES) * MINUTES;

printf("The system has been up for ");
if (days != 0)
	printf("%d %s ", days, (days == 1 ? "day" : "days"));
if (hours != 0)
	printf("%d %s ", hours, (hours == 1 ? "hour" : "hours"));
if (minutes != 0)
	printf("%d %s ", minutes, (minutes == 1 ? "minute" : "minutes"));
	printf("and %d %s.\n", secs, (secs == 1 ? "second" : "seconds"));
}


